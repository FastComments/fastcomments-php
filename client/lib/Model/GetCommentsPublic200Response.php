<?php
/**
 * GetCommentsPublic200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * fastcomments
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetCommentsPublic200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetCommentsPublic200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetCommentsPublic_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status_code' => 'int',
        'status' => '\OpenAPI\Client\Model\APIStatusFAILED',
        'code' => 'string',
        'reason' => 'string',
        'comments' => '\OpenAPI\Client\Model\PublicComment[]',
        'user' => '\OpenAPI\Client\Model\UserSessionInfo',
        'url_id_clean' => 'string',
        'last_gen_date' => 'int',
        'includes_past_pages' => 'bool',
        'is_demo' => 'bool',
        'comment_count' => 'int',
        'is_site_admin' => 'bool',
        'has_billing_issue' => 'bool',
        'module_data' => 'array<string,object>',
        'page_number' => 'int',
        'is_white_labeled' => 'bool',
        'is_prod' => 'bool',
        'is_crawler' => 'bool',
        'notification_count' => 'int',
        'has_more' => 'bool',
        'is_closed' => 'bool',
        'presence_poll_state' => 'int',
        'custom_config' => '\OpenAPI\Client\Model\CustomConfigParameters',
        'url_id_ws' => 'string',
        'user_id_ws' => 'string',
        'tenant_id_ws' => 'string',
        'secondary_code' => 'string',
        'banned_until' => 'float',
        'max_character_length' => 'float',
        'translated_error' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status_code' => 'int32',
        'status' => null,
        'code' => null,
        'reason' => null,
        'comments' => null,
        'user' => null,
        'url_id_clean' => null,
        'last_gen_date' => 'int64',
        'includes_past_pages' => null,
        'is_demo' => null,
        'comment_count' => 'int32',
        'is_site_admin' => null,
        'has_billing_issue' => null,
        'module_data' => null,
        'page_number' => 'int32',
        'is_white_labeled' => null,
        'is_prod' => null,
        'is_crawler' => null,
        'notification_count' => 'int32',
        'has_more' => null,
        'is_closed' => null,
        'presence_poll_state' => 'int32',
        'custom_config' => null,
        'url_id_ws' => null,
        'user_id_ws' => null,
        'tenant_id_ws' => null,
        'secondary_code' => null,
        'banned_until' => 'double',
        'max_character_length' => 'double',
        'translated_error' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'status_code' => false,
        'status' => false,
        'code' => false,
        'reason' => false,
        'comments' => false,
        'user' => true,
        'url_id_clean' => false,
        'last_gen_date' => true,
        'includes_past_pages' => false,
        'is_demo' => false,
        'comment_count' => false,
        'is_site_admin' => false,
        'has_billing_issue' => false,
        'module_data' => false,
        'page_number' => false,
        'is_white_labeled' => false,
        'is_prod' => false,
        'is_crawler' => false,
        'notification_count' => false,
        'has_more' => false,
        'is_closed' => false,
        'presence_poll_state' => false,
        'custom_config' => false,
        'url_id_ws' => false,
        'user_id_ws' => false,
        'tenant_id_ws' => false,
        'secondary_code' => false,
        'banned_until' => false,
        'max_character_length' => false,
        'translated_error' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status_code' => 'statusCode',
        'status' => 'status',
        'code' => 'code',
        'reason' => 'reason',
        'comments' => 'comments',
        'user' => 'user',
        'url_id_clean' => 'urlIdClean',
        'last_gen_date' => 'lastGenDate',
        'includes_past_pages' => 'includesPastPages',
        'is_demo' => 'isDemo',
        'comment_count' => 'commentCount',
        'is_site_admin' => 'isSiteAdmin',
        'has_billing_issue' => 'hasBillingIssue',
        'module_data' => 'moduleData',
        'page_number' => 'pageNumber',
        'is_white_labeled' => 'isWhiteLabeled',
        'is_prod' => 'isProd',
        'is_crawler' => 'isCrawler',
        'notification_count' => 'notificationCount',
        'has_more' => 'hasMore',
        'is_closed' => 'isClosed',
        'presence_poll_state' => 'presencePollState',
        'custom_config' => 'customConfig',
        'url_id_ws' => 'urlIdWS',
        'user_id_ws' => 'userIdWS',
        'tenant_id_ws' => 'tenantIdWS',
        'secondary_code' => 'secondaryCode',
        'banned_until' => 'bannedUntil',
        'max_character_length' => 'maxCharacterLength',
        'translated_error' => 'translatedError'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status_code' => 'setStatusCode',
        'status' => 'setStatus',
        'code' => 'setCode',
        'reason' => 'setReason',
        'comments' => 'setComments',
        'user' => 'setUser',
        'url_id_clean' => 'setUrlIdClean',
        'last_gen_date' => 'setLastGenDate',
        'includes_past_pages' => 'setIncludesPastPages',
        'is_demo' => 'setIsDemo',
        'comment_count' => 'setCommentCount',
        'is_site_admin' => 'setIsSiteAdmin',
        'has_billing_issue' => 'setHasBillingIssue',
        'module_data' => 'setModuleData',
        'page_number' => 'setPageNumber',
        'is_white_labeled' => 'setIsWhiteLabeled',
        'is_prod' => 'setIsProd',
        'is_crawler' => 'setIsCrawler',
        'notification_count' => 'setNotificationCount',
        'has_more' => 'setHasMore',
        'is_closed' => 'setIsClosed',
        'presence_poll_state' => 'setPresencePollState',
        'custom_config' => 'setCustomConfig',
        'url_id_ws' => 'setUrlIdWs',
        'user_id_ws' => 'setUserIdWs',
        'tenant_id_ws' => 'setTenantIdWs',
        'secondary_code' => 'setSecondaryCode',
        'banned_until' => 'setBannedUntil',
        'max_character_length' => 'setMaxCharacterLength',
        'translated_error' => 'setTranslatedError'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status_code' => 'getStatusCode',
        'status' => 'getStatus',
        'code' => 'getCode',
        'reason' => 'getReason',
        'comments' => 'getComments',
        'user' => 'getUser',
        'url_id_clean' => 'getUrlIdClean',
        'last_gen_date' => 'getLastGenDate',
        'includes_past_pages' => 'getIncludesPastPages',
        'is_demo' => 'getIsDemo',
        'comment_count' => 'getCommentCount',
        'is_site_admin' => 'getIsSiteAdmin',
        'has_billing_issue' => 'getHasBillingIssue',
        'module_data' => 'getModuleData',
        'page_number' => 'getPageNumber',
        'is_white_labeled' => 'getIsWhiteLabeled',
        'is_prod' => 'getIsProd',
        'is_crawler' => 'getIsCrawler',
        'notification_count' => 'getNotificationCount',
        'has_more' => 'getHasMore',
        'is_closed' => 'getIsClosed',
        'presence_poll_state' => 'getPresencePollState',
        'custom_config' => 'getCustomConfig',
        'url_id_ws' => 'getUrlIdWs',
        'user_id_ws' => 'getUserIdWs',
        'tenant_id_ws' => 'getTenantIdWs',
        'secondary_code' => 'getSecondaryCode',
        'banned_until' => 'getBannedUntil',
        'max_character_length' => 'getMaxCharacterLength',
        'translated_error' => 'getTranslatedError'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('status_code', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('url_id_clean', $data ?? [], null);
        $this->setIfExists('last_gen_date', $data ?? [], null);
        $this->setIfExists('includes_past_pages', $data ?? [], null);
        $this->setIfExists('is_demo', $data ?? [], null);
        $this->setIfExists('comment_count', $data ?? [], null);
        $this->setIfExists('is_site_admin', $data ?? [], null);
        $this->setIfExists('has_billing_issue', $data ?? [], null);
        $this->setIfExists('module_data', $data ?? [], null);
        $this->setIfExists('page_number', $data ?? [], null);
        $this->setIfExists('is_white_labeled', $data ?? [], null);
        $this->setIfExists('is_prod', $data ?? [], null);
        $this->setIfExists('is_crawler', $data ?? [], null);
        $this->setIfExists('notification_count', $data ?? [], null);
        $this->setIfExists('has_more', $data ?? [], null);
        $this->setIfExists('is_closed', $data ?? [], null);
        $this->setIfExists('presence_poll_state', $data ?? [], null);
        $this->setIfExists('custom_config', $data ?? [], null);
        $this->setIfExists('url_id_ws', $data ?? [], null);
        $this->setIfExists('user_id_ws', $data ?? [], null);
        $this->setIfExists('tenant_id_ws', $data ?? [], null);
        $this->setIfExists('secondary_code', $data ?? [], null);
        $this->setIfExists('banned_until', $data ?? [], null);
        $this->setIfExists('max_character_length', $data ?? [], null);
        $this->setIfExists('translated_error', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['reason'] === null) {
            $invalidProperties[] = "'reason' can't be null";
        }
        if ($this->container['comments'] === null) {
            $invalidProperties[] = "'comments' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['page_number'] === null) {
            $invalidProperties[] = "'page_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status_code
     *
     * @return int|null
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param int|null $status_code status_code
     *
     * @return self
     */
    public function setStatusCode($status_code)
    {
        if (is_null($status_code)) {
            throw new \InvalidArgumentException('non-nullable status_code cannot be null');
        }
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\APIStatusFAILED
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\APIStatusFAILED $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \OpenAPI\Client\Model\PublicComment[]
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \OpenAPI\Client\Model\PublicComment[] $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\UserSessionInfo
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\UserSessionInfo $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            array_push($this->openAPINullablesSetToNull, 'user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets url_id_clean
     *
     * @return string|null
     */
    public function getUrlIdClean()
    {
        return $this->container['url_id_clean'];
    }

    /**
     * Sets url_id_clean
     *
     * @param string|null $url_id_clean url_id_clean
     *
     * @return self
     */
    public function setUrlIdClean($url_id_clean)
    {
        if (is_null($url_id_clean)) {
            throw new \InvalidArgumentException('non-nullable url_id_clean cannot be null');
        }
        $this->container['url_id_clean'] = $url_id_clean;

        return $this;
    }

    /**
     * Gets last_gen_date
     *
     * @return int|null
     */
    public function getLastGenDate()
    {
        return $this->container['last_gen_date'];
    }

    /**
     * Sets last_gen_date
     *
     * @param int|null $last_gen_date last_gen_date
     *
     * @return self
     */
    public function setLastGenDate($last_gen_date)
    {
        if (is_null($last_gen_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_gen_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_gen_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_gen_date'] = $last_gen_date;

        return $this;
    }

    /**
     * Gets includes_past_pages
     *
     * @return bool|null
     */
    public function getIncludesPastPages()
    {
        return $this->container['includes_past_pages'];
    }

    /**
     * Sets includes_past_pages
     *
     * @param bool|null $includes_past_pages includes_past_pages
     *
     * @return self
     */
    public function setIncludesPastPages($includes_past_pages)
    {
        if (is_null($includes_past_pages)) {
            throw new \InvalidArgumentException('non-nullable includes_past_pages cannot be null');
        }
        $this->container['includes_past_pages'] = $includes_past_pages;

        return $this;
    }

    /**
     * Gets is_demo
     *
     * @return bool|null
     */
    public function getIsDemo()
    {
        return $this->container['is_demo'];
    }

    /**
     * Sets is_demo
     *
     * @param bool|null $is_demo is_demo
     *
     * @return self
     */
    public function setIsDemo($is_demo)
    {
        if (is_null($is_demo)) {
            throw new \InvalidArgumentException('non-nullable is_demo cannot be null');
        }
        $this->container['is_demo'] = $is_demo;

        return $this;
    }

    /**
     * Gets comment_count
     *
     * @return int|null
     */
    public function getCommentCount()
    {
        return $this->container['comment_count'];
    }

    /**
     * Sets comment_count
     *
     * @param int|null $comment_count comment_count
     *
     * @return self
     */
    public function setCommentCount($comment_count)
    {
        if (is_null($comment_count)) {
            throw new \InvalidArgumentException('non-nullable comment_count cannot be null');
        }
        $this->container['comment_count'] = $comment_count;

        return $this;
    }

    /**
     * Gets is_site_admin
     *
     * @return bool|null
     */
    public function getIsSiteAdmin()
    {
        return $this->container['is_site_admin'];
    }

    /**
     * Sets is_site_admin
     *
     * @param bool|null $is_site_admin is_site_admin
     *
     * @return self
     */
    public function setIsSiteAdmin($is_site_admin)
    {
        if (is_null($is_site_admin)) {
            throw new \InvalidArgumentException('non-nullable is_site_admin cannot be null');
        }
        $this->container['is_site_admin'] = $is_site_admin;

        return $this;
    }

    /**
     * Gets has_billing_issue
     *
     * @return bool|null
     */
    public function getHasBillingIssue()
    {
        return $this->container['has_billing_issue'];
    }

    /**
     * Sets has_billing_issue
     *
     * @param bool|null $has_billing_issue has_billing_issue
     *
     * @return self
     */
    public function setHasBillingIssue($has_billing_issue)
    {
        if (is_null($has_billing_issue)) {
            throw new \InvalidArgumentException('non-nullable has_billing_issue cannot be null');
        }
        $this->container['has_billing_issue'] = $has_billing_issue;

        return $this;
    }

    /**
     * Gets module_data
     *
     * @return array<string,object>|null
     */
    public function getModuleData()
    {
        return $this->container['module_data'];
    }

    /**
     * Sets module_data
     *
     * @param array<string,object>|null $module_data Construct a type with a set of properties K of type T
     *
     * @return self
     */
    public function setModuleData($module_data)
    {
        if (is_null($module_data)) {
            throw new \InvalidArgumentException('non-nullable module_data cannot be null');
        }
        $this->container['module_data'] = $module_data;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return self
     */
    public function setPageNumber($page_number)
    {
        if (is_null($page_number)) {
            throw new \InvalidArgumentException('non-nullable page_number cannot be null');
        }
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets is_white_labeled
     *
     * @return bool|null
     */
    public function getIsWhiteLabeled()
    {
        return $this->container['is_white_labeled'];
    }

    /**
     * Sets is_white_labeled
     *
     * @param bool|null $is_white_labeled is_white_labeled
     *
     * @return self
     */
    public function setIsWhiteLabeled($is_white_labeled)
    {
        if (is_null($is_white_labeled)) {
            throw new \InvalidArgumentException('non-nullable is_white_labeled cannot be null');
        }
        $this->container['is_white_labeled'] = $is_white_labeled;

        return $this;
    }

    /**
     * Gets is_prod
     *
     * @return bool|null
     */
    public function getIsProd()
    {
        return $this->container['is_prod'];
    }

    /**
     * Sets is_prod
     *
     * @param bool|null $is_prod is_prod
     *
     * @return self
     */
    public function setIsProd($is_prod)
    {
        if (is_null($is_prod)) {
            throw new \InvalidArgumentException('non-nullable is_prod cannot be null');
        }
        $this->container['is_prod'] = $is_prod;

        return $this;
    }

    /**
     * Gets is_crawler
     *
     * @return bool|null
     */
    public function getIsCrawler()
    {
        return $this->container['is_crawler'];
    }

    /**
     * Sets is_crawler
     *
     * @param bool|null $is_crawler is_crawler
     *
     * @return self
     */
    public function setIsCrawler($is_crawler)
    {
        if (is_null($is_crawler)) {
            throw new \InvalidArgumentException('non-nullable is_crawler cannot be null');
        }
        $this->container['is_crawler'] = $is_crawler;

        return $this;
    }

    /**
     * Gets notification_count
     *
     * @return int|null
     */
    public function getNotificationCount()
    {
        return $this->container['notification_count'];
    }

    /**
     * Sets notification_count
     *
     * @param int|null $notification_count notification_count
     *
     * @return self
     */
    public function setNotificationCount($notification_count)
    {
        if (is_null($notification_count)) {
            throw new \InvalidArgumentException('non-nullable notification_count cannot be null');
        }
        $this->container['notification_count'] = $notification_count;

        return $this;
    }

    /**
     * Gets has_more
     *
     * @return bool|null
     */
    public function getHasMore()
    {
        return $this->container['has_more'];
    }

    /**
     * Sets has_more
     *
     * @param bool|null $has_more has_more
     *
     * @return self
     */
    public function setHasMore($has_more)
    {
        if (is_null($has_more)) {
            throw new \InvalidArgumentException('non-nullable has_more cannot be null');
        }
        $this->container['has_more'] = $has_more;

        return $this;
    }

    /**
     * Gets is_closed
     *
     * @return bool|null
     */
    public function getIsClosed()
    {
        return $this->container['is_closed'];
    }

    /**
     * Sets is_closed
     *
     * @param bool|null $is_closed is_closed
     *
     * @return self
     */
    public function setIsClosed($is_closed)
    {
        if (is_null($is_closed)) {
            throw new \InvalidArgumentException('non-nullable is_closed cannot be null');
        }
        $this->container['is_closed'] = $is_closed;

        return $this;
    }

    /**
     * Gets presence_poll_state
     *
     * @return int|null
     */
    public function getPresencePollState()
    {
        return $this->container['presence_poll_state'];
    }

    /**
     * Sets presence_poll_state
     *
     * @param int|null $presence_poll_state presence_poll_state
     *
     * @return self
     */
    public function setPresencePollState($presence_poll_state)
    {
        if (is_null($presence_poll_state)) {
            throw new \InvalidArgumentException('non-nullable presence_poll_state cannot be null');
        }
        $this->container['presence_poll_state'] = $presence_poll_state;

        return $this;
    }

    /**
     * Gets custom_config
     *
     * @return \OpenAPI\Client\Model\CustomConfigParameters|null
     */
    public function getCustomConfig()
    {
        return $this->container['custom_config'];
    }

    /**
     * Sets custom_config
     *
     * @param \OpenAPI\Client\Model\CustomConfigParameters|null $custom_config custom_config
     *
     * @return self
     */
    public function setCustomConfig($custom_config)
    {
        if (is_null($custom_config)) {
            throw new \InvalidArgumentException('non-nullable custom_config cannot be null');
        }
        $this->container['custom_config'] = $custom_config;

        return $this;
    }

    /**
     * Gets url_id_ws
     *
     * @return string|null
     */
    public function getUrlIdWs()
    {
        return $this->container['url_id_ws'];
    }

    /**
     * Sets url_id_ws
     *
     * @param string|null $url_id_ws url_id_ws
     *
     * @return self
     */
    public function setUrlIdWs($url_id_ws)
    {
        if (is_null($url_id_ws)) {
            throw new \InvalidArgumentException('non-nullable url_id_ws cannot be null');
        }
        $this->container['url_id_ws'] = $url_id_ws;

        return $this;
    }

    /**
     * Gets user_id_ws
     *
     * @return string|null
     */
    public function getUserIdWs()
    {
        return $this->container['user_id_ws'];
    }

    /**
     * Sets user_id_ws
     *
     * @param string|null $user_id_ws user_id_ws
     *
     * @return self
     */
    public function setUserIdWs($user_id_ws)
    {
        if (is_null($user_id_ws)) {
            throw new \InvalidArgumentException('non-nullable user_id_ws cannot be null');
        }
        $this->container['user_id_ws'] = $user_id_ws;

        return $this;
    }

    /**
     * Gets tenant_id_ws
     *
     * @return string|null
     */
    public function getTenantIdWs()
    {
        return $this->container['tenant_id_ws'];
    }

    /**
     * Sets tenant_id_ws
     *
     * @param string|null $tenant_id_ws tenant_id_ws
     *
     * @return self
     */
    public function setTenantIdWs($tenant_id_ws)
    {
        if (is_null($tenant_id_ws)) {
            throw new \InvalidArgumentException('non-nullable tenant_id_ws cannot be null');
        }
        $this->container['tenant_id_ws'] = $tenant_id_ws;

        return $this;
    }

    /**
     * Gets secondary_code
     *
     * @return string|null
     */
    public function getSecondaryCode()
    {
        return $this->container['secondary_code'];
    }

    /**
     * Sets secondary_code
     *
     * @param string|null $secondary_code secondary_code
     *
     * @return self
     */
    public function setSecondaryCode($secondary_code)
    {
        if (is_null($secondary_code)) {
            throw new \InvalidArgumentException('non-nullable secondary_code cannot be null');
        }
        $this->container['secondary_code'] = $secondary_code;

        return $this;
    }

    /**
     * Gets banned_until
     *
     * @return float|null
     */
    public function getBannedUntil()
    {
        return $this->container['banned_until'];
    }

    /**
     * Sets banned_until
     *
     * @param float|null $banned_until banned_until
     *
     * @return self
     */
    public function setBannedUntil($banned_until)
    {
        if (is_null($banned_until)) {
            throw new \InvalidArgumentException('non-nullable banned_until cannot be null');
        }
        $this->container['banned_until'] = $banned_until;

        return $this;
    }

    /**
     * Gets max_character_length
     *
     * @return float|null
     */
    public function getMaxCharacterLength()
    {
        return $this->container['max_character_length'];
    }

    /**
     * Sets max_character_length
     *
     * @param float|null $max_character_length max_character_length
     *
     * @return self
     */
    public function setMaxCharacterLength($max_character_length)
    {
        if (is_null($max_character_length)) {
            throw new \InvalidArgumentException('non-nullable max_character_length cannot be null');
        }
        $this->container['max_character_length'] = $max_character_length;

        return $this;
    }

    /**
     * Gets translated_error
     *
     * @return string|null
     */
    public function getTranslatedError()
    {
        return $this->container['translated_error'];
    }

    /**
     * Sets translated_error
     *
     * @param string|null $translated_error translated_error
     *
     * @return self
     */
    public function setTranslatedError($translated_error)
    {
        if (is_null($translated_error)) {
            throw new \InvalidArgumentException('non-nullable translated_error cannot be null');
        }
        $this->container['translated_error'] = $translated_error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


