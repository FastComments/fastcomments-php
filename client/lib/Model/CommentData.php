<?php
/**
 * CommentData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * fastcomments
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CommentData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CommentData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CommentData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date' => 'float',
        'local_date_string' => 'string',
        'local_date_hours' => 'float',
        'commenter_name' => 'string',
        'commenter_email' => 'string',
        'commenter_link' => 'string',
        'comment' => 'string',
        'product_id' => 'float',
        'user_id' => 'string',
        'avatar_src' => 'string',
        'parent_id' => 'string',
        'mentions' => '\OpenAPI\Client\Model\CommentUserMentionInfo[]',
        'hash_tags' => '\OpenAPI\Client\Model\CommentUserHashTagInfo[]',
        'page_title' => 'string',
        'is_from_my_account_page' => 'bool',
        'url' => 'string',
        'url_id' => 'string',
        'meta' => 'object',
        'moderation_group_ids' => 'string[]',
        'rating' => 'float',
        'from_offline_restore' => 'bool',
        'autoplay_delay_ms' => 'float',
        'feedback_ids' => 'string[]',
        'question_values' => 'array<string,\OpenAPI\Client\Model\RecordStringStringOrNumberValue>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date' => 'double',
        'local_date_string' => null,
        'local_date_hours' => 'double',
        'commenter_name' => null,
        'commenter_email' => null,
        'commenter_link' => null,
        'comment' => null,
        'product_id' => 'double',
        'user_id' => null,
        'avatar_src' => null,
        'parent_id' => null,
        'mentions' => null,
        'hash_tags' => null,
        'page_title' => null,
        'is_from_my_account_page' => null,
        'url' => null,
        'url_id' => null,
        'meta' => null,
        'moderation_group_ids' => null,
        'rating' => 'double',
        'from_offline_restore' => null,
        'autoplay_delay_ms' => 'double',
        'feedback_ids' => null,
        'question_values' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'date' => false,
        'local_date_string' => false,
        'local_date_hours' => false,
        'commenter_name' => false,
        'commenter_email' => true,
        'commenter_link' => true,
        'comment' => false,
        'product_id' => false,
        'user_id' => true,
        'avatar_src' => true,
        'parent_id' => true,
        'mentions' => false,
        'hash_tags' => false,
        'page_title' => false,
        'is_from_my_account_page' => false,
        'url' => false,
        'url_id' => false,
        'meta' => false,
        'moderation_group_ids' => false,
        'rating' => false,
        'from_offline_restore' => false,
        'autoplay_delay_ms' => false,
        'feedback_ids' => false,
        'question_values' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
        'local_date_string' => 'localDateString',
        'local_date_hours' => 'localDateHours',
        'commenter_name' => 'commenterName',
        'commenter_email' => 'commenterEmail',
        'commenter_link' => 'commenterLink',
        'comment' => 'comment',
        'product_id' => 'productId',
        'user_id' => 'userId',
        'avatar_src' => 'avatarSrc',
        'parent_id' => 'parentId',
        'mentions' => 'mentions',
        'hash_tags' => 'hashTags',
        'page_title' => 'pageTitle',
        'is_from_my_account_page' => 'isFromMyAccountPage',
        'url' => 'url',
        'url_id' => 'urlId',
        'meta' => 'meta',
        'moderation_group_ids' => 'moderationGroupIds',
        'rating' => 'rating',
        'from_offline_restore' => 'fromOfflineRestore',
        'autoplay_delay_ms' => 'autoplayDelayMS',
        'feedback_ids' => 'feedbackIds',
        'question_values' => 'questionValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'local_date_string' => 'setLocalDateString',
        'local_date_hours' => 'setLocalDateHours',
        'commenter_name' => 'setCommenterName',
        'commenter_email' => 'setCommenterEmail',
        'commenter_link' => 'setCommenterLink',
        'comment' => 'setComment',
        'product_id' => 'setProductId',
        'user_id' => 'setUserId',
        'avatar_src' => 'setAvatarSrc',
        'parent_id' => 'setParentId',
        'mentions' => 'setMentions',
        'hash_tags' => 'setHashTags',
        'page_title' => 'setPageTitle',
        'is_from_my_account_page' => 'setIsFromMyAccountPage',
        'url' => 'setUrl',
        'url_id' => 'setUrlId',
        'meta' => 'setMeta',
        'moderation_group_ids' => 'setModerationGroupIds',
        'rating' => 'setRating',
        'from_offline_restore' => 'setFromOfflineRestore',
        'autoplay_delay_ms' => 'setAutoplayDelayMs',
        'feedback_ids' => 'setFeedbackIds',
        'question_values' => 'setQuestionValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'local_date_string' => 'getLocalDateString',
        'local_date_hours' => 'getLocalDateHours',
        'commenter_name' => 'getCommenterName',
        'commenter_email' => 'getCommenterEmail',
        'commenter_link' => 'getCommenterLink',
        'comment' => 'getComment',
        'product_id' => 'getProductId',
        'user_id' => 'getUserId',
        'avatar_src' => 'getAvatarSrc',
        'parent_id' => 'getParentId',
        'mentions' => 'getMentions',
        'hash_tags' => 'getHashTags',
        'page_title' => 'getPageTitle',
        'is_from_my_account_page' => 'getIsFromMyAccountPage',
        'url' => 'getUrl',
        'url_id' => 'getUrlId',
        'meta' => 'getMeta',
        'moderation_group_ids' => 'getModerationGroupIds',
        'rating' => 'getRating',
        'from_offline_restore' => 'getFromOfflineRestore',
        'autoplay_delay_ms' => 'getAutoplayDelayMs',
        'feedback_ids' => 'getFeedbackIds',
        'question_values' => 'getQuestionValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('local_date_string', $data ?? [], null);
        $this->setIfExists('local_date_hours', $data ?? [], null);
        $this->setIfExists('commenter_name', $data ?? [], null);
        $this->setIfExists('commenter_email', $data ?? [], null);
        $this->setIfExists('commenter_link', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('avatar_src', $data ?? [], null);
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('mentions', $data ?? [], null);
        $this->setIfExists('hash_tags', $data ?? [], null);
        $this->setIfExists('page_title', $data ?? [], null);
        $this->setIfExists('is_from_my_account_page', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('url_id', $data ?? [], null);
        $this->setIfExists('meta', $data ?? [], null);
        $this->setIfExists('moderation_group_ids', $data ?? [], null);
        $this->setIfExists('rating', $data ?? [], null);
        $this->setIfExists('from_offline_restore', $data ?? [], null);
        $this->setIfExists('autoplay_delay_ms', $data ?? [], null);
        $this->setIfExists('feedback_ids', $data ?? [], null);
        $this->setIfExists('question_values', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['commenter_name'] === null) {
            $invalidProperties[] = "'commenter_name' can't be null";
        }
        if ($this->container['comment'] === null) {
            $invalidProperties[] = "'comment' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['url_id'] === null) {
            $invalidProperties[] = "'url_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return float
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param float $date date
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets local_date_string
     *
     * @return string|null
     */
    public function getLocalDateString()
    {
        return $this->container['local_date_string'];
    }

    /**
     * Sets local_date_string
     *
     * @param string|null $local_date_string local_date_string
     *
     * @return self
     */
    public function setLocalDateString($local_date_string)
    {
        if (is_null($local_date_string)) {
            throw new \InvalidArgumentException('non-nullable local_date_string cannot be null');
        }
        $this->container['local_date_string'] = $local_date_string;

        return $this;
    }

    /**
     * Gets local_date_hours
     *
     * @return float|null
     */
    public function getLocalDateHours()
    {
        return $this->container['local_date_hours'];
    }

    /**
     * Sets local_date_hours
     *
     * @param float|null $local_date_hours local_date_hours
     *
     * @return self
     */
    public function setLocalDateHours($local_date_hours)
    {
        if (is_null($local_date_hours)) {
            throw new \InvalidArgumentException('non-nullable local_date_hours cannot be null');
        }
        $this->container['local_date_hours'] = $local_date_hours;

        return $this;
    }

    /**
     * Gets commenter_name
     *
     * @return string
     */
    public function getCommenterName()
    {
        return $this->container['commenter_name'];
    }

    /**
     * Sets commenter_name
     *
     * @param string $commenter_name commenter_name
     *
     * @return self
     */
    public function setCommenterName($commenter_name)
    {
        if (is_null($commenter_name)) {
            throw new \InvalidArgumentException('non-nullable commenter_name cannot be null');
        }
        $this->container['commenter_name'] = $commenter_name;

        return $this;
    }

    /**
     * Gets commenter_email
     *
     * @return string|null
     */
    public function getCommenterEmail()
    {
        return $this->container['commenter_email'];
    }

    /**
     * Sets commenter_email
     *
     * @param string|null $commenter_email commenter_email
     *
     * @return self
     */
    public function setCommenterEmail($commenter_email)
    {
        if (is_null($commenter_email)) {
            array_push($this->openAPINullablesSetToNull, 'commenter_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('commenter_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['commenter_email'] = $commenter_email;

        return $this;
    }

    /**
     * Gets commenter_link
     *
     * @return string|null
     */
    public function getCommenterLink()
    {
        return $this->container['commenter_link'];
    }

    /**
     * Sets commenter_link
     *
     * @param string|null $commenter_link commenter_link
     *
     * @return self
     */
    public function setCommenterLink($commenter_link)
    {
        if (is_null($commenter_link)) {
            array_push($this->openAPINullablesSetToNull, 'commenter_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('commenter_link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['commenter_link'] = $commenter_link;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return float|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param float|null $product_id product_id
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets avatar_src
     *
     * @return string|null
     */
    public function getAvatarSrc()
    {
        return $this->container['avatar_src'];
    }

    /**
     * Sets avatar_src
     *
     * @param string|null $avatar_src avatar_src
     *
     * @return self
     */
    public function setAvatarSrc($avatar_src)
    {
        if (is_null($avatar_src)) {
            array_push($this->openAPINullablesSetToNull, 'avatar_src');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatar_src', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avatar_src'] = $avatar_src;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string|null $parent_id parent_id
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        if (is_null($parent_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets mentions
     *
     * @return \OpenAPI\Client\Model\CommentUserMentionInfo[]|null
     */
    public function getMentions()
    {
        return $this->container['mentions'];
    }

    /**
     * Sets mentions
     *
     * @param \OpenAPI\Client\Model\CommentUserMentionInfo[]|null $mentions mentions
     *
     * @return self
     */
    public function setMentions($mentions)
    {
        if (is_null($mentions)) {
            throw new \InvalidArgumentException('non-nullable mentions cannot be null');
        }
        $this->container['mentions'] = $mentions;

        return $this;
    }

    /**
     * Gets hash_tags
     *
     * @return \OpenAPI\Client\Model\CommentUserHashTagInfo[]|null
     */
    public function getHashTags()
    {
        return $this->container['hash_tags'];
    }

    /**
     * Sets hash_tags
     *
     * @param \OpenAPI\Client\Model\CommentUserHashTagInfo[]|null $hash_tags hash_tags
     *
     * @return self
     */
    public function setHashTags($hash_tags)
    {
        if (is_null($hash_tags)) {
            throw new \InvalidArgumentException('non-nullable hash_tags cannot be null');
        }
        $this->container['hash_tags'] = $hash_tags;

        return $this;
    }

    /**
     * Gets page_title
     *
     * @return string|null
     */
    public function getPageTitle()
    {
        return $this->container['page_title'];
    }

    /**
     * Sets page_title
     *
     * @param string|null $page_title page_title
     *
     * @return self
     */
    public function setPageTitle($page_title)
    {
        if (is_null($page_title)) {
            throw new \InvalidArgumentException('non-nullable page_title cannot be null');
        }
        $this->container['page_title'] = $page_title;

        return $this;
    }

    /**
     * Gets is_from_my_account_page
     *
     * @return bool|null
     */
    public function getIsFromMyAccountPage()
    {
        return $this->container['is_from_my_account_page'];
    }

    /**
     * Sets is_from_my_account_page
     *
     * @param bool|null $is_from_my_account_page is_from_my_account_page
     *
     * @return self
     */
    public function setIsFromMyAccountPage($is_from_my_account_page)
    {
        if (is_null($is_from_my_account_page)) {
            throw new \InvalidArgumentException('non-nullable is_from_my_account_page cannot be null');
        }
        $this->container['is_from_my_account_page'] = $is_from_my_account_page;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets url_id
     *
     * @return string
     */
    public function getUrlId()
    {
        return $this->container['url_id'];
    }

    /**
     * Sets url_id
     *
     * @param string $url_id url_id
     *
     * @return self
     */
    public function setUrlId($url_id)
    {
        if (is_null($url_id)) {
            throw new \InvalidArgumentException('non-nullable url_id cannot be null');
        }
        $this->container['url_id'] = $url_id;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return object|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param object|null $meta meta
     *
     * @return self
     */
    public function setMeta($meta)
    {
        if (is_null($meta)) {
            throw new \InvalidArgumentException('non-nullable meta cannot be null');
        }
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets moderation_group_ids
     *
     * @return string[]|null
     */
    public function getModerationGroupIds()
    {
        return $this->container['moderation_group_ids'];
    }

    /**
     * Sets moderation_group_ids
     *
     * @param string[]|null $moderation_group_ids moderation_group_ids
     *
     * @return self
     */
    public function setModerationGroupIds($moderation_group_ids)
    {
        if (is_null($moderation_group_ids)) {
            throw new \InvalidArgumentException('non-nullable moderation_group_ids cannot be null');
        }
        $this->container['moderation_group_ids'] = $moderation_group_ids;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return float|null
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param float|null $rating rating
     *
     * @return self
     */
    public function setRating($rating)
    {
        if (is_null($rating)) {
            throw new \InvalidArgumentException('non-nullable rating cannot be null');
        }
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets from_offline_restore
     *
     * @return bool|null
     */
    public function getFromOfflineRestore()
    {
        return $this->container['from_offline_restore'];
    }

    /**
     * Sets from_offline_restore
     *
     * @param bool|null $from_offline_restore from_offline_restore
     *
     * @return self
     */
    public function setFromOfflineRestore($from_offline_restore)
    {
        if (is_null($from_offline_restore)) {
            throw new \InvalidArgumentException('non-nullable from_offline_restore cannot be null');
        }
        $this->container['from_offline_restore'] = $from_offline_restore;

        return $this;
    }

    /**
     * Gets autoplay_delay_ms
     *
     * @return float|null
     */
    public function getAutoplayDelayMs()
    {
        return $this->container['autoplay_delay_ms'];
    }

    /**
     * Sets autoplay_delay_ms
     *
     * @param float|null $autoplay_delay_ms autoplay_delay_ms
     *
     * @return self
     */
    public function setAutoplayDelayMs($autoplay_delay_ms)
    {
        if (is_null($autoplay_delay_ms)) {
            throw new \InvalidArgumentException('non-nullable autoplay_delay_ms cannot be null');
        }
        $this->container['autoplay_delay_ms'] = $autoplay_delay_ms;

        return $this;
    }

    /**
     * Gets feedback_ids
     *
     * @return string[]|null
     */
    public function getFeedbackIds()
    {
        return $this->container['feedback_ids'];
    }

    /**
     * Sets feedback_ids
     *
     * @param string[]|null $feedback_ids feedback_ids
     *
     * @return self
     */
    public function setFeedbackIds($feedback_ids)
    {
        if (is_null($feedback_ids)) {
            throw new \InvalidArgumentException('non-nullable feedback_ids cannot be null');
        }
        $this->container['feedback_ids'] = $feedback_ids;

        return $this;
    }

    /**
     * Gets question_values
     *
     * @return array<string,\OpenAPI\Client\Model\RecordStringStringOrNumberValue>|null
     */
    public function getQuestionValues()
    {
        return $this->container['question_values'];
    }

    /**
     * Sets question_values
     *
     * @param array<string,\OpenAPI\Client\Model\RecordStringStringOrNumberValue>|null $question_values Construct a type with a set of properties K of type T
     *
     * @return self
     */
    public function setQuestionValues($question_values)
    {
        if (is_null($question_values)) {
            throw new \InvalidArgumentException('non-nullable question_values cannot be null');
        }
        $this->container['question_values'] = $question_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


