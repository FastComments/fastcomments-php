<?php
/**
 * PickAPICommentUpdatableCommentFields
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FastComments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * fastcomments
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@fastcomments.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FastComments\Client\Model;

use \ArrayAccess;
use \FastComments\Client\ObjectSerializer;

/**
 * PickAPICommentUpdatableCommentFields Class Doc Comment
 *
 * @category Class
 * @description From T, pick a set of properties whose keys are in the union K
 * @package  FastComments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PickAPICommentUpdatableCommentFields implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Pick_APIComment.UpdatableCommentFields_';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date' => '\DateTime',
        'url_id' => 'string',
        'url_id_raw' => 'string',
        'url' => 'string',
        'page_title' => 'string',
        'user_id' => 'string',
        'commenter_email' => 'string',
        'commenter_name' => 'string',
        'commenter_link' => 'string',
        'comment' => 'string',
        'comment_html' => 'string',
        'parent_id' => 'string',
        'local_date_string' => 'string',
        'local_date_hours' => 'int',
        'votes' => 'int',
        'votes_up' => 'int',
        'votes_down' => 'int',
        'expire_at' => '\DateTime',
        'verified' => 'bool',
        'verified_date' => '\DateTime',
        'notification_sent_for_parent' => 'bool',
        'notification_sent_for_parent_tenant' => 'bool',
        'reviewed' => 'bool',
        'external_id' => 'string',
        'external_parent_id' => 'string',
        'avatar_src' => 'string',
        'is_spam' => 'bool',
        'approved' => 'bool',
        'is_deleted' => 'bool',
        'is_deleted_user' => 'bool',
        'is_by_admin' => 'bool',
        'is_by_moderator' => 'bool',
        'is_pinned' => 'bool',
        'is_locked' => 'bool',
        'flag_count' => 'int',
        'display_label' => 'string',
        'meta' => '\FastComments\Client\Model\PickFCommentAPICommentFieldsKeysMeta',
        'moderation_group_ids' => 'string[]',
        'feedback_ids' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date' => 'date-time',
        'url_id' => null,
        'url_id_raw' => null,
        'url' => null,
        'page_title' => null,
        'user_id' => null,
        'commenter_email' => null,
        'commenter_name' => null,
        'commenter_link' => null,
        'comment' => null,
        'comment_html' => null,
        'parent_id' => null,
        'local_date_string' => null,
        'local_date_hours' => 'int32',
        'votes' => 'int32',
        'votes_up' => 'int32',
        'votes_down' => 'int32',
        'expire_at' => 'date-time',
        'verified' => null,
        'verified_date' => 'date-time',
        'notification_sent_for_parent' => null,
        'notification_sent_for_parent_tenant' => null,
        'reviewed' => null,
        'external_id' => null,
        'external_parent_id' => null,
        'avatar_src' => null,
        'is_spam' => null,
        'approved' => null,
        'is_deleted' => null,
        'is_deleted_user' => null,
        'is_by_admin' => null,
        'is_by_moderator' => null,
        'is_pinned' => null,
        'is_locked' => null,
        'flag_count' => 'int32',
        'display_label' => null,
        'meta' => null,
        'moderation_group_ids' => null,
        'feedback_ids' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'date' => false,
        'url_id' => false,
        'url_id_raw' => false,
        'url' => false,
        'page_title' => false,
        'user_id' => false,
        'commenter_email' => false,
        'commenter_name' => false,
        'commenter_link' => false,
        'comment' => false,
        'comment_html' => false,
        'parent_id' => false,
        'local_date_string' => false,
        'local_date_hours' => false,
        'votes' => false,
        'votes_up' => false,
        'votes_down' => false,
        'expire_at' => false,
        'verified' => false,
        'verified_date' => false,
        'notification_sent_for_parent' => false,
        'notification_sent_for_parent_tenant' => false,
        'reviewed' => false,
        'external_id' => false,
        'external_parent_id' => false,
        'avatar_src' => false,
        'is_spam' => false,
        'approved' => false,
        'is_deleted' => false,
        'is_deleted_user' => false,
        'is_by_admin' => false,
        'is_by_moderator' => false,
        'is_pinned' => false,
        'is_locked' => false,
        'flag_count' => false,
        'display_label' => false,
        'meta' => false,
        'moderation_group_ids' => false,
        'feedback_ids' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
        'url_id' => 'urlId',
        'url_id_raw' => 'urlIdRaw',
        'url' => 'url',
        'page_title' => 'pageTitle',
        'user_id' => 'userId',
        'commenter_email' => 'commenterEmail',
        'commenter_name' => 'commenterName',
        'commenter_link' => 'commenterLink',
        'comment' => 'comment',
        'comment_html' => 'commentHTML',
        'parent_id' => 'parentId',
        'local_date_string' => 'localDateString',
        'local_date_hours' => 'localDateHours',
        'votes' => 'votes',
        'votes_up' => 'votesUp',
        'votes_down' => 'votesDown',
        'expire_at' => 'expireAt',
        'verified' => 'verified',
        'verified_date' => 'verifiedDate',
        'notification_sent_for_parent' => 'notificationSentForParent',
        'notification_sent_for_parent_tenant' => 'notificationSentForParentTenant',
        'reviewed' => 'reviewed',
        'external_id' => 'externalId',
        'external_parent_id' => 'externalParentId',
        'avatar_src' => 'avatarSrc',
        'is_spam' => 'isSpam',
        'approved' => 'approved',
        'is_deleted' => 'isDeleted',
        'is_deleted_user' => 'isDeletedUser',
        'is_by_admin' => 'isByAdmin',
        'is_by_moderator' => 'isByModerator',
        'is_pinned' => 'isPinned',
        'is_locked' => 'isLocked',
        'flag_count' => 'flagCount',
        'display_label' => 'displayLabel',
        'meta' => 'meta',
        'moderation_group_ids' => 'moderationGroupIds',
        'feedback_ids' => 'feedbackIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'url_id' => 'setUrlId',
        'url_id_raw' => 'setUrlIdRaw',
        'url' => 'setUrl',
        'page_title' => 'setPageTitle',
        'user_id' => 'setUserId',
        'commenter_email' => 'setCommenterEmail',
        'commenter_name' => 'setCommenterName',
        'commenter_link' => 'setCommenterLink',
        'comment' => 'setComment',
        'comment_html' => 'setCommentHtml',
        'parent_id' => 'setParentId',
        'local_date_string' => 'setLocalDateString',
        'local_date_hours' => 'setLocalDateHours',
        'votes' => 'setVotes',
        'votes_up' => 'setVotesUp',
        'votes_down' => 'setVotesDown',
        'expire_at' => 'setExpireAt',
        'verified' => 'setVerified',
        'verified_date' => 'setVerifiedDate',
        'notification_sent_for_parent' => 'setNotificationSentForParent',
        'notification_sent_for_parent_tenant' => 'setNotificationSentForParentTenant',
        'reviewed' => 'setReviewed',
        'external_id' => 'setExternalId',
        'external_parent_id' => 'setExternalParentId',
        'avatar_src' => 'setAvatarSrc',
        'is_spam' => 'setIsSpam',
        'approved' => 'setApproved',
        'is_deleted' => 'setIsDeleted',
        'is_deleted_user' => 'setIsDeletedUser',
        'is_by_admin' => 'setIsByAdmin',
        'is_by_moderator' => 'setIsByModerator',
        'is_pinned' => 'setIsPinned',
        'is_locked' => 'setIsLocked',
        'flag_count' => 'setFlagCount',
        'display_label' => 'setDisplayLabel',
        'meta' => 'setMeta',
        'moderation_group_ids' => 'setModerationGroupIds',
        'feedback_ids' => 'setFeedbackIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'url_id' => 'getUrlId',
        'url_id_raw' => 'getUrlIdRaw',
        'url' => 'getUrl',
        'page_title' => 'getPageTitle',
        'user_id' => 'getUserId',
        'commenter_email' => 'getCommenterEmail',
        'commenter_name' => 'getCommenterName',
        'commenter_link' => 'getCommenterLink',
        'comment' => 'getComment',
        'comment_html' => 'getCommentHtml',
        'parent_id' => 'getParentId',
        'local_date_string' => 'getLocalDateString',
        'local_date_hours' => 'getLocalDateHours',
        'votes' => 'getVotes',
        'votes_up' => 'getVotesUp',
        'votes_down' => 'getVotesDown',
        'expire_at' => 'getExpireAt',
        'verified' => 'getVerified',
        'verified_date' => 'getVerifiedDate',
        'notification_sent_for_parent' => 'getNotificationSentForParent',
        'notification_sent_for_parent_tenant' => 'getNotificationSentForParentTenant',
        'reviewed' => 'getReviewed',
        'external_id' => 'getExternalId',
        'external_parent_id' => 'getExternalParentId',
        'avatar_src' => 'getAvatarSrc',
        'is_spam' => 'getIsSpam',
        'approved' => 'getApproved',
        'is_deleted' => 'getIsDeleted',
        'is_deleted_user' => 'getIsDeletedUser',
        'is_by_admin' => 'getIsByAdmin',
        'is_by_moderator' => 'getIsByModerator',
        'is_pinned' => 'getIsPinned',
        'is_locked' => 'getIsLocked',
        'flag_count' => 'getFlagCount',
        'display_label' => 'getDisplayLabel',
        'meta' => 'getMeta',
        'moderation_group_ids' => 'getModerationGroupIds',
        'feedback_ids' => 'getFeedbackIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('url_id', $data ?? [], null);
        $this->setIfExists('url_id_raw', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('page_title', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('commenter_email', $data ?? [], null);
        $this->setIfExists('commenter_name', $data ?? [], null);
        $this->setIfExists('commenter_link', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('comment_html', $data ?? [], null);
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('local_date_string', $data ?? [], null);
        $this->setIfExists('local_date_hours', $data ?? [], null);
        $this->setIfExists('votes', $data ?? [], null);
        $this->setIfExists('votes_up', $data ?? [], null);
        $this->setIfExists('votes_down', $data ?? [], null);
        $this->setIfExists('expire_at', $data ?? [], null);
        $this->setIfExists('verified', $data ?? [], null);
        $this->setIfExists('verified_date', $data ?? [], null);
        $this->setIfExists('notification_sent_for_parent', $data ?? [], null);
        $this->setIfExists('notification_sent_for_parent_tenant', $data ?? [], null);
        $this->setIfExists('reviewed', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('external_parent_id', $data ?? [], null);
        $this->setIfExists('avatar_src', $data ?? [], null);
        $this->setIfExists('is_spam', $data ?? [], null);
        $this->setIfExists('approved', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('is_deleted_user', $data ?? [], null);
        $this->setIfExists('is_by_admin', $data ?? [], null);
        $this->setIfExists('is_by_moderator', $data ?? [], null);
        $this->setIfExists('is_pinned', $data ?? [], null);
        $this->setIfExists('is_locked', $data ?? [], null);
        $this->setIfExists('flag_count', $data ?? [], null);
        $this->setIfExists('display_label', $data ?? [], null);
        $this->setIfExists('meta', $data ?? [], null);
        $this->setIfExists('moderation_group_ids', $data ?? [], null);
        $this->setIfExists('feedback_ids', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['url_id'] === null) {
            $invalidProperties[] = "'url_id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['commenter_name'] === null) {
            $invalidProperties[] = "'commenter_name' can't be null";
        }
        if ($this->container['comment'] === null) {
            $invalidProperties[] = "'comment' can't be null";
        }
        if ($this->container['comment_html'] === null) {
            $invalidProperties[] = "'comment_html' can't be null";
        }
        if ($this->container['verified'] === null) {
            $invalidProperties[] = "'verified' can't be null";
        }
        if ($this->container['approved'] === null) {
            $invalidProperties[] = "'approved' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets url_id
     *
     * @return string
     */
    public function getUrlId()
    {
        return $this->container['url_id'];
    }

    /**
     * Sets url_id
     *
     * @param string $url_id url_id
     *
     * @return self
     */
    public function setUrlId($url_id)
    {
        if (is_null($url_id)) {
            throw new \InvalidArgumentException('non-nullable url_id cannot be null');
        }
        $this->container['url_id'] = $url_id;

        return $this;
    }

    /**
     * Gets url_id_raw
     *
     * @return string|null
     */
    public function getUrlIdRaw()
    {
        return $this->container['url_id_raw'];
    }

    /**
     * Sets url_id_raw
     *
     * @param string|null $url_id_raw url_id_raw
     *
     * @return self
     */
    public function setUrlIdRaw($url_id_raw)
    {
        if (is_null($url_id_raw)) {
            throw new \InvalidArgumentException('non-nullable url_id_raw cannot be null');
        }
        $this->container['url_id_raw'] = $url_id_raw;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets page_title
     *
     * @return string|null
     */
    public function getPageTitle()
    {
        return $this->container['page_title'];
    }

    /**
     * Sets page_title
     *
     * @param string|null $page_title page_title
     *
     * @return self
     */
    public function setPageTitle($page_title)
    {
        if (is_null($page_title)) {
            throw new \InvalidArgumentException('non-nullable page_title cannot be null');
        }
        $this->container['page_title'] = $page_title;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets commenter_email
     *
     * @return string|null
     */
    public function getCommenterEmail()
    {
        return $this->container['commenter_email'];
    }

    /**
     * Sets commenter_email
     *
     * @param string|null $commenter_email commenter_email
     *
     * @return self
     */
    public function setCommenterEmail($commenter_email)
    {
        if (is_null($commenter_email)) {
            throw new \InvalidArgumentException('non-nullable commenter_email cannot be null');
        }
        $this->container['commenter_email'] = $commenter_email;

        return $this;
    }

    /**
     * Gets commenter_name
     *
     * @return string
     */
    public function getCommenterName()
    {
        return $this->container['commenter_name'];
    }

    /**
     * Sets commenter_name
     *
     * @param string $commenter_name commenter_name
     *
     * @return self
     */
    public function setCommenterName($commenter_name)
    {
        if (is_null($commenter_name)) {
            throw new \InvalidArgumentException('non-nullable commenter_name cannot be null');
        }
        $this->container['commenter_name'] = $commenter_name;

        return $this;
    }

    /**
     * Gets commenter_link
     *
     * @return string|null
     */
    public function getCommenterLink()
    {
        return $this->container['commenter_link'];
    }

    /**
     * Sets commenter_link
     *
     * @param string|null $commenter_link commenter_link
     *
     * @return self
     */
    public function setCommenterLink($commenter_link)
    {
        if (is_null($commenter_link)) {
            throw new \InvalidArgumentException('non-nullable commenter_link cannot be null');
        }
        $this->container['commenter_link'] = $commenter_link;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets comment_html
     *
     * @return string
     */
    public function getCommentHtml()
    {
        return $this->container['comment_html'];
    }

    /**
     * Sets comment_html
     *
     * @param string $comment_html comment_html
     *
     * @return self
     */
    public function setCommentHtml($comment_html)
    {
        if (is_null($comment_html)) {
            throw new \InvalidArgumentException('non-nullable comment_html cannot be null');
        }
        $this->container['comment_html'] = $comment_html;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string|null $parent_id parent_id
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        if (is_null($parent_id)) {
            throw new \InvalidArgumentException('non-nullable parent_id cannot be null');
        }
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets local_date_string
     *
     * @return string|null
     */
    public function getLocalDateString()
    {
        return $this->container['local_date_string'];
    }

    /**
     * Sets local_date_string
     *
     * @param string|null $local_date_string local_date_string
     *
     * @return self
     */
    public function setLocalDateString($local_date_string)
    {
        if (is_null($local_date_string)) {
            throw new \InvalidArgumentException('non-nullable local_date_string cannot be null');
        }
        $this->container['local_date_string'] = $local_date_string;

        return $this;
    }

    /**
     * Gets local_date_hours
     *
     * @return int|null
     */
    public function getLocalDateHours()
    {
        return $this->container['local_date_hours'];
    }

    /**
     * Sets local_date_hours
     *
     * @param int|null $local_date_hours local_date_hours
     *
     * @return self
     */
    public function setLocalDateHours($local_date_hours)
    {
        if (is_null($local_date_hours)) {
            throw new \InvalidArgumentException('non-nullable local_date_hours cannot be null');
        }
        $this->container['local_date_hours'] = $local_date_hours;

        return $this;
    }

    /**
     * Gets votes
     *
     * @return int|null
     */
    public function getVotes()
    {
        return $this->container['votes'];
    }

    /**
     * Sets votes
     *
     * @param int|null $votes votes
     *
     * @return self
     */
    public function setVotes($votes)
    {
        if (is_null($votes)) {
            throw new \InvalidArgumentException('non-nullable votes cannot be null');
        }
        $this->container['votes'] = $votes;

        return $this;
    }

    /**
     * Gets votes_up
     *
     * @return int|null
     */
    public function getVotesUp()
    {
        return $this->container['votes_up'];
    }

    /**
     * Sets votes_up
     *
     * @param int|null $votes_up votes_up
     *
     * @return self
     */
    public function setVotesUp($votes_up)
    {
        if (is_null($votes_up)) {
            throw new \InvalidArgumentException('non-nullable votes_up cannot be null');
        }
        $this->container['votes_up'] = $votes_up;

        return $this;
    }

    /**
     * Gets votes_down
     *
     * @return int|null
     */
    public function getVotesDown()
    {
        return $this->container['votes_down'];
    }

    /**
     * Sets votes_down
     *
     * @param int|null $votes_down votes_down
     *
     * @return self
     */
    public function setVotesDown($votes_down)
    {
        if (is_null($votes_down)) {
            throw new \InvalidArgumentException('non-nullable votes_down cannot be null');
        }
        $this->container['votes_down'] = $votes_down;

        return $this;
    }

    /**
     * Gets expire_at
     *
     * @return \DateTime|null
     */
    public function getExpireAt()
    {
        return $this->container['expire_at'];
    }

    /**
     * Sets expire_at
     *
     * @param \DateTime|null $expire_at expire_at
     *
     * @return self
     */
    public function setExpireAt($expire_at)
    {
        if (is_null($expire_at)) {
            throw new \InvalidArgumentException('non-nullable expire_at cannot be null');
        }
        $this->container['expire_at'] = $expire_at;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool $verified verified
     *
     * @return self
     */
    public function setVerified($verified)
    {
        if (is_null($verified)) {
            throw new \InvalidArgumentException('non-nullable verified cannot be null');
        }
        $this->container['verified'] = $verified;

        return $this;
    }

    /**
     * Gets verified_date
     *
     * @return \DateTime|null
     */
    public function getVerifiedDate()
    {
        return $this->container['verified_date'];
    }

    /**
     * Sets verified_date
     *
     * @param \DateTime|null $verified_date verified_date
     *
     * @return self
     */
    public function setVerifiedDate($verified_date)
    {
        if (is_null($verified_date)) {
            throw new \InvalidArgumentException('non-nullable verified_date cannot be null');
        }
        $this->container['verified_date'] = $verified_date;

        return $this;
    }

    /**
     * Gets notification_sent_for_parent
     *
     * @return bool|null
     */
    public function getNotificationSentForParent()
    {
        return $this->container['notification_sent_for_parent'];
    }

    /**
     * Sets notification_sent_for_parent
     *
     * @param bool|null $notification_sent_for_parent notification_sent_for_parent
     *
     * @return self
     */
    public function setNotificationSentForParent($notification_sent_for_parent)
    {
        if (is_null($notification_sent_for_parent)) {
            throw new \InvalidArgumentException('non-nullable notification_sent_for_parent cannot be null');
        }
        $this->container['notification_sent_for_parent'] = $notification_sent_for_parent;

        return $this;
    }

    /**
     * Gets notification_sent_for_parent_tenant
     *
     * @return bool|null
     */
    public function getNotificationSentForParentTenant()
    {
        return $this->container['notification_sent_for_parent_tenant'];
    }

    /**
     * Sets notification_sent_for_parent_tenant
     *
     * @param bool|null $notification_sent_for_parent_tenant notification_sent_for_parent_tenant
     *
     * @return self
     */
    public function setNotificationSentForParentTenant($notification_sent_for_parent_tenant)
    {
        if (is_null($notification_sent_for_parent_tenant)) {
            throw new \InvalidArgumentException('non-nullable notification_sent_for_parent_tenant cannot be null');
        }
        $this->container['notification_sent_for_parent_tenant'] = $notification_sent_for_parent_tenant;

        return $this;
    }

    /**
     * Gets reviewed
     *
     * @return bool|null
     */
    public function getReviewed()
    {
        return $this->container['reviewed'];
    }

    /**
     * Sets reviewed
     *
     * @param bool|null $reviewed reviewed
     *
     * @return self
     */
    public function setReviewed($reviewed)
    {
        if (is_null($reviewed)) {
            throw new \InvalidArgumentException('non-nullable reviewed cannot be null');
        }
        $this->container['reviewed'] = $reviewed;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets external_parent_id
     *
     * @return string|null
     */
    public function getExternalParentId()
    {
        return $this->container['external_parent_id'];
    }

    /**
     * Sets external_parent_id
     *
     * @param string|null $external_parent_id external_parent_id
     *
     * @return self
     */
    public function setExternalParentId($external_parent_id)
    {
        if (is_null($external_parent_id)) {
            throw new \InvalidArgumentException('non-nullable external_parent_id cannot be null');
        }
        $this->container['external_parent_id'] = $external_parent_id;

        return $this;
    }

    /**
     * Gets avatar_src
     *
     * @return string|null
     */
    public function getAvatarSrc()
    {
        return $this->container['avatar_src'];
    }

    /**
     * Sets avatar_src
     *
     * @param string|null $avatar_src avatar_src
     *
     * @return self
     */
    public function setAvatarSrc($avatar_src)
    {
        if (is_null($avatar_src)) {
            throw new \InvalidArgumentException('non-nullable avatar_src cannot be null');
        }
        $this->container['avatar_src'] = $avatar_src;

        return $this;
    }

    /**
     * Gets is_spam
     *
     * @return bool|null
     */
    public function getIsSpam()
    {
        return $this->container['is_spam'];
    }

    /**
     * Sets is_spam
     *
     * @param bool|null $is_spam is_spam
     *
     * @return self
     */
    public function setIsSpam($is_spam)
    {
        if (is_null($is_spam)) {
            throw new \InvalidArgumentException('non-nullable is_spam cannot be null');
        }
        $this->container['is_spam'] = $is_spam;

        return $this;
    }

    /**
     * Gets approved
     *
     * @return bool
     */
    public function getApproved()
    {
        return $this->container['approved'];
    }

    /**
     * Sets approved
     *
     * @param bool $approved approved
     *
     * @return self
     */
    public function setApproved($approved)
    {
        if (is_null($approved)) {
            throw new \InvalidArgumentException('non-nullable approved cannot be null');
        }
        $this->container['approved'] = $approved;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets is_deleted_user
     *
     * @return bool|null
     */
    public function getIsDeletedUser()
    {
        return $this->container['is_deleted_user'];
    }

    /**
     * Sets is_deleted_user
     *
     * @param bool|null $is_deleted_user is_deleted_user
     *
     * @return self
     */
    public function setIsDeletedUser($is_deleted_user)
    {
        if (is_null($is_deleted_user)) {
            throw new \InvalidArgumentException('non-nullable is_deleted_user cannot be null');
        }
        $this->container['is_deleted_user'] = $is_deleted_user;

        return $this;
    }

    /**
     * Gets is_by_admin
     *
     * @return bool|null
     */
    public function getIsByAdmin()
    {
        return $this->container['is_by_admin'];
    }

    /**
     * Sets is_by_admin
     *
     * @param bool|null $is_by_admin is_by_admin
     *
     * @return self
     */
    public function setIsByAdmin($is_by_admin)
    {
        if (is_null($is_by_admin)) {
            throw new \InvalidArgumentException('non-nullable is_by_admin cannot be null');
        }
        $this->container['is_by_admin'] = $is_by_admin;

        return $this;
    }

    /**
     * Gets is_by_moderator
     *
     * @return bool|null
     */
    public function getIsByModerator()
    {
        return $this->container['is_by_moderator'];
    }

    /**
     * Sets is_by_moderator
     *
     * @param bool|null $is_by_moderator is_by_moderator
     *
     * @return self
     */
    public function setIsByModerator($is_by_moderator)
    {
        if (is_null($is_by_moderator)) {
            throw new \InvalidArgumentException('non-nullable is_by_moderator cannot be null');
        }
        $this->container['is_by_moderator'] = $is_by_moderator;

        return $this;
    }

    /**
     * Gets is_pinned
     *
     * @return bool|null
     */
    public function getIsPinned()
    {
        return $this->container['is_pinned'];
    }

    /**
     * Sets is_pinned
     *
     * @param bool|null $is_pinned is_pinned
     *
     * @return self
     */
    public function setIsPinned($is_pinned)
    {
        if (is_null($is_pinned)) {
            throw new \InvalidArgumentException('non-nullable is_pinned cannot be null');
        }
        $this->container['is_pinned'] = $is_pinned;

        return $this;
    }

    /**
     * Gets is_locked
     *
     * @return bool|null
     */
    public function getIsLocked()
    {
        return $this->container['is_locked'];
    }

    /**
     * Sets is_locked
     *
     * @param bool|null $is_locked is_locked
     *
     * @return self
     */
    public function setIsLocked($is_locked)
    {
        if (is_null($is_locked)) {
            throw new \InvalidArgumentException('non-nullable is_locked cannot be null');
        }
        $this->container['is_locked'] = $is_locked;

        return $this;
    }

    /**
     * Gets flag_count
     *
     * @return int|null
     */
    public function getFlagCount()
    {
        return $this->container['flag_count'];
    }

    /**
     * Sets flag_count
     *
     * @param int|null $flag_count flag_count
     *
     * @return self
     */
    public function setFlagCount($flag_count)
    {
        if (is_null($flag_count)) {
            throw new \InvalidArgumentException('non-nullable flag_count cannot be null');
        }
        $this->container['flag_count'] = $flag_count;

        return $this;
    }

    /**
     * Gets display_label
     *
     * @return string|null
     */
    public function getDisplayLabel()
    {
        return $this->container['display_label'];
    }

    /**
     * Sets display_label
     *
     * @param string|null $display_label display_label
     *
     * @return self
     */
    public function setDisplayLabel($display_label)
    {
        if (is_null($display_label)) {
            throw new \InvalidArgumentException('non-nullable display_label cannot be null');
        }
        $this->container['display_label'] = $display_label;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return \FastComments\Client\Model\PickFCommentAPICommentFieldsKeysMeta|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \FastComments\Client\Model\PickFCommentAPICommentFieldsKeysMeta|null $meta meta
     *
     * @return self
     */
    public function setMeta($meta)
    {
        if (is_null($meta)) {
            throw new \InvalidArgumentException('non-nullable meta cannot be null');
        }
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets moderation_group_ids
     *
     * @return string[]|null
     */
    public function getModerationGroupIds()
    {
        return $this->container['moderation_group_ids'];
    }

    /**
     * Sets moderation_group_ids
     *
     * @param string[]|null $moderation_group_ids moderation_group_ids
     *
     * @return self
     */
    public function setModerationGroupIds($moderation_group_ids)
    {
        if (is_null($moderation_group_ids)) {
            throw new \InvalidArgumentException('non-nullable moderation_group_ids cannot be null');
        }
        $this->container['moderation_group_ids'] = $moderation_group_ids;

        return $this;
    }

    /**
     * Gets feedback_ids
     *
     * @return string[]|null
     */
    public function getFeedbackIds()
    {
        return $this->container['feedback_ids'];
    }

    /**
     * Sets feedback_ids
     *
     * @param string[]|null $feedback_ids feedback_ids
     *
     * @return self
     */
    public function setFeedbackIds($feedback_ids)
    {
        if (is_null($feedback_ids)) {
            throw new \InvalidArgumentException('non-nullable feedback_ids cannot be null');
        }
        $this->container['feedback_ids'] = $feedback_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


