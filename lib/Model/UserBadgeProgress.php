<?php
/**
 * UserBadgeProgress
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FastComments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * fastcomments
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@fastcomments.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FastComments\Client\Model;

use \ArrayAccess;
use \FastComments\Client\ObjectSerializer;

/**
 * UserBadgeProgress Class Doc Comment
 *
 * @category Class
 * @package  FastComments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserBadgeProgress implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserBadgeProgress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_id' => 'string',
        'tenant_id' => 'string',
        'user_id' => 'string',
        'first_comment_id' => 'string',
        'first_comment_date' => '\DateTime',
        'auto_trust_factor' => 'float',
        'manual_trust_factor' => 'float',
        'progress' => 'array<string,float>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_id' => null,
        'tenant_id' => null,
        'user_id' => null,
        'first_comment_id' => null,
        'first_comment_date' => 'date-time',
        'auto_trust_factor' => 'double',
        'manual_trust_factor' => 'double',
        'progress' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_id' => false,
        'tenant_id' => false,
        'user_id' => false,
        'first_comment_id' => false,
        'first_comment_date' => false,
        'auto_trust_factor' => false,
        'manual_trust_factor' => false,
        'progress' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'tenant_id' => 'tenantId',
        'user_id' => 'userId',
        'first_comment_id' => 'firstCommentId',
        'first_comment_date' => 'firstCommentDate',
        'auto_trust_factor' => 'autoTrustFactor',
        'manual_trust_factor' => 'manualTrustFactor',
        'progress' => 'progress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'tenant_id' => 'setTenantId',
        'user_id' => 'setUserId',
        'first_comment_id' => 'setFirstCommentId',
        'first_comment_date' => 'setFirstCommentDate',
        'auto_trust_factor' => 'setAutoTrustFactor',
        'manual_trust_factor' => 'setManualTrustFactor',
        'progress' => 'setProgress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'tenant_id' => 'getTenantId',
        'user_id' => 'getUserId',
        'first_comment_id' => 'getFirstCommentId',
        'first_comment_date' => 'getFirstCommentDate',
        'auto_trust_factor' => 'getAutoTrustFactor',
        'manual_trust_factor' => 'getManualTrustFactor',
        'progress' => 'getProgress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('_id', $data ?? [], null);
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('first_comment_id', $data ?? [], null);
        $this->setIfExists('first_comment_date', $data ?? [], null);
        $this->setIfExists('auto_trust_factor', $data ?? [], null);
        $this->setIfExists('manual_trust_factor', $data ?? [], null);
        $this->setIfExists('progress', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['_id'] === null) {
            $invalidProperties[] = "'_id' can't be null";
        }
        if ($this->container['tenant_id'] === null) {
            $invalidProperties[] = "'tenant_id' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['first_comment_id'] === null) {
            $invalidProperties[] = "'first_comment_id' can't be null";
        }
        if ($this->container['first_comment_date'] === null) {
            $invalidProperties[] = "'first_comment_date' can't be null";
        }
        if ($this->container['progress'] === null) {
            $invalidProperties[] = "'progress' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string $_id _id
     *
     * @return self
     */
    public function setId($_id)
    {
        if (is_null($_id)) {
            throw new \InvalidArgumentException('non-nullable _id cannot be null');
        }
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            throw new \InvalidArgumentException('non-nullable tenant_id cannot be null');
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets first_comment_id
     *
     * @return string
     */
    public function getFirstCommentId()
    {
        return $this->container['first_comment_id'];
    }

    /**
     * Sets first_comment_id
     *
     * @param string $first_comment_id first_comment_id
     *
     * @return self
     */
    public function setFirstCommentId($first_comment_id)
    {
        if (is_null($first_comment_id)) {
            throw new \InvalidArgumentException('non-nullable first_comment_id cannot be null');
        }
        $this->container['first_comment_id'] = $first_comment_id;

        return $this;
    }

    /**
     * Gets first_comment_date
     *
     * @return \DateTime
     */
    public function getFirstCommentDate()
    {
        return $this->container['first_comment_date'];
    }

    /**
     * Sets first_comment_date
     *
     * @param \DateTime $first_comment_date first_comment_date
     *
     * @return self
     */
    public function setFirstCommentDate($first_comment_date)
    {
        if (is_null($first_comment_date)) {
            throw new \InvalidArgumentException('non-nullable first_comment_date cannot be null');
        }
        $this->container['first_comment_date'] = $first_comment_date;

        return $this;
    }

    /**
     * Gets auto_trust_factor
     *
     * @return float|null
     */
    public function getAutoTrustFactor()
    {
        return $this->container['auto_trust_factor'];
    }

    /**
     * Sets auto_trust_factor
     *
     * @param float|null $auto_trust_factor auto_trust_factor
     *
     * @return self
     */
    public function setAutoTrustFactor($auto_trust_factor)
    {
        if (is_null($auto_trust_factor)) {
            throw new \InvalidArgumentException('non-nullable auto_trust_factor cannot be null');
        }
        $this->container['auto_trust_factor'] = $auto_trust_factor;

        return $this;
    }

    /**
     * Gets manual_trust_factor
     *
     * @return float|null
     */
    public function getManualTrustFactor()
    {
        return $this->container['manual_trust_factor'];
    }

    /**
     * Sets manual_trust_factor
     *
     * @param float|null $manual_trust_factor manual_trust_factor
     *
     * @return self
     */
    public function setManualTrustFactor($manual_trust_factor)
    {
        if (is_null($manual_trust_factor)) {
            throw new \InvalidArgumentException('non-nullable manual_trust_factor cannot be null');
        }
        $this->container['manual_trust_factor'] = $manual_trust_factor;

        return $this;
    }

    /**
     * Gets progress
     *
     * @return array<string,float>
     */
    public function getProgress()
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     *
     * @param array<string,float> $progress Construct a type with a set of properties K of type T
     *
     * @return self
     */
    public function setProgress($progress)
    {
        if (is_null($progress)) {
            throw new \InvalidArgumentException('non-nullable progress cannot be null');
        }
        $this->container['progress'] = $progress;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


