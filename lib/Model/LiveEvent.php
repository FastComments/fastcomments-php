<?php
/**
 * LiveEvent
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FastComments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * fastcomments
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@fastcomments.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FastComments\Client\Model;

use \ArrayAccess;
use \FastComments\Client\ObjectSerializer;

/**
 * LiveEvent Class Doc Comment
 *
 * @category Class
 * @package  FastComments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LiveEvent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LiveEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => '\FastComments\Client\Model\LiveEventType',
        'timestamp' => 'int',
        'ts' => 'int',
        'broadcast_id' => 'string',
        'user_id' => 'string',
        'badges' => '\FastComments\Client\Model\CommentUserBadgeInfo[]',
        'notification' => '\FastComments\Client\Model\UserNotification',
        'vote' => '\FastComments\Client\Model\PubSubVote',
        'comment' => '\FastComments\Client\Model\PubSubComment',
        'extra_info' => '\FastComments\Client\Model\LiveEventExtraInfo',
        'config' => 'object',
        'is_closed' => 'bool',
        'uj' => 'string[]',
        'ul' => 'string[]',
        'changes' => 'array<string,float>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'timestamp' => 'int64',
        'ts' => 'int64',
        'broadcast_id' => null,
        'user_id' => null,
        'badges' => null,
        'notification' => null,
        'vote' => null,
        'comment' => null,
        'extra_info' => null,
        'config' => null,
        'is_closed' => null,
        'uj' => null,
        'ul' => null,
        'changes' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'timestamp' => false,
        'ts' => false,
        'broadcast_id' => false,
        'user_id' => false,
        'badges' => false,
        'notification' => false,
        'vote' => false,
        'comment' => false,
        'extra_info' => false,
        'config' => false,
        'is_closed' => false,
        'uj' => false,
        'ul' => false,
        'changes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'timestamp' => 'timestamp',
        'ts' => 'ts',
        'broadcast_id' => 'broadcastId',
        'user_id' => 'userId',
        'badges' => 'badges',
        'notification' => 'notification',
        'vote' => 'vote',
        'comment' => 'comment',
        'extra_info' => 'extraInfo',
        'config' => 'config',
        'is_closed' => 'isClosed',
        'uj' => 'uj',
        'ul' => 'ul',
        'changes' => 'changes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'timestamp' => 'setTimestamp',
        'ts' => 'setTs',
        'broadcast_id' => 'setBroadcastId',
        'user_id' => 'setUserId',
        'badges' => 'setBadges',
        'notification' => 'setNotification',
        'vote' => 'setVote',
        'comment' => 'setComment',
        'extra_info' => 'setExtraInfo',
        'config' => 'setConfig',
        'is_closed' => 'setIsClosed',
        'uj' => 'setUj',
        'ul' => 'setUl',
        'changes' => 'setChanges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'timestamp' => 'getTimestamp',
        'ts' => 'getTs',
        'broadcast_id' => 'getBroadcastId',
        'user_id' => 'getUserId',
        'badges' => 'getBadges',
        'notification' => 'getNotification',
        'vote' => 'getVote',
        'comment' => 'getComment',
        'extra_info' => 'getExtraInfo',
        'config' => 'getConfig',
        'is_closed' => 'getIsClosed',
        'uj' => 'getUj',
        'ul' => 'getUl',
        'changes' => 'getChanges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('ts', $data ?? [], null);
        $this->setIfExists('broadcast_id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('badges', $data ?? [], null);
        $this->setIfExists('notification', $data ?? [], null);
        $this->setIfExists('vote', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('extra_info', $data ?? [], null);
        $this->setIfExists('config', $data ?? [], null);
        $this->setIfExists('is_closed', $data ?? [], null);
        $this->setIfExists('uj', $data ?? [], null);
        $this->setIfExists('ul', $data ?? [], null);
        $this->setIfExists('changes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return \FastComments\Client\Model\LiveEventType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \FastComments\Client\Model\LiveEventType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets ts
     *
     * @return int|null
     */
    public function getTs()
    {
        return $this->container['ts'];
    }

    /**
     * Sets ts
     *
     * @param int|null $ts ts
     *
     * @return self
     */
    public function setTs($ts)
    {
        if (is_null($ts)) {
            throw new \InvalidArgumentException('non-nullable ts cannot be null');
        }
        $this->container['ts'] = $ts;

        return $this;
    }

    /**
     * Gets broadcast_id
     *
     * @return string|null
     */
    public function getBroadcastId()
    {
        return $this->container['broadcast_id'];
    }

    /**
     * Sets broadcast_id
     *
     * @param string|null $broadcast_id broadcast_id
     *
     * @return self
     */
    public function setBroadcastId($broadcast_id)
    {
        if (is_null($broadcast_id)) {
            throw new \InvalidArgumentException('non-nullable broadcast_id cannot be null');
        }
        $this->container['broadcast_id'] = $broadcast_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets badges
     *
     * @return \FastComments\Client\Model\CommentUserBadgeInfo[]|null
     */
    public function getBadges()
    {
        return $this->container['badges'];
    }

    /**
     * Sets badges
     *
     * @param \FastComments\Client\Model\CommentUserBadgeInfo[]|null $badges badges
     *
     * @return self
     */
    public function setBadges($badges)
    {
        if (is_null($badges)) {
            throw new \InvalidArgumentException('non-nullable badges cannot be null');
        }
        $this->container['badges'] = $badges;

        return $this;
    }

    /**
     * Gets notification
     *
     * @return \FastComments\Client\Model\UserNotification|null
     */
    public function getNotification()
    {
        return $this->container['notification'];
    }

    /**
     * Sets notification
     *
     * @param \FastComments\Client\Model\UserNotification|null $notification notification
     *
     * @return self
     */
    public function setNotification($notification)
    {
        if (is_null($notification)) {
            throw new \InvalidArgumentException('non-nullable notification cannot be null');
        }
        $this->container['notification'] = $notification;

        return $this;
    }

    /**
     * Gets vote
     *
     * @return \FastComments\Client\Model\PubSubVote|null
     */
    public function getVote()
    {
        return $this->container['vote'];
    }

    /**
     * Sets vote
     *
     * @param \FastComments\Client\Model\PubSubVote|null $vote vote
     *
     * @return self
     */
    public function setVote($vote)
    {
        if (is_null($vote)) {
            throw new \InvalidArgumentException('non-nullable vote cannot be null');
        }
        $this->container['vote'] = $vote;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return \FastComments\Client\Model\PubSubComment|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param \FastComments\Client\Model\PubSubComment|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets extra_info
     *
     * @return \FastComments\Client\Model\LiveEventExtraInfo|null
     */
    public function getExtraInfo()
    {
        return $this->container['extra_info'];
    }

    /**
     * Sets extra_info
     *
     * @param \FastComments\Client\Model\LiveEventExtraInfo|null $extra_info extra_info
     *
     * @return self
     */
    public function setExtraInfo($extra_info)
    {
        if (is_null($extra_info)) {
            throw new \InvalidArgumentException('non-nullable extra_info cannot be null');
        }
        $this->container['extra_info'] = $extra_info;

        return $this;
    }

    /**
     * Gets config
     *
     * @return object|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param object|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        if (is_null($config)) {
            throw new \InvalidArgumentException('non-nullable config cannot be null');
        }
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets is_closed
     *
     * @return bool|null
     */
    public function getIsClosed()
    {
        return $this->container['is_closed'];
    }

    /**
     * Sets is_closed
     *
     * @param bool|null $is_closed is_closed
     *
     * @return self
     */
    public function setIsClosed($is_closed)
    {
        if (is_null($is_closed)) {
            throw new \InvalidArgumentException('non-nullable is_closed cannot be null');
        }
        $this->container['is_closed'] = $is_closed;

        return $this;
    }

    /**
     * Gets uj
     *
     * @return string[]|null
     */
    public function getUj()
    {
        return $this->container['uj'];
    }

    /**
     * Sets uj
     *
     * @param string[]|null $uj uj
     *
     * @return self
     */
    public function setUj($uj)
    {
        if (is_null($uj)) {
            throw new \InvalidArgumentException('non-nullable uj cannot be null');
        }
        $this->container['uj'] = $uj;

        return $this;
    }

    /**
     * Gets ul
     *
     * @return string[]|null
     */
    public function getUl()
    {
        return $this->container['ul'];
    }

    /**
     * Sets ul
     *
     * @param string[]|null $ul ul
     *
     * @return self
     */
    public function setUl($ul)
    {
        if (is_null($ul)) {
            throw new \InvalidArgumentException('non-nullable ul cannot be null');
        }
        $this->container['ul'] = $ul;

        return $this;
    }

    /**
     * Gets changes
     *
     * @return array<string,float>|null
     */
    public function getChanges()
    {
        return $this->container['changes'];
    }

    /**
     * Sets changes
     *
     * @param array<string,float>|null $changes Construct a type with a set of properties K of type T
     *
     * @return self
     */
    public function setChanges($changes)
    {
        if (is_null($changes)) {
            throw new \InvalidArgumentException('non-nullable changes cannot be null');
        }
        $this->container['changes'] = $changes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


