<?php
/**
 * UpdateDomainConfigParams
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FastComments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * fastcomments
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@fastcomments.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FastComments\Client\Model;

use \ArrayAccess;
use \FastComments\Client\ObjectSerializer;

/**
 * UpdateDomainConfigParams Class Doc Comment
 *
 * @category Class
 * @package  FastComments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateDomainConfigParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateDomainConfigParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'domain' => 'string',
        'email_from_name' => 'string',
        'email_from_email' => 'string',
        'logo_src' => 'string',
        'logo_src100px' => 'string',
        'footer_unsubscribe_url' => 'string',
        'email_headers' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'domain' => null,
        'email_from_name' => null,
        'email_from_email' => null,
        'logo_src' => null,
        'logo_src100px' => null,
        'footer_unsubscribe_url' => null,
        'email_headers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'domain' => false,
        'email_from_name' => false,
        'email_from_email' => false,
        'logo_src' => false,
        'logo_src100px' => false,
        'footer_unsubscribe_url' => false,
        'email_headers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domain' => 'domain',
        'email_from_name' => 'emailFromName',
        'email_from_email' => 'emailFromEmail',
        'logo_src' => 'logoSrc',
        'logo_src100px' => 'logoSrc100px',
        'footer_unsubscribe_url' => 'footerUnsubscribeURL',
        'email_headers' => 'emailHeaders'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domain' => 'setDomain',
        'email_from_name' => 'setEmailFromName',
        'email_from_email' => 'setEmailFromEmail',
        'logo_src' => 'setLogoSrc',
        'logo_src100px' => 'setLogoSrc100px',
        'footer_unsubscribe_url' => 'setFooterUnsubscribeUrl',
        'email_headers' => 'setEmailHeaders'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domain' => 'getDomain',
        'email_from_name' => 'getEmailFromName',
        'email_from_email' => 'getEmailFromEmail',
        'logo_src' => 'getLogoSrc',
        'logo_src100px' => 'getLogoSrc100px',
        'footer_unsubscribe_url' => 'getFooterUnsubscribeUrl',
        'email_headers' => 'getEmailHeaders'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('email_from_name', $data ?? [], null);
        $this->setIfExists('email_from_email', $data ?? [], null);
        $this->setIfExists('logo_src', $data ?? [], null);
        $this->setIfExists('logo_src100px', $data ?? [], null);
        $this->setIfExists('footer_unsubscribe_url', $data ?? [], null);
        $this->setIfExists('email_headers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets email_from_name
     *
     * @return string|null
     */
    public function getEmailFromName()
    {
        return $this->container['email_from_name'];
    }

    /**
     * Sets email_from_name
     *
     * @param string|null $email_from_name email_from_name
     *
     * @return self
     */
    public function setEmailFromName($email_from_name)
    {
        if (is_null($email_from_name)) {
            throw new \InvalidArgumentException('non-nullable email_from_name cannot be null');
        }
        $this->container['email_from_name'] = $email_from_name;

        return $this;
    }

    /**
     * Gets email_from_email
     *
     * @return string|null
     */
    public function getEmailFromEmail()
    {
        return $this->container['email_from_email'];
    }

    /**
     * Sets email_from_email
     *
     * @param string|null $email_from_email email_from_email
     *
     * @return self
     */
    public function setEmailFromEmail($email_from_email)
    {
        if (is_null($email_from_email)) {
            throw new \InvalidArgumentException('non-nullable email_from_email cannot be null');
        }
        $this->container['email_from_email'] = $email_from_email;

        return $this;
    }

    /**
     * Gets logo_src
     *
     * @return string|null
     */
    public function getLogoSrc()
    {
        return $this->container['logo_src'];
    }

    /**
     * Sets logo_src
     *
     * @param string|null $logo_src logo_src
     *
     * @return self
     */
    public function setLogoSrc($logo_src)
    {
        if (is_null($logo_src)) {
            throw new \InvalidArgumentException('non-nullable logo_src cannot be null');
        }
        $this->container['logo_src'] = $logo_src;

        return $this;
    }

    /**
     * Gets logo_src100px
     *
     * @return string|null
     */
    public function getLogoSrc100px()
    {
        return $this->container['logo_src100px'];
    }

    /**
     * Sets logo_src100px
     *
     * @param string|null $logo_src100px logo_src100px
     *
     * @return self
     */
    public function setLogoSrc100px($logo_src100px)
    {
        if (is_null($logo_src100px)) {
            throw new \InvalidArgumentException('non-nullable logo_src100px cannot be null');
        }
        $this->container['logo_src100px'] = $logo_src100px;

        return $this;
    }

    /**
     * Gets footer_unsubscribe_url
     *
     * @return string|null
     */
    public function getFooterUnsubscribeUrl()
    {
        return $this->container['footer_unsubscribe_url'];
    }

    /**
     * Sets footer_unsubscribe_url
     *
     * @param string|null $footer_unsubscribe_url footer_unsubscribe_url
     *
     * @return self
     */
    public function setFooterUnsubscribeUrl($footer_unsubscribe_url)
    {
        if (is_null($footer_unsubscribe_url)) {
            throw new \InvalidArgumentException('non-nullable footer_unsubscribe_url cannot be null');
        }
        $this->container['footer_unsubscribe_url'] = $footer_unsubscribe_url;

        return $this;
    }

    /**
     * Gets email_headers
     *
     * @return array<string,string>|null
     */
    public function getEmailHeaders()
    {
        return $this->container['email_headers'];
    }

    /**
     * Sets email_headers
     *
     * @param array<string,string>|null $email_headers Construct a type with a set of properties K of type T
     *
     * @return self
     */
    public function setEmailHeaders($email_headers)
    {
        if (is_null($email_headers)) {
            throw new \InvalidArgumentException('non-nullable email_headers cannot be null');
        }
        $this->container['email_headers'] = $email_headers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


