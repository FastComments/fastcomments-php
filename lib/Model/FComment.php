<?php
/**
 * FComment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FastComments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * fastcomments
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@fastcomments.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FastComments\Client\Model;

use \ArrayAccess;
use \FastComments\Client\ObjectSerializer;

/**
 * FComment Class Doc Comment
 *
 * @category Class
 * @package  FastComments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FComment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FComment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_id' => 'string',
        'tenant_id' => 'string',
        'url_id' => 'string',
        'url_id_raw' => 'string',
        'url' => 'string',
        'page_title' => 'string',
        'user_id' => 'string',
        'anon_user_id' => 'string',
        'commenter_email' => 'string',
        'commenter_name' => 'string',
        'commenter_link' => 'string',
        'comment' => 'string',
        'comment_html' => 'string',
        'parent_id' => 'string',
        'date' => '\DateTime',
        'local_date_string' => 'string',
        'local_date_hours' => 'int',
        'votes' => 'int',
        'votes_up' => 'int',
        'votes_down' => 'int',
        'expire_at' => '\DateTime',
        'verified' => 'bool',
        'verified_date' => '\DateTime',
        'verification_id' => 'string',
        'notification_sent_for_parent' => 'bool',
        'notification_sent_for_parent_tenant' => 'bool',
        'reviewed' => 'bool',
        'imported' => 'bool',
        'external_id' => 'string',
        'external_parent_id' => 'string',
        'avatar_src' => 'string',
        'is_spam' => 'bool',
        'ai_determined_spam' => 'bool',
        'has_images' => 'bool',
        'page_number' => 'int',
        'page_number_of' => 'int',
        'page_number_nf' => 'int',
        'has_links' => 'bool',
        'has_code' => 'bool',
        'approved' => 'bool',
        'locale' => 'string',
        'is_deleted' => 'bool',
        'is_deleted_user' => 'bool',
        'is_banned_user' => 'bool',
        'is_by_admin' => 'bool',
        'is_by_moderator' => 'bool',
        'is_pinned' => 'bool',
        'is_locked' => 'bool',
        'flag_count' => 'int',
        'rating' => 'float',
        'display_label' => 'string',
        'from_product_id' => 'int',
        'meta' => '\FastComments\Client\Model\FCommentMeta',
        'ip_hash' => 'string',
        'mentions' => '\FastComments\Client\Model\CommentUserMentionInfo[]',
        'hash_tags' => '\FastComments\Client\Model\CommentUserHashTagInfo[]',
        'badges' => '\FastComments\Client\Model\CommentUserBadgeInfo[]',
        'domain' => 'string',
        'veteran_badge_processed' => 'string',
        'moderation_group_ids' => 'string[]',
        'did_process_badges' => 'bool',
        'from_offline_restore' => 'bool',
        'autoplay_job_id' => 'string',
        'autoplay_delay_ms' => 'int',
        'feedback_ids' => 'string[]',
        'logs' => 'array[]',
        'group_ids' => 'string[]',
        'view_count' => 'float',
        'requires_verification' => 'bool',
        'edit_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_id' => null,
        'tenant_id' => null,
        'url_id' => null,
        'url_id_raw' => null,
        'url' => null,
        'page_title' => null,
        'user_id' => null,
        'anon_user_id' => null,
        'commenter_email' => null,
        'commenter_name' => null,
        'commenter_link' => null,
        'comment' => null,
        'comment_html' => null,
        'parent_id' => null,
        'date' => 'date-time',
        'local_date_string' => null,
        'local_date_hours' => 'int32',
        'votes' => 'int32',
        'votes_up' => 'int32',
        'votes_down' => 'int32',
        'expire_at' => 'date-time',
        'verified' => null,
        'verified_date' => 'date-time',
        'verification_id' => null,
        'notification_sent_for_parent' => null,
        'notification_sent_for_parent_tenant' => null,
        'reviewed' => null,
        'imported' => null,
        'external_id' => null,
        'external_parent_id' => null,
        'avatar_src' => null,
        'is_spam' => null,
        'ai_determined_spam' => null,
        'has_images' => null,
        'page_number' => 'int32',
        'page_number_of' => 'int32',
        'page_number_nf' => 'int32',
        'has_links' => null,
        'has_code' => null,
        'approved' => null,
        'locale' => null,
        'is_deleted' => null,
        'is_deleted_user' => null,
        'is_banned_user' => null,
        'is_by_admin' => null,
        'is_by_moderator' => null,
        'is_pinned' => null,
        'is_locked' => null,
        'flag_count' => 'int32',
        'rating' => 'double',
        'display_label' => null,
        'from_product_id' => 'int32',
        'meta' => null,
        'ip_hash' => null,
        'mentions' => null,
        'hash_tags' => null,
        'badges' => null,
        'domain' => null,
        'veteran_badge_processed' => null,
        'moderation_group_ids' => null,
        'did_process_badges' => null,
        'from_offline_restore' => null,
        'autoplay_job_id' => null,
        'autoplay_delay_ms' => 'int64',
        'feedback_ids' => null,
        'logs' => null,
        'group_ids' => null,
        'view_count' => 'double',
        'requires_verification' => null,
        'edit_key' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_id' => false,
        'tenant_id' => false,
        'url_id' => false,
        'url_id_raw' => false,
        'url' => false,
        'page_title' => true,
        'user_id' => true,
        'anon_user_id' => true,
        'commenter_email' => true,
        'commenter_name' => false,
        'commenter_link' => false,
        'comment' => false,
        'comment_html' => false,
        'parent_id' => true,
        'date' => true,
        'local_date_string' => true,
        'local_date_hours' => true,
        'votes' => true,
        'votes_up' => true,
        'votes_down' => true,
        'expire_at' => true,
        'verified' => false,
        'verified_date' => true,
        'verification_id' => true,
        'notification_sent_for_parent' => false,
        'notification_sent_for_parent_tenant' => false,
        'reviewed' => false,
        'imported' => false,
        'external_id' => false,
        'external_parent_id' => true,
        'avatar_src' => true,
        'is_spam' => false,
        'ai_determined_spam' => false,
        'has_images' => false,
        'page_number' => true,
        'page_number_of' => true,
        'page_number_nf' => true,
        'has_links' => false,
        'has_code' => false,
        'approved' => false,
        'locale' => true,
        'is_deleted' => false,
        'is_deleted_user' => false,
        'is_banned_user' => false,
        'is_by_admin' => false,
        'is_by_moderator' => false,
        'is_pinned' => true,
        'is_locked' => true,
        'flag_count' => true,
        'rating' => true,
        'display_label' => true,
        'from_product_id' => false,
        'meta' => true,
        'ip_hash' => false,
        'mentions' => false,
        'hash_tags' => false,
        'badges' => true,
        'domain' => true,
        'veteran_badge_processed' => false,
        'moderation_group_ids' => true,
        'did_process_badges' => false,
        'from_offline_restore' => false,
        'autoplay_job_id' => false,
        'autoplay_delay_ms' => false,
        'feedback_ids' => false,
        'logs' => true,
        'group_ids' => true,
        'view_count' => true,
        'requires_verification' => false,
        'edit_key' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'tenant_id' => 'tenantId',
        'url_id' => 'urlId',
        'url_id_raw' => 'urlIdRaw',
        'url' => 'url',
        'page_title' => 'pageTitle',
        'user_id' => 'userId',
        'anon_user_id' => 'anonUserId',
        'commenter_email' => 'commenterEmail',
        'commenter_name' => 'commenterName',
        'commenter_link' => 'commenterLink',
        'comment' => 'comment',
        'comment_html' => 'commentHTML',
        'parent_id' => 'parentId',
        'date' => 'date',
        'local_date_string' => 'localDateString',
        'local_date_hours' => 'localDateHours',
        'votes' => 'votes',
        'votes_up' => 'votesUp',
        'votes_down' => 'votesDown',
        'expire_at' => 'expireAt',
        'verified' => 'verified',
        'verified_date' => 'verifiedDate',
        'verification_id' => 'verificationId',
        'notification_sent_for_parent' => 'notificationSentForParent',
        'notification_sent_for_parent_tenant' => 'notificationSentForParentTenant',
        'reviewed' => 'reviewed',
        'imported' => 'imported',
        'external_id' => 'externalId',
        'external_parent_id' => 'externalParentId',
        'avatar_src' => 'avatarSrc',
        'is_spam' => 'isSpam',
        'ai_determined_spam' => 'aiDeterminedSpam',
        'has_images' => 'hasImages',
        'page_number' => 'pageNumber',
        'page_number_of' => 'pageNumberOF',
        'page_number_nf' => 'pageNumberNF',
        'has_links' => 'hasLinks',
        'has_code' => 'hasCode',
        'approved' => 'approved',
        'locale' => 'locale',
        'is_deleted' => 'isDeleted',
        'is_deleted_user' => 'isDeletedUser',
        'is_banned_user' => 'isBannedUser',
        'is_by_admin' => 'isByAdmin',
        'is_by_moderator' => 'isByModerator',
        'is_pinned' => 'isPinned',
        'is_locked' => 'isLocked',
        'flag_count' => 'flagCount',
        'rating' => 'rating',
        'display_label' => 'displayLabel',
        'from_product_id' => 'fromProductId',
        'meta' => 'meta',
        'ip_hash' => 'ipHash',
        'mentions' => 'mentions',
        'hash_tags' => 'hashTags',
        'badges' => 'badges',
        'domain' => 'domain',
        'veteran_badge_processed' => 'veteranBadgeProcessed',
        'moderation_group_ids' => 'moderationGroupIds',
        'did_process_badges' => 'didProcessBadges',
        'from_offline_restore' => 'fromOfflineRestore',
        'autoplay_job_id' => 'autoplayJobId',
        'autoplay_delay_ms' => 'autoplayDelayMS',
        'feedback_ids' => 'feedbackIds',
        'logs' => 'logs',
        'group_ids' => 'groupIds',
        'view_count' => 'viewCount',
        'requires_verification' => 'requiresVerification',
        'edit_key' => 'editKey'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'tenant_id' => 'setTenantId',
        'url_id' => 'setUrlId',
        'url_id_raw' => 'setUrlIdRaw',
        'url' => 'setUrl',
        'page_title' => 'setPageTitle',
        'user_id' => 'setUserId',
        'anon_user_id' => 'setAnonUserId',
        'commenter_email' => 'setCommenterEmail',
        'commenter_name' => 'setCommenterName',
        'commenter_link' => 'setCommenterLink',
        'comment' => 'setComment',
        'comment_html' => 'setCommentHtml',
        'parent_id' => 'setParentId',
        'date' => 'setDate',
        'local_date_string' => 'setLocalDateString',
        'local_date_hours' => 'setLocalDateHours',
        'votes' => 'setVotes',
        'votes_up' => 'setVotesUp',
        'votes_down' => 'setVotesDown',
        'expire_at' => 'setExpireAt',
        'verified' => 'setVerified',
        'verified_date' => 'setVerifiedDate',
        'verification_id' => 'setVerificationId',
        'notification_sent_for_parent' => 'setNotificationSentForParent',
        'notification_sent_for_parent_tenant' => 'setNotificationSentForParentTenant',
        'reviewed' => 'setReviewed',
        'imported' => 'setImported',
        'external_id' => 'setExternalId',
        'external_parent_id' => 'setExternalParentId',
        'avatar_src' => 'setAvatarSrc',
        'is_spam' => 'setIsSpam',
        'ai_determined_spam' => 'setAiDeterminedSpam',
        'has_images' => 'setHasImages',
        'page_number' => 'setPageNumber',
        'page_number_of' => 'setPageNumberOf',
        'page_number_nf' => 'setPageNumberNf',
        'has_links' => 'setHasLinks',
        'has_code' => 'setHasCode',
        'approved' => 'setApproved',
        'locale' => 'setLocale',
        'is_deleted' => 'setIsDeleted',
        'is_deleted_user' => 'setIsDeletedUser',
        'is_banned_user' => 'setIsBannedUser',
        'is_by_admin' => 'setIsByAdmin',
        'is_by_moderator' => 'setIsByModerator',
        'is_pinned' => 'setIsPinned',
        'is_locked' => 'setIsLocked',
        'flag_count' => 'setFlagCount',
        'rating' => 'setRating',
        'display_label' => 'setDisplayLabel',
        'from_product_id' => 'setFromProductId',
        'meta' => 'setMeta',
        'ip_hash' => 'setIpHash',
        'mentions' => 'setMentions',
        'hash_tags' => 'setHashTags',
        'badges' => 'setBadges',
        'domain' => 'setDomain',
        'veteran_badge_processed' => 'setVeteranBadgeProcessed',
        'moderation_group_ids' => 'setModerationGroupIds',
        'did_process_badges' => 'setDidProcessBadges',
        'from_offline_restore' => 'setFromOfflineRestore',
        'autoplay_job_id' => 'setAutoplayJobId',
        'autoplay_delay_ms' => 'setAutoplayDelayMs',
        'feedback_ids' => 'setFeedbackIds',
        'logs' => 'setLogs',
        'group_ids' => 'setGroupIds',
        'view_count' => 'setViewCount',
        'requires_verification' => 'setRequiresVerification',
        'edit_key' => 'setEditKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'tenant_id' => 'getTenantId',
        'url_id' => 'getUrlId',
        'url_id_raw' => 'getUrlIdRaw',
        'url' => 'getUrl',
        'page_title' => 'getPageTitle',
        'user_id' => 'getUserId',
        'anon_user_id' => 'getAnonUserId',
        'commenter_email' => 'getCommenterEmail',
        'commenter_name' => 'getCommenterName',
        'commenter_link' => 'getCommenterLink',
        'comment' => 'getComment',
        'comment_html' => 'getCommentHtml',
        'parent_id' => 'getParentId',
        'date' => 'getDate',
        'local_date_string' => 'getLocalDateString',
        'local_date_hours' => 'getLocalDateHours',
        'votes' => 'getVotes',
        'votes_up' => 'getVotesUp',
        'votes_down' => 'getVotesDown',
        'expire_at' => 'getExpireAt',
        'verified' => 'getVerified',
        'verified_date' => 'getVerifiedDate',
        'verification_id' => 'getVerificationId',
        'notification_sent_for_parent' => 'getNotificationSentForParent',
        'notification_sent_for_parent_tenant' => 'getNotificationSentForParentTenant',
        'reviewed' => 'getReviewed',
        'imported' => 'getImported',
        'external_id' => 'getExternalId',
        'external_parent_id' => 'getExternalParentId',
        'avatar_src' => 'getAvatarSrc',
        'is_spam' => 'getIsSpam',
        'ai_determined_spam' => 'getAiDeterminedSpam',
        'has_images' => 'getHasImages',
        'page_number' => 'getPageNumber',
        'page_number_of' => 'getPageNumberOf',
        'page_number_nf' => 'getPageNumberNf',
        'has_links' => 'getHasLinks',
        'has_code' => 'getHasCode',
        'approved' => 'getApproved',
        'locale' => 'getLocale',
        'is_deleted' => 'getIsDeleted',
        'is_deleted_user' => 'getIsDeletedUser',
        'is_banned_user' => 'getIsBannedUser',
        'is_by_admin' => 'getIsByAdmin',
        'is_by_moderator' => 'getIsByModerator',
        'is_pinned' => 'getIsPinned',
        'is_locked' => 'getIsLocked',
        'flag_count' => 'getFlagCount',
        'rating' => 'getRating',
        'display_label' => 'getDisplayLabel',
        'from_product_id' => 'getFromProductId',
        'meta' => 'getMeta',
        'ip_hash' => 'getIpHash',
        'mentions' => 'getMentions',
        'hash_tags' => 'getHashTags',
        'badges' => 'getBadges',
        'domain' => 'getDomain',
        'veteran_badge_processed' => 'getVeteranBadgeProcessed',
        'moderation_group_ids' => 'getModerationGroupIds',
        'did_process_badges' => 'getDidProcessBadges',
        'from_offline_restore' => 'getFromOfflineRestore',
        'autoplay_job_id' => 'getAutoplayJobId',
        'autoplay_delay_ms' => 'getAutoplayDelayMs',
        'feedback_ids' => 'getFeedbackIds',
        'logs' => 'getLogs',
        'group_ids' => 'getGroupIds',
        'view_count' => 'getViewCount',
        'requires_verification' => 'getRequiresVerification',
        'edit_key' => 'getEditKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('_id', $data ?? [], null);
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('url_id', $data ?? [], null);
        $this->setIfExists('url_id_raw', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('page_title', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('anon_user_id', $data ?? [], null);
        $this->setIfExists('commenter_email', $data ?? [], null);
        $this->setIfExists('commenter_name', $data ?? [], null);
        $this->setIfExists('commenter_link', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('comment_html', $data ?? [], null);
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('local_date_string', $data ?? [], null);
        $this->setIfExists('local_date_hours', $data ?? [], null);
        $this->setIfExists('votes', $data ?? [], null);
        $this->setIfExists('votes_up', $data ?? [], null);
        $this->setIfExists('votes_down', $data ?? [], null);
        $this->setIfExists('expire_at', $data ?? [], null);
        $this->setIfExists('verified', $data ?? [], null);
        $this->setIfExists('verified_date', $data ?? [], null);
        $this->setIfExists('verification_id', $data ?? [], null);
        $this->setIfExists('notification_sent_for_parent', $data ?? [], null);
        $this->setIfExists('notification_sent_for_parent_tenant', $data ?? [], null);
        $this->setIfExists('reviewed', $data ?? [], null);
        $this->setIfExists('imported', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('external_parent_id', $data ?? [], null);
        $this->setIfExists('avatar_src', $data ?? [], null);
        $this->setIfExists('is_spam', $data ?? [], null);
        $this->setIfExists('ai_determined_spam', $data ?? [], null);
        $this->setIfExists('has_images', $data ?? [], null);
        $this->setIfExists('page_number', $data ?? [], null);
        $this->setIfExists('page_number_of', $data ?? [], null);
        $this->setIfExists('page_number_nf', $data ?? [], null);
        $this->setIfExists('has_links', $data ?? [], null);
        $this->setIfExists('has_code', $data ?? [], null);
        $this->setIfExists('approved', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('is_deleted_user', $data ?? [], null);
        $this->setIfExists('is_banned_user', $data ?? [], null);
        $this->setIfExists('is_by_admin', $data ?? [], null);
        $this->setIfExists('is_by_moderator', $data ?? [], null);
        $this->setIfExists('is_pinned', $data ?? [], null);
        $this->setIfExists('is_locked', $data ?? [], null);
        $this->setIfExists('flag_count', $data ?? [], null);
        $this->setIfExists('rating', $data ?? [], null);
        $this->setIfExists('display_label', $data ?? [], null);
        $this->setIfExists('from_product_id', $data ?? [], null);
        $this->setIfExists('meta', $data ?? [], null);
        $this->setIfExists('ip_hash', $data ?? [], null);
        $this->setIfExists('mentions', $data ?? [], null);
        $this->setIfExists('hash_tags', $data ?? [], null);
        $this->setIfExists('badges', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('veteran_badge_processed', $data ?? [], null);
        $this->setIfExists('moderation_group_ids', $data ?? [], null);
        $this->setIfExists('did_process_badges', $data ?? [], null);
        $this->setIfExists('from_offline_restore', $data ?? [], null);
        $this->setIfExists('autoplay_job_id', $data ?? [], null);
        $this->setIfExists('autoplay_delay_ms', $data ?? [], null);
        $this->setIfExists('feedback_ids', $data ?? [], null);
        $this->setIfExists('logs', $data ?? [], null);
        $this->setIfExists('group_ids', $data ?? [], null);
        $this->setIfExists('view_count', $data ?? [], null);
        $this->setIfExists('requires_verification', $data ?? [], null);
        $this->setIfExists('edit_key', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['_id'] === null) {
            $invalidProperties[] = "'_id' can't be null";
        }
        if ($this->container['tenant_id'] === null) {
            $invalidProperties[] = "'tenant_id' can't be null";
        }
        if ($this->container['url_id'] === null) {
            $invalidProperties[] = "'url_id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['commenter_name'] === null) {
            $invalidProperties[] = "'commenter_name' can't be null";
        }
        if ($this->container['comment'] === null) {
            $invalidProperties[] = "'comment' can't be null";
        }
        if ($this->container['comment_html'] === null) {
            $invalidProperties[] = "'comment_html' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['verified'] === null) {
            $invalidProperties[] = "'verified' can't be null";
        }
        if ($this->container['approved'] === null) {
            $invalidProperties[] = "'approved' can't be null";
        }
        if ($this->container['locale'] === null) {
            $invalidProperties[] = "'locale' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string $_id _id
     *
     * @return self
     */
    public function setId($_id)
    {
        if (is_null($_id)) {
            throw new \InvalidArgumentException('non-nullable _id cannot be null');
        }
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            throw new \InvalidArgumentException('non-nullable tenant_id cannot be null');
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets url_id
     *
     * @return string
     */
    public function getUrlId()
    {
        return $this->container['url_id'];
    }

    /**
     * Sets url_id
     *
     * @param string $url_id url_id
     *
     * @return self
     */
    public function setUrlId($url_id)
    {
        if (is_null($url_id)) {
            throw new \InvalidArgumentException('non-nullable url_id cannot be null');
        }
        $this->container['url_id'] = $url_id;

        return $this;
    }

    /**
     * Gets url_id_raw
     *
     * @return string|null
     */
    public function getUrlIdRaw()
    {
        return $this->container['url_id_raw'];
    }

    /**
     * Sets url_id_raw
     *
     * @param string|null $url_id_raw url_id_raw
     *
     * @return self
     */
    public function setUrlIdRaw($url_id_raw)
    {
        if (is_null($url_id_raw)) {
            throw new \InvalidArgumentException('non-nullable url_id_raw cannot be null');
        }
        $this->container['url_id_raw'] = $url_id_raw;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets page_title
     *
     * @return string|null
     */
    public function getPageTitle()
    {
        return $this->container['page_title'];
    }

    /**
     * Sets page_title
     *
     * @param string|null $page_title page_title
     *
     * @return self
     */
    public function setPageTitle($page_title)
    {
        if (is_null($page_title)) {
            array_push($this->openAPINullablesSetToNull, 'page_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('page_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['page_title'] = $page_title;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets anon_user_id
     *
     * @return string|null
     */
    public function getAnonUserId()
    {
        return $this->container['anon_user_id'];
    }

    /**
     * Sets anon_user_id
     *
     * @param string|null $anon_user_id anon_user_id
     *
     * @return self
     */
    public function setAnonUserId($anon_user_id)
    {
        if (is_null($anon_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'anon_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('anon_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['anon_user_id'] = $anon_user_id;

        return $this;
    }

    /**
     * Gets commenter_email
     *
     * @return string|null
     */
    public function getCommenterEmail()
    {
        return $this->container['commenter_email'];
    }

    /**
     * Sets commenter_email
     *
     * @param string|null $commenter_email commenter_email
     *
     * @return self
     */
    public function setCommenterEmail($commenter_email)
    {
        if (is_null($commenter_email)) {
            array_push($this->openAPINullablesSetToNull, 'commenter_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('commenter_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['commenter_email'] = $commenter_email;

        return $this;
    }

    /**
     * Gets commenter_name
     *
     * @return string
     */
    public function getCommenterName()
    {
        return $this->container['commenter_name'];
    }

    /**
     * Sets commenter_name
     *
     * @param string $commenter_name commenter_name
     *
     * @return self
     */
    public function setCommenterName($commenter_name)
    {
        if (is_null($commenter_name)) {
            throw new \InvalidArgumentException('non-nullable commenter_name cannot be null');
        }
        $this->container['commenter_name'] = $commenter_name;

        return $this;
    }

    /**
     * Gets commenter_link
     *
     * @return string|null
     */
    public function getCommenterLink()
    {
        return $this->container['commenter_link'];
    }

    /**
     * Sets commenter_link
     *
     * @param string|null $commenter_link commenter_link
     *
     * @return self
     */
    public function setCommenterLink($commenter_link)
    {
        if (is_null($commenter_link)) {
            throw new \InvalidArgumentException('non-nullable commenter_link cannot be null');
        }
        $this->container['commenter_link'] = $commenter_link;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets comment_html
     *
     * @return string
     */
    public function getCommentHtml()
    {
        return $this->container['comment_html'];
    }

    /**
     * Sets comment_html
     *
     * @param string $comment_html comment_html
     *
     * @return self
     */
    public function setCommentHtml($comment_html)
    {
        if (is_null($comment_html)) {
            throw new \InvalidArgumentException('non-nullable comment_html cannot be null');
        }
        $this->container['comment_html'] = $comment_html;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string|null $parent_id parent_id
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        if (is_null($parent_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            array_push($this->openAPINullablesSetToNull, 'date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets local_date_string
     *
     * @return string|null
     */
    public function getLocalDateString()
    {
        return $this->container['local_date_string'];
    }

    /**
     * Sets local_date_string
     *
     * @param string|null $local_date_string local_date_string
     *
     * @return self
     */
    public function setLocalDateString($local_date_string)
    {
        if (is_null($local_date_string)) {
            array_push($this->openAPINullablesSetToNull, 'local_date_string');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('local_date_string', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['local_date_string'] = $local_date_string;

        return $this;
    }

    /**
     * Gets local_date_hours
     *
     * @return int|null
     */
    public function getLocalDateHours()
    {
        return $this->container['local_date_hours'];
    }

    /**
     * Sets local_date_hours
     *
     * @param int|null $local_date_hours local_date_hours
     *
     * @return self
     */
    public function setLocalDateHours($local_date_hours)
    {
        if (is_null($local_date_hours)) {
            array_push($this->openAPINullablesSetToNull, 'local_date_hours');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('local_date_hours', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['local_date_hours'] = $local_date_hours;

        return $this;
    }

    /**
     * Gets votes
     *
     * @return int|null
     */
    public function getVotes()
    {
        return $this->container['votes'];
    }

    /**
     * Sets votes
     *
     * @param int|null $votes votes
     *
     * @return self
     */
    public function setVotes($votes)
    {
        if (is_null($votes)) {
            array_push($this->openAPINullablesSetToNull, 'votes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('votes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['votes'] = $votes;

        return $this;
    }

    /**
     * Gets votes_up
     *
     * @return int|null
     */
    public function getVotesUp()
    {
        return $this->container['votes_up'];
    }

    /**
     * Sets votes_up
     *
     * @param int|null $votes_up votes_up
     *
     * @return self
     */
    public function setVotesUp($votes_up)
    {
        if (is_null($votes_up)) {
            array_push($this->openAPINullablesSetToNull, 'votes_up');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('votes_up', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['votes_up'] = $votes_up;

        return $this;
    }

    /**
     * Gets votes_down
     *
     * @return int|null
     */
    public function getVotesDown()
    {
        return $this->container['votes_down'];
    }

    /**
     * Sets votes_down
     *
     * @param int|null $votes_down votes_down
     *
     * @return self
     */
    public function setVotesDown($votes_down)
    {
        if (is_null($votes_down)) {
            array_push($this->openAPINullablesSetToNull, 'votes_down');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('votes_down', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['votes_down'] = $votes_down;

        return $this;
    }

    /**
     * Gets expire_at
     *
     * @return \DateTime|null
     */
    public function getExpireAt()
    {
        return $this->container['expire_at'];
    }

    /**
     * Sets expire_at
     *
     * @param \DateTime|null $expire_at expire_at
     *
     * @return self
     */
    public function setExpireAt($expire_at)
    {
        if (is_null($expire_at)) {
            array_push($this->openAPINullablesSetToNull, 'expire_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expire_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expire_at'] = $expire_at;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool $verified verified
     *
     * @return self
     */
    public function setVerified($verified)
    {
        if (is_null($verified)) {
            throw new \InvalidArgumentException('non-nullable verified cannot be null');
        }
        $this->container['verified'] = $verified;

        return $this;
    }

    /**
     * Gets verified_date
     *
     * @return \DateTime|null
     */
    public function getVerifiedDate()
    {
        return $this->container['verified_date'];
    }

    /**
     * Sets verified_date
     *
     * @param \DateTime|null $verified_date verified_date
     *
     * @return self
     */
    public function setVerifiedDate($verified_date)
    {
        if (is_null($verified_date)) {
            array_push($this->openAPINullablesSetToNull, 'verified_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('verified_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['verified_date'] = $verified_date;

        return $this;
    }

    /**
     * Gets verification_id
     *
     * @return string|null
     */
    public function getVerificationId()
    {
        return $this->container['verification_id'];
    }

    /**
     * Sets verification_id
     *
     * @param string|null $verification_id verification_id
     *
     * @return self
     */
    public function setVerificationId($verification_id)
    {
        if (is_null($verification_id)) {
            array_push($this->openAPINullablesSetToNull, 'verification_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('verification_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['verification_id'] = $verification_id;

        return $this;
    }

    /**
     * Gets notification_sent_for_parent
     *
     * @return bool|null
     */
    public function getNotificationSentForParent()
    {
        return $this->container['notification_sent_for_parent'];
    }

    /**
     * Sets notification_sent_for_parent
     *
     * @param bool|null $notification_sent_for_parent notification_sent_for_parent
     *
     * @return self
     */
    public function setNotificationSentForParent($notification_sent_for_parent)
    {
        if (is_null($notification_sent_for_parent)) {
            throw new \InvalidArgumentException('non-nullable notification_sent_for_parent cannot be null');
        }
        $this->container['notification_sent_for_parent'] = $notification_sent_for_parent;

        return $this;
    }

    /**
     * Gets notification_sent_for_parent_tenant
     *
     * @return bool|null
     */
    public function getNotificationSentForParentTenant()
    {
        return $this->container['notification_sent_for_parent_tenant'];
    }

    /**
     * Sets notification_sent_for_parent_tenant
     *
     * @param bool|null $notification_sent_for_parent_tenant notification_sent_for_parent_tenant
     *
     * @return self
     */
    public function setNotificationSentForParentTenant($notification_sent_for_parent_tenant)
    {
        if (is_null($notification_sent_for_parent_tenant)) {
            throw new \InvalidArgumentException('non-nullable notification_sent_for_parent_tenant cannot be null');
        }
        $this->container['notification_sent_for_parent_tenant'] = $notification_sent_for_parent_tenant;

        return $this;
    }

    /**
     * Gets reviewed
     *
     * @return bool|null
     */
    public function getReviewed()
    {
        return $this->container['reviewed'];
    }

    /**
     * Sets reviewed
     *
     * @param bool|null $reviewed reviewed
     *
     * @return self
     */
    public function setReviewed($reviewed)
    {
        if (is_null($reviewed)) {
            throw new \InvalidArgumentException('non-nullable reviewed cannot be null');
        }
        $this->container['reviewed'] = $reviewed;

        return $this;
    }

    /**
     * Gets imported
     *
     * @return bool|null
     */
    public function getImported()
    {
        return $this->container['imported'];
    }

    /**
     * Sets imported
     *
     * @param bool|null $imported imported
     *
     * @return self
     */
    public function setImported($imported)
    {
        if (is_null($imported)) {
            throw new \InvalidArgumentException('non-nullable imported cannot be null');
        }
        $this->container['imported'] = $imported;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets external_parent_id
     *
     * @return string|null
     */
    public function getExternalParentId()
    {
        return $this->container['external_parent_id'];
    }

    /**
     * Sets external_parent_id
     *
     * @param string|null $external_parent_id external_parent_id
     *
     * @return self
     */
    public function setExternalParentId($external_parent_id)
    {
        if (is_null($external_parent_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_parent_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_parent_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_parent_id'] = $external_parent_id;

        return $this;
    }

    /**
     * Gets avatar_src
     *
     * @return string|null
     */
    public function getAvatarSrc()
    {
        return $this->container['avatar_src'];
    }

    /**
     * Sets avatar_src
     *
     * @param string|null $avatar_src avatar_src
     *
     * @return self
     */
    public function setAvatarSrc($avatar_src)
    {
        if (is_null($avatar_src)) {
            array_push($this->openAPINullablesSetToNull, 'avatar_src');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatar_src', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avatar_src'] = $avatar_src;

        return $this;
    }

    /**
     * Gets is_spam
     *
     * @return bool|null
     */
    public function getIsSpam()
    {
        return $this->container['is_spam'];
    }

    /**
     * Sets is_spam
     *
     * @param bool|null $is_spam is_spam
     *
     * @return self
     */
    public function setIsSpam($is_spam)
    {
        if (is_null($is_spam)) {
            throw new \InvalidArgumentException('non-nullable is_spam cannot be null');
        }
        $this->container['is_spam'] = $is_spam;

        return $this;
    }

    /**
     * Gets ai_determined_spam
     *
     * @return bool|null
     */
    public function getAiDeterminedSpam()
    {
        return $this->container['ai_determined_spam'];
    }

    /**
     * Sets ai_determined_spam
     *
     * @param bool|null $ai_determined_spam ai_determined_spam
     *
     * @return self
     */
    public function setAiDeterminedSpam($ai_determined_spam)
    {
        if (is_null($ai_determined_spam)) {
            throw new \InvalidArgumentException('non-nullable ai_determined_spam cannot be null');
        }
        $this->container['ai_determined_spam'] = $ai_determined_spam;

        return $this;
    }

    /**
     * Gets has_images
     *
     * @return bool|null
     */
    public function getHasImages()
    {
        return $this->container['has_images'];
    }

    /**
     * Sets has_images
     *
     * @param bool|null $has_images has_images
     *
     * @return self
     */
    public function setHasImages($has_images)
    {
        if (is_null($has_images)) {
            throw new \InvalidArgumentException('non-nullable has_images cannot be null');
        }
        $this->container['has_images'] = $has_images;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int|null
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int|null $page_number page_number
     *
     * @return self
     */
    public function setPageNumber($page_number)
    {
        if (is_null($page_number)) {
            array_push($this->openAPINullablesSetToNull, 'page_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('page_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_number_of
     *
     * @return int|null
     */
    public function getPageNumberOf()
    {
        return $this->container['page_number_of'];
    }

    /**
     * Sets page_number_of
     *
     * @param int|null $page_number_of page_number_of
     *
     * @return self
     */
    public function setPageNumberOf($page_number_of)
    {
        if (is_null($page_number_of)) {
            array_push($this->openAPINullablesSetToNull, 'page_number_of');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('page_number_of', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['page_number_of'] = $page_number_of;

        return $this;
    }

    /**
     * Gets page_number_nf
     *
     * @return int|null
     */
    public function getPageNumberNf()
    {
        return $this->container['page_number_nf'];
    }

    /**
     * Sets page_number_nf
     *
     * @param int|null $page_number_nf page_number_nf
     *
     * @return self
     */
    public function setPageNumberNf($page_number_nf)
    {
        if (is_null($page_number_nf)) {
            array_push($this->openAPINullablesSetToNull, 'page_number_nf');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('page_number_nf', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['page_number_nf'] = $page_number_nf;

        return $this;
    }

    /**
     * Gets has_links
     *
     * @return bool|null
     */
    public function getHasLinks()
    {
        return $this->container['has_links'];
    }

    /**
     * Sets has_links
     *
     * @param bool|null $has_links has_links
     *
     * @return self
     */
    public function setHasLinks($has_links)
    {
        if (is_null($has_links)) {
            throw new \InvalidArgumentException('non-nullable has_links cannot be null');
        }
        $this->container['has_links'] = $has_links;

        return $this;
    }

    /**
     * Gets has_code
     *
     * @return bool|null
     */
    public function getHasCode()
    {
        return $this->container['has_code'];
    }

    /**
     * Sets has_code
     *
     * @param bool|null $has_code has_code
     *
     * @return self
     */
    public function setHasCode($has_code)
    {
        if (is_null($has_code)) {
            throw new \InvalidArgumentException('non-nullable has_code cannot be null');
        }
        $this->container['has_code'] = $has_code;

        return $this;
    }

    /**
     * Gets approved
     *
     * @return bool
     */
    public function getApproved()
    {
        return $this->container['approved'];
    }

    /**
     * Sets approved
     *
     * @param bool $approved approved
     *
     * @return self
     */
    public function setApproved($approved)
    {
        if (is_null($approved)) {
            throw new \InvalidArgumentException('non-nullable approved cannot be null');
        }
        $this->container['approved'] = $approved;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            array_push($this->openAPINullablesSetToNull, 'locale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets is_deleted_user
     *
     * @return bool|null
     */
    public function getIsDeletedUser()
    {
        return $this->container['is_deleted_user'];
    }

    /**
     * Sets is_deleted_user
     *
     * @param bool|null $is_deleted_user is_deleted_user
     *
     * @return self
     */
    public function setIsDeletedUser($is_deleted_user)
    {
        if (is_null($is_deleted_user)) {
            throw new \InvalidArgumentException('non-nullable is_deleted_user cannot be null');
        }
        $this->container['is_deleted_user'] = $is_deleted_user;

        return $this;
    }

    /**
     * Gets is_banned_user
     *
     * @return bool|null
     */
    public function getIsBannedUser()
    {
        return $this->container['is_banned_user'];
    }

    /**
     * Sets is_banned_user
     *
     * @param bool|null $is_banned_user is_banned_user
     *
     * @return self
     */
    public function setIsBannedUser($is_banned_user)
    {
        if (is_null($is_banned_user)) {
            throw new \InvalidArgumentException('non-nullable is_banned_user cannot be null');
        }
        $this->container['is_banned_user'] = $is_banned_user;

        return $this;
    }

    /**
     * Gets is_by_admin
     *
     * @return bool|null
     */
    public function getIsByAdmin()
    {
        return $this->container['is_by_admin'];
    }

    /**
     * Sets is_by_admin
     *
     * @param bool|null $is_by_admin is_by_admin
     *
     * @return self
     */
    public function setIsByAdmin($is_by_admin)
    {
        if (is_null($is_by_admin)) {
            throw new \InvalidArgumentException('non-nullable is_by_admin cannot be null');
        }
        $this->container['is_by_admin'] = $is_by_admin;

        return $this;
    }

    /**
     * Gets is_by_moderator
     *
     * @return bool|null
     */
    public function getIsByModerator()
    {
        return $this->container['is_by_moderator'];
    }

    /**
     * Sets is_by_moderator
     *
     * @param bool|null $is_by_moderator is_by_moderator
     *
     * @return self
     */
    public function setIsByModerator($is_by_moderator)
    {
        if (is_null($is_by_moderator)) {
            throw new \InvalidArgumentException('non-nullable is_by_moderator cannot be null');
        }
        $this->container['is_by_moderator'] = $is_by_moderator;

        return $this;
    }

    /**
     * Gets is_pinned
     *
     * @return bool|null
     */
    public function getIsPinned()
    {
        return $this->container['is_pinned'];
    }

    /**
     * Sets is_pinned
     *
     * @param bool|null $is_pinned is_pinned
     *
     * @return self
     */
    public function setIsPinned($is_pinned)
    {
        if (is_null($is_pinned)) {
            array_push($this->openAPINullablesSetToNull, 'is_pinned');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_pinned', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_pinned'] = $is_pinned;

        return $this;
    }

    /**
     * Gets is_locked
     *
     * @return bool|null
     */
    public function getIsLocked()
    {
        return $this->container['is_locked'];
    }

    /**
     * Sets is_locked
     *
     * @param bool|null $is_locked is_locked
     *
     * @return self
     */
    public function setIsLocked($is_locked)
    {
        if (is_null($is_locked)) {
            array_push($this->openAPINullablesSetToNull, 'is_locked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_locked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_locked'] = $is_locked;

        return $this;
    }

    /**
     * Gets flag_count
     *
     * @return int|null
     */
    public function getFlagCount()
    {
        return $this->container['flag_count'];
    }

    /**
     * Sets flag_count
     *
     * @param int|null $flag_count flag_count
     *
     * @return self
     */
    public function setFlagCount($flag_count)
    {
        if (is_null($flag_count)) {
            array_push($this->openAPINullablesSetToNull, 'flag_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('flag_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['flag_count'] = $flag_count;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return float|null
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param float|null $rating rating
     *
     * @return self
     */
    public function setRating($rating)
    {
        if (is_null($rating)) {
            array_push($this->openAPINullablesSetToNull, 'rating');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rating', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets display_label
     *
     * @return string|null
     */
    public function getDisplayLabel()
    {
        return $this->container['display_label'];
    }

    /**
     * Sets display_label
     *
     * @param string|null $display_label display_label
     *
     * @return self
     */
    public function setDisplayLabel($display_label)
    {
        if (is_null($display_label)) {
            array_push($this->openAPINullablesSetToNull, 'display_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('display_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['display_label'] = $display_label;

        return $this;
    }

    /**
     * Gets from_product_id
     *
     * @return int|null
     */
    public function getFromProductId()
    {
        return $this->container['from_product_id'];
    }

    /**
     * Sets from_product_id
     *
     * @param int|null $from_product_id from_product_id
     *
     * @return self
     */
    public function setFromProductId($from_product_id)
    {
        if (is_null($from_product_id)) {
            throw new \InvalidArgumentException('non-nullable from_product_id cannot be null');
        }
        $this->container['from_product_id'] = $from_product_id;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return \FastComments\Client\Model\FCommentMeta|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \FastComments\Client\Model\FCommentMeta|null $meta meta
     *
     * @return self
     */
    public function setMeta($meta)
    {
        if (is_null($meta)) {
            array_push($this->openAPINullablesSetToNull, 'meta');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meta', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets ip_hash
     *
     * @return string|null
     */
    public function getIpHash()
    {
        return $this->container['ip_hash'];
    }

    /**
     * Sets ip_hash
     *
     * @param string|null $ip_hash ip_hash
     *
     * @return self
     */
    public function setIpHash($ip_hash)
    {
        if (is_null($ip_hash)) {
            throw new \InvalidArgumentException('non-nullable ip_hash cannot be null');
        }
        $this->container['ip_hash'] = $ip_hash;

        return $this;
    }

    /**
     * Gets mentions
     *
     * @return \FastComments\Client\Model\CommentUserMentionInfo[]|null
     */
    public function getMentions()
    {
        return $this->container['mentions'];
    }

    /**
     * Sets mentions
     *
     * @param \FastComments\Client\Model\CommentUserMentionInfo[]|null $mentions mentions
     *
     * @return self
     */
    public function setMentions($mentions)
    {
        if (is_null($mentions)) {
            throw new \InvalidArgumentException('non-nullable mentions cannot be null');
        }
        $this->container['mentions'] = $mentions;

        return $this;
    }

    /**
     * Gets hash_tags
     *
     * @return \FastComments\Client\Model\CommentUserHashTagInfo[]|null
     */
    public function getHashTags()
    {
        return $this->container['hash_tags'];
    }

    /**
     * Sets hash_tags
     *
     * @param \FastComments\Client\Model\CommentUserHashTagInfo[]|null $hash_tags hash_tags
     *
     * @return self
     */
    public function setHashTags($hash_tags)
    {
        if (is_null($hash_tags)) {
            throw new \InvalidArgumentException('non-nullable hash_tags cannot be null');
        }
        $this->container['hash_tags'] = $hash_tags;

        return $this;
    }

    /**
     * Gets badges
     *
     * @return \FastComments\Client\Model\CommentUserBadgeInfo[]|null
     */
    public function getBadges()
    {
        return $this->container['badges'];
    }

    /**
     * Sets badges
     *
     * @param \FastComments\Client\Model\CommentUserBadgeInfo[]|null $badges badges
     *
     * @return self
     */
    public function setBadges($badges)
    {
        if (is_null($badges)) {
            array_push($this->openAPINullablesSetToNull, 'badges');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('badges', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['badges'] = $badges;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            array_push($this->openAPINullablesSetToNull, 'domain');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('domain', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets veteran_badge_processed
     *
     * @return string|null
     */
    public function getVeteranBadgeProcessed()
    {
        return $this->container['veteran_badge_processed'];
    }

    /**
     * Sets veteran_badge_processed
     *
     * @param string|null $veteran_badge_processed veteran_badge_processed
     *
     * @return self
     */
    public function setVeteranBadgeProcessed($veteran_badge_processed)
    {
        if (is_null($veteran_badge_processed)) {
            throw new \InvalidArgumentException('non-nullable veteran_badge_processed cannot be null');
        }
        $this->container['veteran_badge_processed'] = $veteran_badge_processed;

        return $this;
    }

    /**
     * Gets moderation_group_ids
     *
     * @return string[]|null
     */
    public function getModerationGroupIds()
    {
        return $this->container['moderation_group_ids'];
    }

    /**
     * Sets moderation_group_ids
     *
     * @param string[]|null $moderation_group_ids moderation_group_ids
     *
     * @return self
     */
    public function setModerationGroupIds($moderation_group_ids)
    {
        if (is_null($moderation_group_ids)) {
            array_push($this->openAPINullablesSetToNull, 'moderation_group_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('moderation_group_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['moderation_group_ids'] = $moderation_group_ids;

        return $this;
    }

    /**
     * Gets did_process_badges
     *
     * @return bool|null
     */
    public function getDidProcessBadges()
    {
        return $this->container['did_process_badges'];
    }

    /**
     * Sets did_process_badges
     *
     * @param bool|null $did_process_badges did_process_badges
     *
     * @return self
     */
    public function setDidProcessBadges($did_process_badges)
    {
        if (is_null($did_process_badges)) {
            throw new \InvalidArgumentException('non-nullable did_process_badges cannot be null');
        }
        $this->container['did_process_badges'] = $did_process_badges;

        return $this;
    }

    /**
     * Gets from_offline_restore
     *
     * @return bool|null
     */
    public function getFromOfflineRestore()
    {
        return $this->container['from_offline_restore'];
    }

    /**
     * Sets from_offline_restore
     *
     * @param bool|null $from_offline_restore from_offline_restore
     *
     * @return self
     */
    public function setFromOfflineRestore($from_offline_restore)
    {
        if (is_null($from_offline_restore)) {
            throw new \InvalidArgumentException('non-nullable from_offline_restore cannot be null');
        }
        $this->container['from_offline_restore'] = $from_offline_restore;

        return $this;
    }

    /**
     * Gets autoplay_job_id
     *
     * @return string|null
     */
    public function getAutoplayJobId()
    {
        return $this->container['autoplay_job_id'];
    }

    /**
     * Sets autoplay_job_id
     *
     * @param string|null $autoplay_job_id autoplay_job_id
     *
     * @return self
     */
    public function setAutoplayJobId($autoplay_job_id)
    {
        if (is_null($autoplay_job_id)) {
            throw new \InvalidArgumentException('non-nullable autoplay_job_id cannot be null');
        }
        $this->container['autoplay_job_id'] = $autoplay_job_id;

        return $this;
    }

    /**
     * Gets autoplay_delay_ms
     *
     * @return int|null
     */
    public function getAutoplayDelayMs()
    {
        return $this->container['autoplay_delay_ms'];
    }

    /**
     * Sets autoplay_delay_ms
     *
     * @param int|null $autoplay_delay_ms autoplay_delay_ms
     *
     * @return self
     */
    public function setAutoplayDelayMs($autoplay_delay_ms)
    {
        if (is_null($autoplay_delay_ms)) {
            throw new \InvalidArgumentException('non-nullable autoplay_delay_ms cannot be null');
        }
        $this->container['autoplay_delay_ms'] = $autoplay_delay_ms;

        return $this;
    }

    /**
     * Gets feedback_ids
     *
     * @return string[]|null
     */
    public function getFeedbackIds()
    {
        return $this->container['feedback_ids'];
    }

    /**
     * Sets feedback_ids
     *
     * @param string[]|null $feedback_ids feedback_ids
     *
     * @return self
     */
    public function setFeedbackIds($feedback_ids)
    {
        if (is_null($feedback_ids)) {
            throw new \InvalidArgumentException('non-nullable feedback_ids cannot be null');
        }
        $this->container['feedback_ids'] = $feedback_ids;

        return $this;
    }

    /**
     * Gets logs
     *
     * @return array[]|null
     */
    public function getLogs()
    {
        return $this->container['logs'];
    }

    /**
     * Sets logs
     *
     * @param array[]|null $logs logs
     *
     * @return self
     */
    public function setLogs($logs)
    {
        if (is_null($logs)) {
            array_push($this->openAPINullablesSetToNull, 'logs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logs'] = $logs;

        return $this;
    }

    /**
     * Gets group_ids
     *
     * @return string[]|null
     */
    public function getGroupIds()
    {
        return $this->container['group_ids'];
    }

    /**
     * Sets group_ids
     *
     * @param string[]|null $group_ids group_ids
     *
     * @return self
     */
    public function setGroupIds($group_ids)
    {
        if (is_null($group_ids)) {
            array_push($this->openAPINullablesSetToNull, 'group_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('group_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['group_ids'] = $group_ids;

        return $this;
    }

    /**
     * Gets view_count
     *
     * @return float|null
     */
    public function getViewCount()
    {
        return $this->container['view_count'];
    }

    /**
     * Sets view_count
     *
     * @param float|null $view_count view_count
     *
     * @return self
     */
    public function setViewCount($view_count)
    {
        if (is_null($view_count)) {
            array_push($this->openAPINullablesSetToNull, 'view_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('view_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['view_count'] = $view_count;

        return $this;
    }

    /**
     * Gets requires_verification
     *
     * @return bool|null
     */
    public function getRequiresVerification()
    {
        return $this->container['requires_verification'];
    }

    /**
     * Sets requires_verification
     *
     * @param bool|null $requires_verification requires_verification
     *
     * @return self
     */
    public function setRequiresVerification($requires_verification)
    {
        if (is_null($requires_verification)) {
            throw new \InvalidArgumentException('non-nullable requires_verification cannot be null');
        }
        $this->container['requires_verification'] = $requires_verification;

        return $this;
    }

    /**
     * Gets edit_key
     *
     * @return string|null
     */
    public function getEditKey()
    {
        return $this->container['edit_key'];
    }

    /**
     * Sets edit_key
     *
     * @param string|null $edit_key edit_key
     *
     * @return self
     */
    public function setEditKey($edit_key)
    {
        if (is_null($edit_key)) {
            throw new \InvalidArgumentException('non-nullable edit_key cannot be null');
        }
        $this->container['edit_key'] = $edit_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


