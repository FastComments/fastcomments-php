<?php
/**
 * PickUserNotificationIdOrUrlIdOrUrlOrPageTitleOrRelatedObjectTypeOrRelatedObjectIdOrViewedOrSentOrCreatedAtOrTypeOrFromCommentIdOrFromUserNameOrFromUserIdOrFromUserAvatarSrcOrOptedOut
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FastComments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * fastcomments
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@fastcomments.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FastComments\Client\Model;

use \ArrayAccess;
use \FastComments\Client\ObjectSerializer;

/**
 * PickUserNotificationIdOrUrlIdOrUrlOrPageTitleOrRelatedObjectTypeOrRelatedObjectIdOrViewedOrSentOrCreatedAtOrTypeOrFromCommentIdOrFromUserNameOrFromUserIdOrFromUserAvatarSrcOrOptedOut Class Doc Comment
 *
 * @category Class
 * @description From T, pick a set of properties whose keys are in the union K
 * @package  FastComments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PickUserNotificationIdOrUrlIdOrUrlOrPageTitleOrRelatedObjectTypeOrRelatedObjectIdOrViewedOrSentOrCreatedAtOrTypeOrFromCommentIdOrFromUserNameOrFromUserIdOrFromUserAvatarSrcOrOptedOut implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Pick_UserNotification._id-or-urlId-or-url-or-pageTitle-or-relatedObjectType-or-relatedObjectId-or-viewed-or-sent-or-createdAt-or-type-or-fromCommentId-or-fromUserName-or-fromUserId-or-fromUserAvatarSrc-or-optedOut_';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_id' => 'string',
        'url_id' => 'string',
        'url' => 'string',
        'page_title' => 'string',
        'related_object_type' => 'float',
        'related_object_id' => 'string',
        'viewed' => 'bool',
        'sent' => 'bool',
        'created_at' => '\DateTime',
        'type' => '\FastComments\Client\Model\NotificationType',
        'from_comment_id' => 'string',
        'from_user_name' => 'string',
        'from_user_id' => 'string',
        'from_user_avatar_src' => 'string',
        'opted_out' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_id' => null,
        'url_id' => null,
        'url' => null,
        'page_title' => null,
        'related_object_type' => 'double',
        'related_object_id' => null,
        'viewed' => null,
        'sent' => null,
        'created_at' => 'date-time',
        'type' => null,
        'from_comment_id' => null,
        'from_user_name' => null,
        'from_user_id' => null,
        'from_user_avatar_src' => null,
        'opted_out' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_id' => false,
        'url_id' => false,
        'url' => false,
        'page_title' => false,
        'related_object_type' => false,
        'related_object_id' => false,
        'viewed' => false,
        'sent' => false,
        'created_at' => false,
        'type' => false,
        'from_comment_id' => false,
        'from_user_name' => false,
        'from_user_id' => false,
        'from_user_avatar_src' => false,
        'opted_out' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'url_id' => 'urlId',
        'url' => 'url',
        'page_title' => 'pageTitle',
        'related_object_type' => 'relatedObjectType',
        'related_object_id' => 'relatedObjectId',
        'viewed' => 'viewed',
        'sent' => 'sent',
        'created_at' => 'createdAt',
        'type' => 'type',
        'from_comment_id' => 'fromCommentId',
        'from_user_name' => 'fromUserName',
        'from_user_id' => 'fromUserId',
        'from_user_avatar_src' => 'fromUserAvatarSrc',
        'opted_out' => 'optedOut'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'url_id' => 'setUrlId',
        'url' => 'setUrl',
        'page_title' => 'setPageTitle',
        'related_object_type' => 'setRelatedObjectType',
        'related_object_id' => 'setRelatedObjectId',
        'viewed' => 'setViewed',
        'sent' => 'setSent',
        'created_at' => 'setCreatedAt',
        'type' => 'setType',
        'from_comment_id' => 'setFromCommentId',
        'from_user_name' => 'setFromUserName',
        'from_user_id' => 'setFromUserId',
        'from_user_avatar_src' => 'setFromUserAvatarSrc',
        'opted_out' => 'setOptedOut'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'url_id' => 'getUrlId',
        'url' => 'getUrl',
        'page_title' => 'getPageTitle',
        'related_object_type' => 'getRelatedObjectType',
        'related_object_id' => 'getRelatedObjectId',
        'viewed' => 'getViewed',
        'sent' => 'getSent',
        'created_at' => 'getCreatedAt',
        'type' => 'getType',
        'from_comment_id' => 'getFromCommentId',
        'from_user_name' => 'getFromUserName',
        'from_user_id' => 'getFromUserId',
        'from_user_avatar_src' => 'getFromUserAvatarSrc',
        'opted_out' => 'getOptedOut'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('_id', $data ?? [], null);
        $this->setIfExists('url_id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('page_title', $data ?? [], null);
        $this->setIfExists('related_object_type', $data ?? [], null);
        $this->setIfExists('related_object_id', $data ?? [], null);
        $this->setIfExists('viewed', $data ?? [], null);
        $this->setIfExists('sent', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('from_comment_id', $data ?? [], null);
        $this->setIfExists('from_user_name', $data ?? [], null);
        $this->setIfExists('from_user_id', $data ?? [], null);
        $this->setIfExists('from_user_avatar_src', $data ?? [], null);
        $this->setIfExists('opted_out', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['_id'] === null) {
            $invalidProperties[] = "'_id' can't be null";
        }
        if ($this->container['url_id'] === null) {
            $invalidProperties[] = "'url_id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['related_object_type'] === null) {
            $invalidProperties[] = "'related_object_type' can't be null";
        }
        if ($this->container['related_object_id'] === null) {
            $invalidProperties[] = "'related_object_id' can't be null";
        }
        if ($this->container['viewed'] === null) {
            $invalidProperties[] = "'viewed' can't be null";
        }
        if ($this->container['sent'] === null) {
            $invalidProperties[] = "'sent' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['from_user_name'] === null) {
            $invalidProperties[] = "'from_user_name' can't be null";
        }
        if ($this->container['from_user_id'] === null) {
            $invalidProperties[] = "'from_user_id' can't be null";
        }
        if ($this->container['opted_out'] === null) {
            $invalidProperties[] = "'opted_out' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string $_id _id
     *
     * @return self
     */
    public function setId($_id)
    {
        if (is_null($_id)) {
            throw new \InvalidArgumentException('non-nullable _id cannot be null');
        }
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets url_id
     *
     * @return string
     */
    public function getUrlId()
    {
        return $this->container['url_id'];
    }

    /**
     * Sets url_id
     *
     * @param string $url_id url_id
     *
     * @return self
     */
    public function setUrlId($url_id)
    {
        if (is_null($url_id)) {
            throw new \InvalidArgumentException('non-nullable url_id cannot be null');
        }
        $this->container['url_id'] = $url_id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets page_title
     *
     * @return string|null
     */
    public function getPageTitle()
    {
        return $this->container['page_title'];
    }

    /**
     * Sets page_title
     *
     * @param string|null $page_title page_title
     *
     * @return self
     */
    public function setPageTitle($page_title)
    {
        if (is_null($page_title)) {
            throw new \InvalidArgumentException('non-nullable page_title cannot be null');
        }
        $this->container['page_title'] = $page_title;

        return $this;
    }

    /**
     * Gets related_object_type
     *
     * @return float
     */
    public function getRelatedObjectType()
    {
        return $this->container['related_object_type'];
    }

    /**
     * Sets related_object_type
     *
     * @param float $related_object_type related_object_type
     *
     * @return self
     */
    public function setRelatedObjectType($related_object_type)
    {
        if (is_null($related_object_type)) {
            throw new \InvalidArgumentException('non-nullable related_object_type cannot be null');
        }
        $this->container['related_object_type'] = $related_object_type;

        return $this;
    }

    /**
     * Gets related_object_id
     *
     * @return string
     */
    public function getRelatedObjectId()
    {
        return $this->container['related_object_id'];
    }

    /**
     * Sets related_object_id
     *
     * @param string $related_object_id related_object_id
     *
     * @return self
     */
    public function setRelatedObjectId($related_object_id)
    {
        if (is_null($related_object_id)) {
            throw new \InvalidArgumentException('non-nullable related_object_id cannot be null');
        }
        $this->container['related_object_id'] = $related_object_id;

        return $this;
    }

    /**
     * Gets viewed
     *
     * @return bool
     */
    public function getViewed()
    {
        return $this->container['viewed'];
    }

    /**
     * Sets viewed
     *
     * @param bool $viewed viewed
     *
     * @return self
     */
    public function setViewed($viewed)
    {
        if (is_null($viewed)) {
            throw new \InvalidArgumentException('non-nullable viewed cannot be null');
        }
        $this->container['viewed'] = $viewed;

        return $this;
    }

    /**
     * Gets sent
     *
     * @return bool
     */
    public function getSent()
    {
        return $this->container['sent'];
    }

    /**
     * Sets sent
     *
     * @param bool $sent sent
     *
     * @return self
     */
    public function setSent($sent)
    {
        if (is_null($sent)) {
            throw new \InvalidArgumentException('non-nullable sent cannot be null');
        }
        $this->container['sent'] = $sent;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \FastComments\Client\Model\NotificationType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \FastComments\Client\Model\NotificationType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets from_comment_id
     *
     * @return string|null
     */
    public function getFromCommentId()
    {
        return $this->container['from_comment_id'];
    }

    /**
     * Sets from_comment_id
     *
     * @param string|null $from_comment_id from_comment_id
     *
     * @return self
     */
    public function setFromCommentId($from_comment_id)
    {
        if (is_null($from_comment_id)) {
            throw new \InvalidArgumentException('non-nullable from_comment_id cannot be null');
        }
        $this->container['from_comment_id'] = $from_comment_id;

        return $this;
    }

    /**
     * Gets from_user_name
     *
     * @return string
     */
    public function getFromUserName()
    {
        return $this->container['from_user_name'];
    }

    /**
     * Sets from_user_name
     *
     * @param string $from_user_name from_user_name
     *
     * @return self
     */
    public function setFromUserName($from_user_name)
    {
        if (is_null($from_user_name)) {
            throw new \InvalidArgumentException('non-nullable from_user_name cannot be null');
        }
        $this->container['from_user_name'] = $from_user_name;

        return $this;
    }

    /**
     * Gets from_user_id
     *
     * @return string
     */
    public function getFromUserId()
    {
        return $this->container['from_user_id'];
    }

    /**
     * Sets from_user_id
     *
     * @param string $from_user_id from_user_id
     *
     * @return self
     */
    public function setFromUserId($from_user_id)
    {
        if (is_null($from_user_id)) {
            throw new \InvalidArgumentException('non-nullable from_user_id cannot be null');
        }
        $this->container['from_user_id'] = $from_user_id;

        return $this;
    }

    /**
     * Gets from_user_avatar_src
     *
     * @return string|null
     */
    public function getFromUserAvatarSrc()
    {
        return $this->container['from_user_avatar_src'];
    }

    /**
     * Sets from_user_avatar_src
     *
     * @param string|null $from_user_avatar_src from_user_avatar_src
     *
     * @return self
     */
    public function setFromUserAvatarSrc($from_user_avatar_src)
    {
        if (is_null($from_user_avatar_src)) {
            throw new \InvalidArgumentException('non-nullable from_user_avatar_src cannot be null');
        }
        $this->container['from_user_avatar_src'] = $from_user_avatar_src;

        return $this;
    }

    /**
     * Gets opted_out
     *
     * @return bool
     */
    public function getOptedOut()
    {
        return $this->container['opted_out'];
    }

    /**
     * Sets opted_out
     *
     * @param bool $opted_out opted_out
     *
     * @return self
     */
    public function setOptedOut($opted_out)
    {
        if (is_null($opted_out)) {
            throw new \InvalidArgumentException('non-nullable opted_out cannot be null');
        }
        $this->container['opted_out'] = $opted_out;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


