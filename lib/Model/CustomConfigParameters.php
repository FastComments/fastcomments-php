<?php
/**
 * CustomConfigParameters
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FastComments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * fastcomments
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@fastcomments.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FastComments\Client\Model;

use \ArrayAccess;
use \FastComments\Client\ObjectSerializer;

/**
 * CustomConfigParameters Class Doc Comment
 *
 * @category Class
 * @package  FastComments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomConfigParameters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomConfigParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'absolute_and_relative_dates' => 'bool',
        'absolute_dates' => 'bool',
        'allow_anon' => 'bool',
        'allow_anon_flag' => 'bool',
        'allow_anon_votes' => 'bool',
        'allowed_languages' => 'string[]',
        'collapse_replies' => 'bool',
        'comment_count_format' => 'string',
        'comment_html_rendering_mode' => '\FastComments\Client\Model\CommentHTMLRenderingMode',
        'comment_thread_delete_mode' => '\FastComments\Client\Model\CommentThreadDeletionMode',
        'commenter_name_format' => '\FastComments\Client\Model\CommenterNameFormats',
        'count_above_toggle' => 'float',
        'custom_css' => 'string',
        'default_avatar_src' => 'string',
        'default_sort_direction' => '\FastComments\Client\Model\SortDirections',
        'default_username' => 'string',
        'disable_auto_admin_migration' => 'bool',
        'disable_auto_hash_tag_creation' => 'bool',
        'disable_blocking' => 'bool',
        'disable_commenter_comment_delete' => 'bool',
        'disable_commenter_comment_edit' => 'bool',
        'disable_email_inputs' => 'bool',
        'disable_live_commenting' => 'bool',
        'disable_notification_bell' => 'bool',
        'disable_profiles' => 'bool',
        'disable_success_message' => 'bool',
        'disable_toolbar' => 'bool',
        'disable_unverified_label' => 'bool',
        'disable_voting' => 'bool',
        'enable_commenter_links' => 'bool',
        'enable_search' => 'bool',
        'enable_spoilers' => 'bool',
        'enable_third_party_cookie_bypass' => 'bool',
        'enable_view_counts' => 'bool',
        'enable_vote_list' => 'bool',
        'enable_wysiwyg' => 'bool',
        'gif_rating' => '\FastComments\Client\Model\GifRating',
        'has_dark_background' => 'bool',
        'header_html' => 'string',
        'hide_avatars' => 'bool',
        'hide_comments_under_count_text_format' => 'string',
        'input_after_comments' => 'bool',
        'limit_comments_by_groups' => 'bool',
        'locale' => 'string',
        'max_comment_character_length' => 'float',
        'max_comment_created_count_pupm' => 'float',
        'no_custom_config' => 'bool',
        'no_image_uploads' => 'bool',
        'no_styles' => 'bool',
        'page_size' => 'float',
        'readonly' => 'bool',
        'require_sso' => 'bool',
        'sso_sec_lvl' => '\FastComments\Client\Model\SSOSecurityLevel',
        'restricted_link_domains' => 'string[]',
        'show_comment_save_success' => 'bool',
        'show_live_right_away' => 'bool',
        'show_question' => 'bool',
        'spam_rules' => '\FastComments\Client\Model\SpamRule[]',
        'translations' => 'array<string,string>',
        'use_show_comments_toggle' => 'bool',
        'use_single_line_comment_input' => 'bool',
        'vote_style' => '\FastComments\Client\Model\VoteStyle',
        'widget_question_id' => 'string',
        'widget_question_results_style' => '\FastComments\Client\Model\CommentQuestionResultsRenderingType',
        'widget_question_style' => '\FastComments\Client\Model\QuestionRenderingType',
        'widget_question_when_to_save' => '\FastComments\Client\Model\QuestionWhenSave',
        'widget_questions_required' => '\FastComments\Client\Model\CommentQuestionsRequired',
        'widget_sub_question_visibility' => '\FastComments\Client\Model\QuestionSubQuestionVisibility',
        'wrap' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'absolute_and_relative_dates' => null,
        'absolute_dates' => null,
        'allow_anon' => null,
        'allow_anon_flag' => null,
        'allow_anon_votes' => null,
        'allowed_languages' => null,
        'collapse_replies' => null,
        'comment_count_format' => null,
        'comment_html_rendering_mode' => null,
        'comment_thread_delete_mode' => null,
        'commenter_name_format' => null,
        'count_above_toggle' => 'double',
        'custom_css' => null,
        'default_avatar_src' => null,
        'default_sort_direction' => null,
        'default_username' => null,
        'disable_auto_admin_migration' => null,
        'disable_auto_hash_tag_creation' => null,
        'disable_blocking' => null,
        'disable_commenter_comment_delete' => null,
        'disable_commenter_comment_edit' => null,
        'disable_email_inputs' => null,
        'disable_live_commenting' => null,
        'disable_notification_bell' => null,
        'disable_profiles' => null,
        'disable_success_message' => null,
        'disable_toolbar' => null,
        'disable_unverified_label' => null,
        'disable_voting' => null,
        'enable_commenter_links' => null,
        'enable_search' => null,
        'enable_spoilers' => null,
        'enable_third_party_cookie_bypass' => null,
        'enable_view_counts' => null,
        'enable_vote_list' => null,
        'enable_wysiwyg' => null,
        'gif_rating' => null,
        'has_dark_background' => null,
        'header_html' => null,
        'hide_avatars' => null,
        'hide_comments_under_count_text_format' => null,
        'input_after_comments' => null,
        'limit_comments_by_groups' => null,
        'locale' => null,
        'max_comment_character_length' => 'double',
        'max_comment_created_count_pupm' => 'double',
        'no_custom_config' => null,
        'no_image_uploads' => null,
        'no_styles' => null,
        'page_size' => 'double',
        'readonly' => null,
        'require_sso' => null,
        'sso_sec_lvl' => null,
        'restricted_link_domains' => null,
        'show_comment_save_success' => null,
        'show_live_right_away' => null,
        'show_question' => null,
        'spam_rules' => null,
        'translations' => null,
        'use_show_comments_toggle' => null,
        'use_single_line_comment_input' => null,
        'vote_style' => null,
        'widget_question_id' => null,
        'widget_question_results_style' => null,
        'widget_question_style' => null,
        'widget_question_when_to_save' => null,
        'widget_questions_required' => null,
        'widget_sub_question_visibility' => null,
        'wrap' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'absolute_and_relative_dates' => false,
        'absolute_dates' => false,
        'allow_anon' => false,
        'allow_anon_flag' => false,
        'allow_anon_votes' => false,
        'allowed_languages' => true,
        'collapse_replies' => false,
        'comment_count_format' => true,
        'comment_html_rendering_mode' => false,
        'comment_thread_delete_mode' => true,
        'commenter_name_format' => true,
        'count_above_toggle' => false,
        'custom_css' => true,
        'default_avatar_src' => true,
        'default_sort_direction' => true,
        'default_username' => true,
        'disable_auto_admin_migration' => false,
        'disable_auto_hash_tag_creation' => false,
        'disable_blocking' => false,
        'disable_commenter_comment_delete' => false,
        'disable_commenter_comment_edit' => false,
        'disable_email_inputs' => false,
        'disable_live_commenting' => false,
        'disable_notification_bell' => false,
        'disable_profiles' => false,
        'disable_success_message' => false,
        'disable_toolbar' => false,
        'disable_unverified_label' => false,
        'disable_voting' => false,
        'enable_commenter_links' => false,
        'enable_search' => false,
        'enable_spoilers' => false,
        'enable_third_party_cookie_bypass' => false,
        'enable_view_counts' => false,
        'enable_vote_list' => false,
        'enable_wysiwyg' => false,
        'gif_rating' => false,
        'has_dark_background' => false,
        'header_html' => true,
        'hide_avatars' => false,
        'hide_comments_under_count_text_format' => true,
        'input_after_comments' => false,
        'limit_comments_by_groups' => false,
        'locale' => true,
        'max_comment_character_length' => true,
        'max_comment_created_count_pupm' => true,
        'no_custom_config' => false,
        'no_image_uploads' => false,
        'no_styles' => false,
        'page_size' => true,
        'readonly' => false,
        'require_sso' => false,
        'sso_sec_lvl' => false,
        'restricted_link_domains' => true,
        'show_comment_save_success' => false,
        'show_live_right_away' => false,
        'show_question' => false,
        'spam_rules' => false,
        'translations' => true,
        'use_show_comments_toggle' => false,
        'use_single_line_comment_input' => false,
        'vote_style' => false,
        'widget_question_id' => false,
        'widget_question_results_style' => false,
        'widget_question_style' => false,
        'widget_question_when_to_save' => false,
        'widget_questions_required' => false,
        'widget_sub_question_visibility' => false,
        'wrap' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'absolute_and_relative_dates' => 'absoluteAndRelativeDates',
        'absolute_dates' => 'absoluteDates',
        'allow_anon' => 'allowAnon',
        'allow_anon_flag' => 'allowAnonFlag',
        'allow_anon_votes' => 'allowAnonVotes',
        'allowed_languages' => 'allowedLanguages',
        'collapse_replies' => 'collapseReplies',
        'comment_count_format' => 'commentCountFormat',
        'comment_html_rendering_mode' => 'commentHTMLRenderingMode',
        'comment_thread_delete_mode' => 'commentThreadDeleteMode',
        'commenter_name_format' => 'commenterNameFormat',
        'count_above_toggle' => 'countAboveToggle',
        'custom_css' => 'customCSS',
        'default_avatar_src' => 'defaultAvatarSrc',
        'default_sort_direction' => 'defaultSortDirection',
        'default_username' => 'defaultUsername',
        'disable_auto_admin_migration' => 'disableAutoAdminMigration',
        'disable_auto_hash_tag_creation' => 'disableAutoHashTagCreation',
        'disable_blocking' => 'disableBlocking',
        'disable_commenter_comment_delete' => 'disableCommenterCommentDelete',
        'disable_commenter_comment_edit' => 'disableCommenterCommentEdit',
        'disable_email_inputs' => 'disableEmailInputs',
        'disable_live_commenting' => 'disableLiveCommenting',
        'disable_notification_bell' => 'disableNotificationBell',
        'disable_profiles' => 'disableProfiles',
        'disable_success_message' => 'disableSuccessMessage',
        'disable_toolbar' => 'disableToolbar',
        'disable_unverified_label' => 'disableUnverifiedLabel',
        'disable_voting' => 'disableVoting',
        'enable_commenter_links' => 'enableCommenterLinks',
        'enable_search' => 'enableSearch',
        'enable_spoilers' => 'enableSpoilers',
        'enable_third_party_cookie_bypass' => 'enableThirdPartyCookieBypass',
        'enable_view_counts' => 'enableViewCounts',
        'enable_vote_list' => 'enableVoteList',
        'enable_wysiwyg' => 'enableWYSIWYG',
        'gif_rating' => 'gifRating',
        'has_dark_background' => 'hasDarkBackground',
        'header_html' => 'headerHTML',
        'hide_avatars' => 'hideAvatars',
        'hide_comments_under_count_text_format' => 'hideCommentsUnderCountTextFormat',
        'input_after_comments' => 'inputAfterComments',
        'limit_comments_by_groups' => 'limitCommentsByGroups',
        'locale' => 'locale',
        'max_comment_character_length' => 'maxCommentCharacterLength',
        'max_comment_created_count_pupm' => 'maxCommentCreatedCountPUPM',
        'no_custom_config' => 'noCustomConfig',
        'no_image_uploads' => 'noImageUploads',
        'no_styles' => 'noStyles',
        'page_size' => 'pageSize',
        'readonly' => 'readonly',
        'require_sso' => 'requireSSO',
        'sso_sec_lvl' => 'ssoSecLvl',
        'restricted_link_domains' => 'restrictedLinkDomains',
        'show_comment_save_success' => 'showCommentSaveSuccess',
        'show_live_right_away' => 'showLiveRightAway',
        'show_question' => 'showQuestion',
        'spam_rules' => 'spamRules',
        'translations' => 'translations',
        'use_show_comments_toggle' => 'useShowCommentsToggle',
        'use_single_line_comment_input' => 'useSingleLineCommentInput',
        'vote_style' => 'voteStyle',
        'widget_question_id' => 'widgetQuestionId',
        'widget_question_results_style' => 'widgetQuestionResultsStyle',
        'widget_question_style' => 'widgetQuestionStyle',
        'widget_question_when_to_save' => 'widgetQuestionWhenToSave',
        'widget_questions_required' => 'widgetQuestionsRequired',
        'widget_sub_question_visibility' => 'widgetSubQuestionVisibility',
        'wrap' => 'wrap'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'absolute_and_relative_dates' => 'setAbsoluteAndRelativeDates',
        'absolute_dates' => 'setAbsoluteDates',
        'allow_anon' => 'setAllowAnon',
        'allow_anon_flag' => 'setAllowAnonFlag',
        'allow_anon_votes' => 'setAllowAnonVotes',
        'allowed_languages' => 'setAllowedLanguages',
        'collapse_replies' => 'setCollapseReplies',
        'comment_count_format' => 'setCommentCountFormat',
        'comment_html_rendering_mode' => 'setCommentHtmlRenderingMode',
        'comment_thread_delete_mode' => 'setCommentThreadDeleteMode',
        'commenter_name_format' => 'setCommenterNameFormat',
        'count_above_toggle' => 'setCountAboveToggle',
        'custom_css' => 'setCustomCss',
        'default_avatar_src' => 'setDefaultAvatarSrc',
        'default_sort_direction' => 'setDefaultSortDirection',
        'default_username' => 'setDefaultUsername',
        'disable_auto_admin_migration' => 'setDisableAutoAdminMigration',
        'disable_auto_hash_tag_creation' => 'setDisableAutoHashTagCreation',
        'disable_blocking' => 'setDisableBlocking',
        'disable_commenter_comment_delete' => 'setDisableCommenterCommentDelete',
        'disable_commenter_comment_edit' => 'setDisableCommenterCommentEdit',
        'disable_email_inputs' => 'setDisableEmailInputs',
        'disable_live_commenting' => 'setDisableLiveCommenting',
        'disable_notification_bell' => 'setDisableNotificationBell',
        'disable_profiles' => 'setDisableProfiles',
        'disable_success_message' => 'setDisableSuccessMessage',
        'disable_toolbar' => 'setDisableToolbar',
        'disable_unverified_label' => 'setDisableUnverifiedLabel',
        'disable_voting' => 'setDisableVoting',
        'enable_commenter_links' => 'setEnableCommenterLinks',
        'enable_search' => 'setEnableSearch',
        'enable_spoilers' => 'setEnableSpoilers',
        'enable_third_party_cookie_bypass' => 'setEnableThirdPartyCookieBypass',
        'enable_view_counts' => 'setEnableViewCounts',
        'enable_vote_list' => 'setEnableVoteList',
        'enable_wysiwyg' => 'setEnableWysiwyg',
        'gif_rating' => 'setGifRating',
        'has_dark_background' => 'setHasDarkBackground',
        'header_html' => 'setHeaderHtml',
        'hide_avatars' => 'setHideAvatars',
        'hide_comments_under_count_text_format' => 'setHideCommentsUnderCountTextFormat',
        'input_after_comments' => 'setInputAfterComments',
        'limit_comments_by_groups' => 'setLimitCommentsByGroups',
        'locale' => 'setLocale',
        'max_comment_character_length' => 'setMaxCommentCharacterLength',
        'max_comment_created_count_pupm' => 'setMaxCommentCreatedCountPupm',
        'no_custom_config' => 'setNoCustomConfig',
        'no_image_uploads' => 'setNoImageUploads',
        'no_styles' => 'setNoStyles',
        'page_size' => 'setPageSize',
        'readonly' => 'setReadonly',
        'require_sso' => 'setRequireSso',
        'sso_sec_lvl' => 'setSsoSecLvl',
        'restricted_link_domains' => 'setRestrictedLinkDomains',
        'show_comment_save_success' => 'setShowCommentSaveSuccess',
        'show_live_right_away' => 'setShowLiveRightAway',
        'show_question' => 'setShowQuestion',
        'spam_rules' => 'setSpamRules',
        'translations' => 'setTranslations',
        'use_show_comments_toggle' => 'setUseShowCommentsToggle',
        'use_single_line_comment_input' => 'setUseSingleLineCommentInput',
        'vote_style' => 'setVoteStyle',
        'widget_question_id' => 'setWidgetQuestionId',
        'widget_question_results_style' => 'setWidgetQuestionResultsStyle',
        'widget_question_style' => 'setWidgetQuestionStyle',
        'widget_question_when_to_save' => 'setWidgetQuestionWhenToSave',
        'widget_questions_required' => 'setWidgetQuestionsRequired',
        'widget_sub_question_visibility' => 'setWidgetSubQuestionVisibility',
        'wrap' => 'setWrap'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'absolute_and_relative_dates' => 'getAbsoluteAndRelativeDates',
        'absolute_dates' => 'getAbsoluteDates',
        'allow_anon' => 'getAllowAnon',
        'allow_anon_flag' => 'getAllowAnonFlag',
        'allow_anon_votes' => 'getAllowAnonVotes',
        'allowed_languages' => 'getAllowedLanguages',
        'collapse_replies' => 'getCollapseReplies',
        'comment_count_format' => 'getCommentCountFormat',
        'comment_html_rendering_mode' => 'getCommentHtmlRenderingMode',
        'comment_thread_delete_mode' => 'getCommentThreadDeleteMode',
        'commenter_name_format' => 'getCommenterNameFormat',
        'count_above_toggle' => 'getCountAboveToggle',
        'custom_css' => 'getCustomCss',
        'default_avatar_src' => 'getDefaultAvatarSrc',
        'default_sort_direction' => 'getDefaultSortDirection',
        'default_username' => 'getDefaultUsername',
        'disable_auto_admin_migration' => 'getDisableAutoAdminMigration',
        'disable_auto_hash_tag_creation' => 'getDisableAutoHashTagCreation',
        'disable_blocking' => 'getDisableBlocking',
        'disable_commenter_comment_delete' => 'getDisableCommenterCommentDelete',
        'disable_commenter_comment_edit' => 'getDisableCommenterCommentEdit',
        'disable_email_inputs' => 'getDisableEmailInputs',
        'disable_live_commenting' => 'getDisableLiveCommenting',
        'disable_notification_bell' => 'getDisableNotificationBell',
        'disable_profiles' => 'getDisableProfiles',
        'disable_success_message' => 'getDisableSuccessMessage',
        'disable_toolbar' => 'getDisableToolbar',
        'disable_unverified_label' => 'getDisableUnverifiedLabel',
        'disable_voting' => 'getDisableVoting',
        'enable_commenter_links' => 'getEnableCommenterLinks',
        'enable_search' => 'getEnableSearch',
        'enable_spoilers' => 'getEnableSpoilers',
        'enable_third_party_cookie_bypass' => 'getEnableThirdPartyCookieBypass',
        'enable_view_counts' => 'getEnableViewCounts',
        'enable_vote_list' => 'getEnableVoteList',
        'enable_wysiwyg' => 'getEnableWysiwyg',
        'gif_rating' => 'getGifRating',
        'has_dark_background' => 'getHasDarkBackground',
        'header_html' => 'getHeaderHtml',
        'hide_avatars' => 'getHideAvatars',
        'hide_comments_under_count_text_format' => 'getHideCommentsUnderCountTextFormat',
        'input_after_comments' => 'getInputAfterComments',
        'limit_comments_by_groups' => 'getLimitCommentsByGroups',
        'locale' => 'getLocale',
        'max_comment_character_length' => 'getMaxCommentCharacterLength',
        'max_comment_created_count_pupm' => 'getMaxCommentCreatedCountPupm',
        'no_custom_config' => 'getNoCustomConfig',
        'no_image_uploads' => 'getNoImageUploads',
        'no_styles' => 'getNoStyles',
        'page_size' => 'getPageSize',
        'readonly' => 'getReadonly',
        'require_sso' => 'getRequireSso',
        'sso_sec_lvl' => 'getSsoSecLvl',
        'restricted_link_domains' => 'getRestrictedLinkDomains',
        'show_comment_save_success' => 'getShowCommentSaveSuccess',
        'show_live_right_away' => 'getShowLiveRightAway',
        'show_question' => 'getShowQuestion',
        'spam_rules' => 'getSpamRules',
        'translations' => 'getTranslations',
        'use_show_comments_toggle' => 'getUseShowCommentsToggle',
        'use_single_line_comment_input' => 'getUseSingleLineCommentInput',
        'vote_style' => 'getVoteStyle',
        'widget_question_id' => 'getWidgetQuestionId',
        'widget_question_results_style' => 'getWidgetQuestionResultsStyle',
        'widget_question_style' => 'getWidgetQuestionStyle',
        'widget_question_when_to_save' => 'getWidgetQuestionWhenToSave',
        'widget_questions_required' => 'getWidgetQuestionsRequired',
        'widget_sub_question_visibility' => 'getWidgetSubQuestionVisibility',
        'wrap' => 'getWrap'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('absolute_and_relative_dates', $data ?? [], null);
        $this->setIfExists('absolute_dates', $data ?? [], null);
        $this->setIfExists('allow_anon', $data ?? [], null);
        $this->setIfExists('allow_anon_flag', $data ?? [], null);
        $this->setIfExists('allow_anon_votes', $data ?? [], null);
        $this->setIfExists('allowed_languages', $data ?? [], null);
        $this->setIfExists('collapse_replies', $data ?? [], null);
        $this->setIfExists('comment_count_format', $data ?? [], null);
        $this->setIfExists('comment_html_rendering_mode', $data ?? [], null);
        $this->setIfExists('comment_thread_delete_mode', $data ?? [], null);
        $this->setIfExists('commenter_name_format', $data ?? [], null);
        $this->setIfExists('count_above_toggle', $data ?? [], null);
        $this->setIfExists('custom_css', $data ?? [], null);
        $this->setIfExists('default_avatar_src', $data ?? [], null);
        $this->setIfExists('default_sort_direction', $data ?? [], null);
        $this->setIfExists('default_username', $data ?? [], null);
        $this->setIfExists('disable_auto_admin_migration', $data ?? [], null);
        $this->setIfExists('disable_auto_hash_tag_creation', $data ?? [], null);
        $this->setIfExists('disable_blocking', $data ?? [], null);
        $this->setIfExists('disable_commenter_comment_delete', $data ?? [], null);
        $this->setIfExists('disable_commenter_comment_edit', $data ?? [], null);
        $this->setIfExists('disable_email_inputs', $data ?? [], null);
        $this->setIfExists('disable_live_commenting', $data ?? [], null);
        $this->setIfExists('disable_notification_bell', $data ?? [], null);
        $this->setIfExists('disable_profiles', $data ?? [], null);
        $this->setIfExists('disable_success_message', $data ?? [], null);
        $this->setIfExists('disable_toolbar', $data ?? [], null);
        $this->setIfExists('disable_unverified_label', $data ?? [], null);
        $this->setIfExists('disable_voting', $data ?? [], null);
        $this->setIfExists('enable_commenter_links', $data ?? [], null);
        $this->setIfExists('enable_search', $data ?? [], null);
        $this->setIfExists('enable_spoilers', $data ?? [], null);
        $this->setIfExists('enable_third_party_cookie_bypass', $data ?? [], null);
        $this->setIfExists('enable_view_counts', $data ?? [], null);
        $this->setIfExists('enable_vote_list', $data ?? [], null);
        $this->setIfExists('enable_wysiwyg', $data ?? [], null);
        $this->setIfExists('gif_rating', $data ?? [], null);
        $this->setIfExists('has_dark_background', $data ?? [], null);
        $this->setIfExists('header_html', $data ?? [], null);
        $this->setIfExists('hide_avatars', $data ?? [], null);
        $this->setIfExists('hide_comments_under_count_text_format', $data ?? [], null);
        $this->setIfExists('input_after_comments', $data ?? [], null);
        $this->setIfExists('limit_comments_by_groups', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('max_comment_character_length', $data ?? [], null);
        $this->setIfExists('max_comment_created_count_pupm', $data ?? [], null);
        $this->setIfExists('no_custom_config', $data ?? [], null);
        $this->setIfExists('no_image_uploads', $data ?? [], null);
        $this->setIfExists('no_styles', $data ?? [], null);
        $this->setIfExists('page_size', $data ?? [], null);
        $this->setIfExists('readonly', $data ?? [], null);
        $this->setIfExists('require_sso', $data ?? [], null);
        $this->setIfExists('sso_sec_lvl', $data ?? [], null);
        $this->setIfExists('restricted_link_domains', $data ?? [], null);
        $this->setIfExists('show_comment_save_success', $data ?? [], null);
        $this->setIfExists('show_live_right_away', $data ?? [], null);
        $this->setIfExists('show_question', $data ?? [], null);
        $this->setIfExists('spam_rules', $data ?? [], null);
        $this->setIfExists('translations', $data ?? [], null);
        $this->setIfExists('use_show_comments_toggle', $data ?? [], null);
        $this->setIfExists('use_single_line_comment_input', $data ?? [], null);
        $this->setIfExists('vote_style', $data ?? [], null);
        $this->setIfExists('widget_question_id', $data ?? [], null);
        $this->setIfExists('widget_question_results_style', $data ?? [], null);
        $this->setIfExists('widget_question_style', $data ?? [], null);
        $this->setIfExists('widget_question_when_to_save', $data ?? [], null);
        $this->setIfExists('widget_questions_required', $data ?? [], null);
        $this->setIfExists('widget_sub_question_visibility', $data ?? [], null);
        $this->setIfExists('wrap', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets absolute_and_relative_dates
     *
     * @return bool|null
     */
    public function getAbsoluteAndRelativeDates()
    {
        return $this->container['absolute_and_relative_dates'];
    }

    /**
     * Sets absolute_and_relative_dates
     *
     * @param bool|null $absolute_and_relative_dates absolute_and_relative_dates
     *
     * @return self
     */
    public function setAbsoluteAndRelativeDates($absolute_and_relative_dates)
    {
        if (is_null($absolute_and_relative_dates)) {
            throw new \InvalidArgumentException('non-nullable absolute_and_relative_dates cannot be null');
        }
        $this->container['absolute_and_relative_dates'] = $absolute_and_relative_dates;

        return $this;
    }

    /**
     * Gets absolute_dates
     *
     * @return bool|null
     */
    public function getAbsoluteDates()
    {
        return $this->container['absolute_dates'];
    }

    /**
     * Sets absolute_dates
     *
     * @param bool|null $absolute_dates absolute_dates
     *
     * @return self
     */
    public function setAbsoluteDates($absolute_dates)
    {
        if (is_null($absolute_dates)) {
            throw new \InvalidArgumentException('non-nullable absolute_dates cannot be null');
        }
        $this->container['absolute_dates'] = $absolute_dates;

        return $this;
    }

    /**
     * Gets allow_anon
     *
     * @return bool|null
     */
    public function getAllowAnon()
    {
        return $this->container['allow_anon'];
    }

    /**
     * Sets allow_anon
     *
     * @param bool|null $allow_anon allow_anon
     *
     * @return self
     */
    public function setAllowAnon($allow_anon)
    {
        if (is_null($allow_anon)) {
            throw new \InvalidArgumentException('non-nullable allow_anon cannot be null');
        }
        $this->container['allow_anon'] = $allow_anon;

        return $this;
    }

    /**
     * Gets allow_anon_flag
     *
     * @return bool|null
     */
    public function getAllowAnonFlag()
    {
        return $this->container['allow_anon_flag'];
    }

    /**
     * Sets allow_anon_flag
     *
     * @param bool|null $allow_anon_flag allow_anon_flag
     *
     * @return self
     */
    public function setAllowAnonFlag($allow_anon_flag)
    {
        if (is_null($allow_anon_flag)) {
            throw new \InvalidArgumentException('non-nullable allow_anon_flag cannot be null');
        }
        $this->container['allow_anon_flag'] = $allow_anon_flag;

        return $this;
    }

    /**
     * Gets allow_anon_votes
     *
     * @return bool|null
     */
    public function getAllowAnonVotes()
    {
        return $this->container['allow_anon_votes'];
    }

    /**
     * Sets allow_anon_votes
     *
     * @param bool|null $allow_anon_votes allow_anon_votes
     *
     * @return self
     */
    public function setAllowAnonVotes($allow_anon_votes)
    {
        if (is_null($allow_anon_votes)) {
            throw new \InvalidArgumentException('non-nullable allow_anon_votes cannot be null');
        }
        $this->container['allow_anon_votes'] = $allow_anon_votes;

        return $this;
    }

    /**
     * Gets allowed_languages
     *
     * @return string[]|null
     */
    public function getAllowedLanguages()
    {
        return $this->container['allowed_languages'];
    }

    /**
     * Sets allowed_languages
     *
     * @param string[]|null $allowed_languages allowed_languages
     *
     * @return self
     */
    public function setAllowedLanguages($allowed_languages)
    {
        if (is_null($allowed_languages)) {
            array_push($this->openAPINullablesSetToNull, 'allowed_languages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allowed_languages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allowed_languages'] = $allowed_languages;

        return $this;
    }

    /**
     * Gets collapse_replies
     *
     * @return bool|null
     */
    public function getCollapseReplies()
    {
        return $this->container['collapse_replies'];
    }

    /**
     * Sets collapse_replies
     *
     * @param bool|null $collapse_replies collapse_replies
     *
     * @return self
     */
    public function setCollapseReplies($collapse_replies)
    {
        if (is_null($collapse_replies)) {
            throw new \InvalidArgumentException('non-nullable collapse_replies cannot be null');
        }
        $this->container['collapse_replies'] = $collapse_replies;

        return $this;
    }

    /**
     * Gets comment_count_format
     *
     * @return string|null
     */
    public function getCommentCountFormat()
    {
        return $this->container['comment_count_format'];
    }

    /**
     * Sets comment_count_format
     *
     * @param string|null $comment_count_format comment_count_format
     *
     * @return self
     */
    public function setCommentCountFormat($comment_count_format)
    {
        if (is_null($comment_count_format)) {
            array_push($this->openAPINullablesSetToNull, 'comment_count_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment_count_format', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment_count_format'] = $comment_count_format;

        return $this;
    }

    /**
     * Gets comment_html_rendering_mode
     *
     * @return \FastComments\Client\Model\CommentHTMLRenderingMode|null
     */
    public function getCommentHtmlRenderingMode()
    {
        return $this->container['comment_html_rendering_mode'];
    }

    /**
     * Sets comment_html_rendering_mode
     *
     * @param \FastComments\Client\Model\CommentHTMLRenderingMode|null $comment_html_rendering_mode comment_html_rendering_mode
     *
     * @return self
     */
    public function setCommentHtmlRenderingMode($comment_html_rendering_mode)
    {
        if (is_null($comment_html_rendering_mode)) {
            throw new \InvalidArgumentException('non-nullable comment_html_rendering_mode cannot be null');
        }
        $this->container['comment_html_rendering_mode'] = $comment_html_rendering_mode;

        return $this;
    }

    /**
     * Gets comment_thread_delete_mode
     *
     * @return \FastComments\Client\Model\CommentThreadDeletionMode|null
     */
    public function getCommentThreadDeleteMode()
    {
        return $this->container['comment_thread_delete_mode'];
    }

    /**
     * Sets comment_thread_delete_mode
     *
     * @param \FastComments\Client\Model\CommentThreadDeletionMode|null $comment_thread_delete_mode comment_thread_delete_mode
     *
     * @return self
     */
    public function setCommentThreadDeleteMode($comment_thread_delete_mode)
    {
        if (is_null($comment_thread_delete_mode)) {
            array_push($this->openAPINullablesSetToNull, 'comment_thread_delete_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment_thread_delete_mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment_thread_delete_mode'] = $comment_thread_delete_mode;

        return $this;
    }

    /**
     * Gets commenter_name_format
     *
     * @return \FastComments\Client\Model\CommenterNameFormats|null
     */
    public function getCommenterNameFormat()
    {
        return $this->container['commenter_name_format'];
    }

    /**
     * Sets commenter_name_format
     *
     * @param \FastComments\Client\Model\CommenterNameFormats|null $commenter_name_format commenter_name_format
     *
     * @return self
     */
    public function setCommenterNameFormat($commenter_name_format)
    {
        if (is_null($commenter_name_format)) {
            array_push($this->openAPINullablesSetToNull, 'commenter_name_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('commenter_name_format', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['commenter_name_format'] = $commenter_name_format;

        return $this;
    }

    /**
     * Gets count_above_toggle
     *
     * @return float|null
     */
    public function getCountAboveToggle()
    {
        return $this->container['count_above_toggle'];
    }

    /**
     * Sets count_above_toggle
     *
     * @param float|null $count_above_toggle count_above_toggle
     *
     * @return self
     */
    public function setCountAboveToggle($count_above_toggle)
    {
        if (is_null($count_above_toggle)) {
            throw new \InvalidArgumentException('non-nullable count_above_toggle cannot be null');
        }
        $this->container['count_above_toggle'] = $count_above_toggle;

        return $this;
    }

    /**
     * Gets custom_css
     *
     * @return string|null
     */
    public function getCustomCss()
    {
        return $this->container['custom_css'];
    }

    /**
     * Sets custom_css
     *
     * @param string|null $custom_css custom_css
     *
     * @return self
     */
    public function setCustomCss($custom_css)
    {
        if (is_null($custom_css)) {
            array_push($this->openAPINullablesSetToNull, 'custom_css');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_css', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_css'] = $custom_css;

        return $this;
    }

    /**
     * Gets default_avatar_src
     *
     * @return string|null
     */
    public function getDefaultAvatarSrc()
    {
        return $this->container['default_avatar_src'];
    }

    /**
     * Sets default_avatar_src
     *
     * @param string|null $default_avatar_src default_avatar_src
     *
     * @return self
     */
    public function setDefaultAvatarSrc($default_avatar_src)
    {
        if (is_null($default_avatar_src)) {
            array_push($this->openAPINullablesSetToNull, 'default_avatar_src');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_avatar_src', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_avatar_src'] = $default_avatar_src;

        return $this;
    }

    /**
     * Gets default_sort_direction
     *
     * @return \FastComments\Client\Model\SortDirections|null
     */
    public function getDefaultSortDirection()
    {
        return $this->container['default_sort_direction'];
    }

    /**
     * Sets default_sort_direction
     *
     * @param \FastComments\Client\Model\SortDirections|null $default_sort_direction default_sort_direction
     *
     * @return self
     */
    public function setDefaultSortDirection($default_sort_direction)
    {
        if (is_null($default_sort_direction)) {
            array_push($this->openAPINullablesSetToNull, 'default_sort_direction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_sort_direction', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_sort_direction'] = $default_sort_direction;

        return $this;
    }

    /**
     * Gets default_username
     *
     * @return string|null
     */
    public function getDefaultUsername()
    {
        return $this->container['default_username'];
    }

    /**
     * Sets default_username
     *
     * @param string|null $default_username default_username
     *
     * @return self
     */
    public function setDefaultUsername($default_username)
    {
        if (is_null($default_username)) {
            array_push($this->openAPINullablesSetToNull, 'default_username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_username'] = $default_username;

        return $this;
    }

    /**
     * Gets disable_auto_admin_migration
     *
     * @return bool|null
     */
    public function getDisableAutoAdminMigration()
    {
        return $this->container['disable_auto_admin_migration'];
    }

    /**
     * Sets disable_auto_admin_migration
     *
     * @param bool|null $disable_auto_admin_migration disable_auto_admin_migration
     *
     * @return self
     */
    public function setDisableAutoAdminMigration($disable_auto_admin_migration)
    {
        if (is_null($disable_auto_admin_migration)) {
            throw new \InvalidArgumentException('non-nullable disable_auto_admin_migration cannot be null');
        }
        $this->container['disable_auto_admin_migration'] = $disable_auto_admin_migration;

        return $this;
    }

    /**
     * Gets disable_auto_hash_tag_creation
     *
     * @return bool|null
     */
    public function getDisableAutoHashTagCreation()
    {
        return $this->container['disable_auto_hash_tag_creation'];
    }

    /**
     * Sets disable_auto_hash_tag_creation
     *
     * @param bool|null $disable_auto_hash_tag_creation disable_auto_hash_tag_creation
     *
     * @return self
     */
    public function setDisableAutoHashTagCreation($disable_auto_hash_tag_creation)
    {
        if (is_null($disable_auto_hash_tag_creation)) {
            throw new \InvalidArgumentException('non-nullable disable_auto_hash_tag_creation cannot be null');
        }
        $this->container['disable_auto_hash_tag_creation'] = $disable_auto_hash_tag_creation;

        return $this;
    }

    /**
     * Gets disable_blocking
     *
     * @return bool|null
     */
    public function getDisableBlocking()
    {
        return $this->container['disable_blocking'];
    }

    /**
     * Sets disable_blocking
     *
     * @param bool|null $disable_blocking disable_blocking
     *
     * @return self
     */
    public function setDisableBlocking($disable_blocking)
    {
        if (is_null($disable_blocking)) {
            throw new \InvalidArgumentException('non-nullable disable_blocking cannot be null');
        }
        $this->container['disable_blocking'] = $disable_blocking;

        return $this;
    }

    /**
     * Gets disable_commenter_comment_delete
     *
     * @return bool|null
     */
    public function getDisableCommenterCommentDelete()
    {
        return $this->container['disable_commenter_comment_delete'];
    }

    /**
     * Sets disable_commenter_comment_delete
     *
     * @param bool|null $disable_commenter_comment_delete disable_commenter_comment_delete
     *
     * @return self
     */
    public function setDisableCommenterCommentDelete($disable_commenter_comment_delete)
    {
        if (is_null($disable_commenter_comment_delete)) {
            throw new \InvalidArgumentException('non-nullable disable_commenter_comment_delete cannot be null');
        }
        $this->container['disable_commenter_comment_delete'] = $disable_commenter_comment_delete;

        return $this;
    }

    /**
     * Gets disable_commenter_comment_edit
     *
     * @return bool|null
     */
    public function getDisableCommenterCommentEdit()
    {
        return $this->container['disable_commenter_comment_edit'];
    }

    /**
     * Sets disable_commenter_comment_edit
     *
     * @param bool|null $disable_commenter_comment_edit disable_commenter_comment_edit
     *
     * @return self
     */
    public function setDisableCommenterCommentEdit($disable_commenter_comment_edit)
    {
        if (is_null($disable_commenter_comment_edit)) {
            throw new \InvalidArgumentException('non-nullable disable_commenter_comment_edit cannot be null');
        }
        $this->container['disable_commenter_comment_edit'] = $disable_commenter_comment_edit;

        return $this;
    }

    /**
     * Gets disable_email_inputs
     *
     * @return bool|null
     */
    public function getDisableEmailInputs()
    {
        return $this->container['disable_email_inputs'];
    }

    /**
     * Sets disable_email_inputs
     *
     * @param bool|null $disable_email_inputs disable_email_inputs
     *
     * @return self
     */
    public function setDisableEmailInputs($disable_email_inputs)
    {
        if (is_null($disable_email_inputs)) {
            throw new \InvalidArgumentException('non-nullable disable_email_inputs cannot be null');
        }
        $this->container['disable_email_inputs'] = $disable_email_inputs;

        return $this;
    }

    /**
     * Gets disable_live_commenting
     *
     * @return bool|null
     */
    public function getDisableLiveCommenting()
    {
        return $this->container['disable_live_commenting'];
    }

    /**
     * Sets disable_live_commenting
     *
     * @param bool|null $disable_live_commenting disable_live_commenting
     *
     * @return self
     */
    public function setDisableLiveCommenting($disable_live_commenting)
    {
        if (is_null($disable_live_commenting)) {
            throw new \InvalidArgumentException('non-nullable disable_live_commenting cannot be null');
        }
        $this->container['disable_live_commenting'] = $disable_live_commenting;

        return $this;
    }

    /**
     * Gets disable_notification_bell
     *
     * @return bool|null
     */
    public function getDisableNotificationBell()
    {
        return $this->container['disable_notification_bell'];
    }

    /**
     * Sets disable_notification_bell
     *
     * @param bool|null $disable_notification_bell disable_notification_bell
     *
     * @return self
     */
    public function setDisableNotificationBell($disable_notification_bell)
    {
        if (is_null($disable_notification_bell)) {
            throw new \InvalidArgumentException('non-nullable disable_notification_bell cannot be null');
        }
        $this->container['disable_notification_bell'] = $disable_notification_bell;

        return $this;
    }

    /**
     * Gets disable_profiles
     *
     * @return bool|null
     */
    public function getDisableProfiles()
    {
        return $this->container['disable_profiles'];
    }

    /**
     * Sets disable_profiles
     *
     * @param bool|null $disable_profiles disable_profiles
     *
     * @return self
     */
    public function setDisableProfiles($disable_profiles)
    {
        if (is_null($disable_profiles)) {
            throw new \InvalidArgumentException('non-nullable disable_profiles cannot be null');
        }
        $this->container['disable_profiles'] = $disable_profiles;

        return $this;
    }

    /**
     * Gets disable_success_message
     *
     * @return bool|null
     */
    public function getDisableSuccessMessage()
    {
        return $this->container['disable_success_message'];
    }

    /**
     * Sets disable_success_message
     *
     * @param bool|null $disable_success_message disable_success_message
     *
     * @return self
     */
    public function setDisableSuccessMessage($disable_success_message)
    {
        if (is_null($disable_success_message)) {
            throw new \InvalidArgumentException('non-nullable disable_success_message cannot be null');
        }
        $this->container['disable_success_message'] = $disable_success_message;

        return $this;
    }

    /**
     * Gets disable_toolbar
     *
     * @return bool|null
     */
    public function getDisableToolbar()
    {
        return $this->container['disable_toolbar'];
    }

    /**
     * Sets disable_toolbar
     *
     * @param bool|null $disable_toolbar disable_toolbar
     *
     * @return self
     */
    public function setDisableToolbar($disable_toolbar)
    {
        if (is_null($disable_toolbar)) {
            throw new \InvalidArgumentException('non-nullable disable_toolbar cannot be null');
        }
        $this->container['disable_toolbar'] = $disable_toolbar;

        return $this;
    }

    /**
     * Gets disable_unverified_label
     *
     * @return bool|null
     */
    public function getDisableUnverifiedLabel()
    {
        return $this->container['disable_unverified_label'];
    }

    /**
     * Sets disable_unverified_label
     *
     * @param bool|null $disable_unverified_label disable_unverified_label
     *
     * @return self
     */
    public function setDisableUnverifiedLabel($disable_unverified_label)
    {
        if (is_null($disable_unverified_label)) {
            throw new \InvalidArgumentException('non-nullable disable_unverified_label cannot be null');
        }
        $this->container['disable_unverified_label'] = $disable_unverified_label;

        return $this;
    }

    /**
     * Gets disable_voting
     *
     * @return bool|null
     */
    public function getDisableVoting()
    {
        return $this->container['disable_voting'];
    }

    /**
     * Sets disable_voting
     *
     * @param bool|null $disable_voting disable_voting
     *
     * @return self
     */
    public function setDisableVoting($disable_voting)
    {
        if (is_null($disable_voting)) {
            throw new \InvalidArgumentException('non-nullable disable_voting cannot be null');
        }
        $this->container['disable_voting'] = $disable_voting;

        return $this;
    }

    /**
     * Gets enable_commenter_links
     *
     * @return bool|null
     */
    public function getEnableCommenterLinks()
    {
        return $this->container['enable_commenter_links'];
    }

    /**
     * Sets enable_commenter_links
     *
     * @param bool|null $enable_commenter_links enable_commenter_links
     *
     * @return self
     */
    public function setEnableCommenterLinks($enable_commenter_links)
    {
        if (is_null($enable_commenter_links)) {
            throw new \InvalidArgumentException('non-nullable enable_commenter_links cannot be null');
        }
        $this->container['enable_commenter_links'] = $enable_commenter_links;

        return $this;
    }

    /**
     * Gets enable_search
     *
     * @return bool|null
     */
    public function getEnableSearch()
    {
        return $this->container['enable_search'];
    }

    /**
     * Sets enable_search
     *
     * @param bool|null $enable_search enable_search
     *
     * @return self
     */
    public function setEnableSearch($enable_search)
    {
        if (is_null($enable_search)) {
            throw new \InvalidArgumentException('non-nullable enable_search cannot be null');
        }
        $this->container['enable_search'] = $enable_search;

        return $this;
    }

    /**
     * Gets enable_spoilers
     *
     * @return bool|null
     */
    public function getEnableSpoilers()
    {
        return $this->container['enable_spoilers'];
    }

    /**
     * Sets enable_spoilers
     *
     * @param bool|null $enable_spoilers enable_spoilers
     *
     * @return self
     */
    public function setEnableSpoilers($enable_spoilers)
    {
        if (is_null($enable_spoilers)) {
            throw new \InvalidArgumentException('non-nullable enable_spoilers cannot be null');
        }
        $this->container['enable_spoilers'] = $enable_spoilers;

        return $this;
    }

    /**
     * Gets enable_third_party_cookie_bypass
     *
     * @return bool|null
     */
    public function getEnableThirdPartyCookieBypass()
    {
        return $this->container['enable_third_party_cookie_bypass'];
    }

    /**
     * Sets enable_third_party_cookie_bypass
     *
     * @param bool|null $enable_third_party_cookie_bypass enable_third_party_cookie_bypass
     *
     * @return self
     */
    public function setEnableThirdPartyCookieBypass($enable_third_party_cookie_bypass)
    {
        if (is_null($enable_third_party_cookie_bypass)) {
            throw new \InvalidArgumentException('non-nullable enable_third_party_cookie_bypass cannot be null');
        }
        $this->container['enable_third_party_cookie_bypass'] = $enable_third_party_cookie_bypass;

        return $this;
    }

    /**
     * Gets enable_view_counts
     *
     * @return bool|null
     */
    public function getEnableViewCounts()
    {
        return $this->container['enable_view_counts'];
    }

    /**
     * Sets enable_view_counts
     *
     * @param bool|null $enable_view_counts enable_view_counts
     *
     * @return self
     */
    public function setEnableViewCounts($enable_view_counts)
    {
        if (is_null($enable_view_counts)) {
            throw new \InvalidArgumentException('non-nullable enable_view_counts cannot be null');
        }
        $this->container['enable_view_counts'] = $enable_view_counts;

        return $this;
    }

    /**
     * Gets enable_vote_list
     *
     * @return bool|null
     */
    public function getEnableVoteList()
    {
        return $this->container['enable_vote_list'];
    }

    /**
     * Sets enable_vote_list
     *
     * @param bool|null $enable_vote_list enable_vote_list
     *
     * @return self
     */
    public function setEnableVoteList($enable_vote_list)
    {
        if (is_null($enable_vote_list)) {
            throw new \InvalidArgumentException('non-nullable enable_vote_list cannot be null');
        }
        $this->container['enable_vote_list'] = $enable_vote_list;

        return $this;
    }

    /**
     * Gets enable_wysiwyg
     *
     * @return bool|null
     */
    public function getEnableWysiwyg()
    {
        return $this->container['enable_wysiwyg'];
    }

    /**
     * Sets enable_wysiwyg
     *
     * @param bool|null $enable_wysiwyg enable_wysiwyg
     *
     * @return self
     */
    public function setEnableWysiwyg($enable_wysiwyg)
    {
        if (is_null($enable_wysiwyg)) {
            throw new \InvalidArgumentException('non-nullable enable_wysiwyg cannot be null');
        }
        $this->container['enable_wysiwyg'] = $enable_wysiwyg;

        return $this;
    }

    /**
     * Gets gif_rating
     *
     * @return \FastComments\Client\Model\GifRating|null
     */
    public function getGifRating()
    {
        return $this->container['gif_rating'];
    }

    /**
     * Sets gif_rating
     *
     * @param \FastComments\Client\Model\GifRating|null $gif_rating gif_rating
     *
     * @return self
     */
    public function setGifRating($gif_rating)
    {
        if (is_null($gif_rating)) {
            throw new \InvalidArgumentException('non-nullable gif_rating cannot be null');
        }
        $this->container['gif_rating'] = $gif_rating;

        return $this;
    }

    /**
     * Gets has_dark_background
     *
     * @return bool|null
     */
    public function getHasDarkBackground()
    {
        return $this->container['has_dark_background'];
    }

    /**
     * Sets has_dark_background
     *
     * @param bool|null $has_dark_background has_dark_background
     *
     * @return self
     */
    public function setHasDarkBackground($has_dark_background)
    {
        if (is_null($has_dark_background)) {
            throw new \InvalidArgumentException('non-nullable has_dark_background cannot be null');
        }
        $this->container['has_dark_background'] = $has_dark_background;

        return $this;
    }

    /**
     * Gets header_html
     *
     * @return string|null
     */
    public function getHeaderHtml()
    {
        return $this->container['header_html'];
    }

    /**
     * Sets header_html
     *
     * @param string|null $header_html header_html
     *
     * @return self
     */
    public function setHeaderHtml($header_html)
    {
        if (is_null($header_html)) {
            array_push($this->openAPINullablesSetToNull, 'header_html');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_html', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['header_html'] = $header_html;

        return $this;
    }

    /**
     * Gets hide_avatars
     *
     * @return bool|null
     */
    public function getHideAvatars()
    {
        return $this->container['hide_avatars'];
    }

    /**
     * Sets hide_avatars
     *
     * @param bool|null $hide_avatars hide_avatars
     *
     * @return self
     */
    public function setHideAvatars($hide_avatars)
    {
        if (is_null($hide_avatars)) {
            throw new \InvalidArgumentException('non-nullable hide_avatars cannot be null');
        }
        $this->container['hide_avatars'] = $hide_avatars;

        return $this;
    }

    /**
     * Gets hide_comments_under_count_text_format
     *
     * @return string|null
     */
    public function getHideCommentsUnderCountTextFormat()
    {
        return $this->container['hide_comments_under_count_text_format'];
    }

    /**
     * Sets hide_comments_under_count_text_format
     *
     * @param string|null $hide_comments_under_count_text_format hide_comments_under_count_text_format
     *
     * @return self
     */
    public function setHideCommentsUnderCountTextFormat($hide_comments_under_count_text_format)
    {
        if (is_null($hide_comments_under_count_text_format)) {
            array_push($this->openAPINullablesSetToNull, 'hide_comments_under_count_text_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hide_comments_under_count_text_format', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hide_comments_under_count_text_format'] = $hide_comments_under_count_text_format;

        return $this;
    }

    /**
     * Gets input_after_comments
     *
     * @return bool|null
     */
    public function getInputAfterComments()
    {
        return $this->container['input_after_comments'];
    }

    /**
     * Sets input_after_comments
     *
     * @param bool|null $input_after_comments input_after_comments
     *
     * @return self
     */
    public function setInputAfterComments($input_after_comments)
    {
        if (is_null($input_after_comments)) {
            throw new \InvalidArgumentException('non-nullable input_after_comments cannot be null');
        }
        $this->container['input_after_comments'] = $input_after_comments;

        return $this;
    }

    /**
     * Gets limit_comments_by_groups
     *
     * @return bool|null
     */
    public function getLimitCommentsByGroups()
    {
        return $this->container['limit_comments_by_groups'];
    }

    /**
     * Sets limit_comments_by_groups
     *
     * @param bool|null $limit_comments_by_groups limit_comments_by_groups
     *
     * @return self
     */
    public function setLimitCommentsByGroups($limit_comments_by_groups)
    {
        if (is_null($limit_comments_by_groups)) {
            throw new \InvalidArgumentException('non-nullable limit_comments_by_groups cannot be null');
        }
        $this->container['limit_comments_by_groups'] = $limit_comments_by_groups;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            array_push($this->openAPINullablesSetToNull, 'locale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets max_comment_character_length
     *
     * @return float|null
     */
    public function getMaxCommentCharacterLength()
    {
        return $this->container['max_comment_character_length'];
    }

    /**
     * Sets max_comment_character_length
     *
     * @param float|null $max_comment_character_length max_comment_character_length
     *
     * @return self
     */
    public function setMaxCommentCharacterLength($max_comment_character_length)
    {
        if (is_null($max_comment_character_length)) {
            array_push($this->openAPINullablesSetToNull, 'max_comment_character_length');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_comment_character_length', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_comment_character_length'] = $max_comment_character_length;

        return $this;
    }

    /**
     * Gets max_comment_created_count_pupm
     *
     * @return float|null
     */
    public function getMaxCommentCreatedCountPupm()
    {
        return $this->container['max_comment_created_count_pupm'];
    }

    /**
     * Sets max_comment_created_count_pupm
     *
     * @param float|null $max_comment_created_count_pupm max_comment_created_count_pupm
     *
     * @return self
     */
    public function setMaxCommentCreatedCountPupm($max_comment_created_count_pupm)
    {
        if (is_null($max_comment_created_count_pupm)) {
            array_push($this->openAPINullablesSetToNull, 'max_comment_created_count_pupm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_comment_created_count_pupm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_comment_created_count_pupm'] = $max_comment_created_count_pupm;

        return $this;
    }

    /**
     * Gets no_custom_config
     *
     * @return bool|null
     */
    public function getNoCustomConfig()
    {
        return $this->container['no_custom_config'];
    }

    /**
     * Sets no_custom_config
     *
     * @param bool|null $no_custom_config no_custom_config
     *
     * @return self
     */
    public function setNoCustomConfig($no_custom_config)
    {
        if (is_null($no_custom_config)) {
            throw new \InvalidArgumentException('non-nullable no_custom_config cannot be null');
        }
        $this->container['no_custom_config'] = $no_custom_config;

        return $this;
    }

    /**
     * Gets no_image_uploads
     *
     * @return bool|null
     */
    public function getNoImageUploads()
    {
        return $this->container['no_image_uploads'];
    }

    /**
     * Sets no_image_uploads
     *
     * @param bool|null $no_image_uploads no_image_uploads
     *
     * @return self
     */
    public function setNoImageUploads($no_image_uploads)
    {
        if (is_null($no_image_uploads)) {
            throw new \InvalidArgumentException('non-nullable no_image_uploads cannot be null');
        }
        $this->container['no_image_uploads'] = $no_image_uploads;

        return $this;
    }

    /**
     * Gets no_styles
     *
     * @return bool|null
     */
    public function getNoStyles()
    {
        return $this->container['no_styles'];
    }

    /**
     * Sets no_styles
     *
     * @param bool|null $no_styles no_styles
     *
     * @return self
     */
    public function setNoStyles($no_styles)
    {
        if (is_null($no_styles)) {
            throw new \InvalidArgumentException('non-nullable no_styles cannot be null');
        }
        $this->container['no_styles'] = $no_styles;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return float|null
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param float|null $page_size page_size
     *
     * @return self
     */
    public function setPageSize($page_size)
    {
        if (is_null($page_size)) {
            array_push($this->openAPINullablesSetToNull, 'page_size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('page_size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets readonly
     *
     * @return bool|null
     */
    public function getReadonly()
    {
        return $this->container['readonly'];
    }

    /**
     * Sets readonly
     *
     * @param bool|null $readonly readonly
     *
     * @return self
     */
    public function setReadonly($readonly)
    {
        if (is_null($readonly)) {
            throw new \InvalidArgumentException('non-nullable readonly cannot be null');
        }
        $this->container['readonly'] = $readonly;

        return $this;
    }

    /**
     * Gets require_sso
     *
     * @return bool|null
     */
    public function getRequireSso()
    {
        return $this->container['require_sso'];
    }

    /**
     * Sets require_sso
     *
     * @param bool|null $require_sso require_sso
     *
     * @return self
     */
    public function setRequireSso($require_sso)
    {
        if (is_null($require_sso)) {
            throw new \InvalidArgumentException('non-nullable require_sso cannot be null');
        }
        $this->container['require_sso'] = $require_sso;

        return $this;
    }

    /**
     * Gets sso_sec_lvl
     *
     * @return \FastComments\Client\Model\SSOSecurityLevel|null
     */
    public function getSsoSecLvl()
    {
        return $this->container['sso_sec_lvl'];
    }

    /**
     * Sets sso_sec_lvl
     *
     * @param \FastComments\Client\Model\SSOSecurityLevel|null $sso_sec_lvl sso_sec_lvl
     *
     * @return self
     */
    public function setSsoSecLvl($sso_sec_lvl)
    {
        if (is_null($sso_sec_lvl)) {
            throw new \InvalidArgumentException('non-nullable sso_sec_lvl cannot be null');
        }
        $this->container['sso_sec_lvl'] = $sso_sec_lvl;

        return $this;
    }

    /**
     * Gets restricted_link_domains
     *
     * @return string[]|null
     */
    public function getRestrictedLinkDomains()
    {
        return $this->container['restricted_link_domains'];
    }

    /**
     * Sets restricted_link_domains
     *
     * @param string[]|null $restricted_link_domains restricted_link_domains
     *
     * @return self
     */
    public function setRestrictedLinkDomains($restricted_link_domains)
    {
        if (is_null($restricted_link_domains)) {
            array_push($this->openAPINullablesSetToNull, 'restricted_link_domains');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('restricted_link_domains', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['restricted_link_domains'] = $restricted_link_domains;

        return $this;
    }

    /**
     * Gets show_comment_save_success
     *
     * @return bool|null
     */
    public function getShowCommentSaveSuccess()
    {
        return $this->container['show_comment_save_success'];
    }

    /**
     * Sets show_comment_save_success
     *
     * @param bool|null $show_comment_save_success show_comment_save_success
     *
     * @return self
     */
    public function setShowCommentSaveSuccess($show_comment_save_success)
    {
        if (is_null($show_comment_save_success)) {
            throw new \InvalidArgumentException('non-nullable show_comment_save_success cannot be null');
        }
        $this->container['show_comment_save_success'] = $show_comment_save_success;

        return $this;
    }

    /**
     * Gets show_live_right_away
     *
     * @return bool|null
     */
    public function getShowLiveRightAway()
    {
        return $this->container['show_live_right_away'];
    }

    /**
     * Sets show_live_right_away
     *
     * @param bool|null $show_live_right_away show_live_right_away
     *
     * @return self
     */
    public function setShowLiveRightAway($show_live_right_away)
    {
        if (is_null($show_live_right_away)) {
            throw new \InvalidArgumentException('non-nullable show_live_right_away cannot be null');
        }
        $this->container['show_live_right_away'] = $show_live_right_away;

        return $this;
    }

    /**
     * Gets show_question
     *
     * @return bool|null
     */
    public function getShowQuestion()
    {
        return $this->container['show_question'];
    }

    /**
     * Sets show_question
     *
     * @param bool|null $show_question show_question
     *
     * @return self
     */
    public function setShowQuestion($show_question)
    {
        if (is_null($show_question)) {
            throw new \InvalidArgumentException('non-nullable show_question cannot be null');
        }
        $this->container['show_question'] = $show_question;

        return $this;
    }

    /**
     * Gets spam_rules
     *
     * @return \FastComments\Client\Model\SpamRule[]|null
     */
    public function getSpamRules()
    {
        return $this->container['spam_rules'];
    }

    /**
     * Sets spam_rules
     *
     * @param \FastComments\Client\Model\SpamRule[]|null $spam_rules spam_rules
     *
     * @return self
     */
    public function setSpamRules($spam_rules)
    {
        if (is_null($spam_rules)) {
            throw new \InvalidArgumentException('non-nullable spam_rules cannot be null');
        }
        $this->container['spam_rules'] = $spam_rules;

        return $this;
    }

    /**
     * Gets translations
     *
     * @return array<string,string>|null
     */
    public function getTranslations()
    {
        return $this->container['translations'];
    }

    /**
     * Sets translations
     *
     * @param array<string,string>|null $translations Construct a type with a set of properties K of type T
     *
     * @return self
     */
    public function setTranslations($translations)
    {
        if (is_null($translations)) {
            array_push($this->openAPINullablesSetToNull, 'translations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('translations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['translations'] = $translations;

        return $this;
    }

    /**
     * Gets use_show_comments_toggle
     *
     * @return bool|null
     */
    public function getUseShowCommentsToggle()
    {
        return $this->container['use_show_comments_toggle'];
    }

    /**
     * Sets use_show_comments_toggle
     *
     * @param bool|null $use_show_comments_toggle use_show_comments_toggle
     *
     * @return self
     */
    public function setUseShowCommentsToggle($use_show_comments_toggle)
    {
        if (is_null($use_show_comments_toggle)) {
            throw new \InvalidArgumentException('non-nullable use_show_comments_toggle cannot be null');
        }
        $this->container['use_show_comments_toggle'] = $use_show_comments_toggle;

        return $this;
    }

    /**
     * Gets use_single_line_comment_input
     *
     * @return bool|null
     */
    public function getUseSingleLineCommentInput()
    {
        return $this->container['use_single_line_comment_input'];
    }

    /**
     * Sets use_single_line_comment_input
     *
     * @param bool|null $use_single_line_comment_input use_single_line_comment_input
     *
     * @return self
     */
    public function setUseSingleLineCommentInput($use_single_line_comment_input)
    {
        if (is_null($use_single_line_comment_input)) {
            throw new \InvalidArgumentException('non-nullable use_single_line_comment_input cannot be null');
        }
        $this->container['use_single_line_comment_input'] = $use_single_line_comment_input;

        return $this;
    }

    /**
     * Gets vote_style
     *
     * @return \FastComments\Client\Model\VoteStyle|null
     */
    public function getVoteStyle()
    {
        return $this->container['vote_style'];
    }

    /**
     * Sets vote_style
     *
     * @param \FastComments\Client\Model\VoteStyle|null $vote_style vote_style
     *
     * @return self
     */
    public function setVoteStyle($vote_style)
    {
        if (is_null($vote_style)) {
            throw new \InvalidArgumentException('non-nullable vote_style cannot be null');
        }
        $this->container['vote_style'] = $vote_style;

        return $this;
    }

    /**
     * Gets widget_question_id
     *
     * @return string|null
     */
    public function getWidgetQuestionId()
    {
        return $this->container['widget_question_id'];
    }

    /**
     * Sets widget_question_id
     *
     * @param string|null $widget_question_id widget_question_id
     *
     * @return self
     */
    public function setWidgetQuestionId($widget_question_id)
    {
        if (is_null($widget_question_id)) {
            throw new \InvalidArgumentException('non-nullable widget_question_id cannot be null');
        }
        $this->container['widget_question_id'] = $widget_question_id;

        return $this;
    }

    /**
     * Gets widget_question_results_style
     *
     * @return \FastComments\Client\Model\CommentQuestionResultsRenderingType|null
     */
    public function getWidgetQuestionResultsStyle()
    {
        return $this->container['widget_question_results_style'];
    }

    /**
     * Sets widget_question_results_style
     *
     * @param \FastComments\Client\Model\CommentQuestionResultsRenderingType|null $widget_question_results_style widget_question_results_style
     *
     * @return self
     */
    public function setWidgetQuestionResultsStyle($widget_question_results_style)
    {
        if (is_null($widget_question_results_style)) {
            throw new \InvalidArgumentException('non-nullable widget_question_results_style cannot be null');
        }
        $this->container['widget_question_results_style'] = $widget_question_results_style;

        return $this;
    }

    /**
     * Gets widget_question_style
     *
     * @return \FastComments\Client\Model\QuestionRenderingType|null
     */
    public function getWidgetQuestionStyle()
    {
        return $this->container['widget_question_style'];
    }

    /**
     * Sets widget_question_style
     *
     * @param \FastComments\Client\Model\QuestionRenderingType|null $widget_question_style widget_question_style
     *
     * @return self
     */
    public function setWidgetQuestionStyle($widget_question_style)
    {
        if (is_null($widget_question_style)) {
            throw new \InvalidArgumentException('non-nullable widget_question_style cannot be null');
        }
        $this->container['widget_question_style'] = $widget_question_style;

        return $this;
    }

    /**
     * Gets widget_question_when_to_save
     *
     * @return \FastComments\Client\Model\QuestionWhenSave|null
     */
    public function getWidgetQuestionWhenToSave()
    {
        return $this->container['widget_question_when_to_save'];
    }

    /**
     * Sets widget_question_when_to_save
     *
     * @param \FastComments\Client\Model\QuestionWhenSave|null $widget_question_when_to_save widget_question_when_to_save
     *
     * @return self
     */
    public function setWidgetQuestionWhenToSave($widget_question_when_to_save)
    {
        if (is_null($widget_question_when_to_save)) {
            throw new \InvalidArgumentException('non-nullable widget_question_when_to_save cannot be null');
        }
        $this->container['widget_question_when_to_save'] = $widget_question_when_to_save;

        return $this;
    }

    /**
     * Gets widget_questions_required
     *
     * @return \FastComments\Client\Model\CommentQuestionsRequired|null
     */
    public function getWidgetQuestionsRequired()
    {
        return $this->container['widget_questions_required'];
    }

    /**
     * Sets widget_questions_required
     *
     * @param \FastComments\Client\Model\CommentQuestionsRequired|null $widget_questions_required widget_questions_required
     *
     * @return self
     */
    public function setWidgetQuestionsRequired($widget_questions_required)
    {
        if (is_null($widget_questions_required)) {
            throw new \InvalidArgumentException('non-nullable widget_questions_required cannot be null');
        }
        $this->container['widget_questions_required'] = $widget_questions_required;

        return $this;
    }

    /**
     * Gets widget_sub_question_visibility
     *
     * @return \FastComments\Client\Model\QuestionSubQuestionVisibility|null
     */
    public function getWidgetSubQuestionVisibility()
    {
        return $this->container['widget_sub_question_visibility'];
    }

    /**
     * Sets widget_sub_question_visibility
     *
     * @param \FastComments\Client\Model\QuestionSubQuestionVisibility|null $widget_sub_question_visibility widget_sub_question_visibility
     *
     * @return self
     */
    public function setWidgetSubQuestionVisibility($widget_sub_question_visibility)
    {
        if (is_null($widget_sub_question_visibility)) {
            throw new \InvalidArgumentException('non-nullable widget_sub_question_visibility cannot be null');
        }
        $this->container['widget_sub_question_visibility'] = $widget_sub_question_visibility;

        return $this;
    }

    /**
     * Gets wrap
     *
     * @return bool|null
     */
    public function getWrap()
    {
        return $this->container['wrap'];
    }

    /**
     * Sets wrap
     *
     * @param bool|null $wrap wrap
     *
     * @return self
     */
    public function setWrap($wrap)
    {
        if (is_null($wrap)) {
            throw new \InvalidArgumentException('non-nullable wrap cannot be null');
        }
        $this->container['wrap'] = $wrap;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


