<?php
/**
 * UpdateAPISSOUserData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FastComments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * fastcomments
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@fastcomments.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FastComments\Client\Model;

use \ArrayAccess;
use \FastComments\Client\ObjectSerializer;

/**
 * UpdateAPISSOUserData Class Doc Comment
 *
 * @category Class
 * @package  FastComments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateAPISSOUserData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateAPISSOUserData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'group_ids' => 'string[]',
        'has_blocked_users' => 'bool',
        'is_profile_dm_disabled' => 'bool',
        'is_profile_comments_private' => 'bool',
        'is_profile_activity_private' => 'bool',
        'is_comment_moderator_admin' => 'bool',
        'is_admin_admin' => 'bool',
        'is_account_owner' => 'bool',
        'display_name' => 'string',
        'display_label' => 'string',
        'opted_in_subscription_notifications' => 'bool',
        'opted_in_notifications' => 'bool',
        'avatar_src' => 'string',
        'login_count' => 'int',
        'created_from_url_id' => 'string',
        'sign_up_date' => 'int',
        'email' => 'string',
        'website_url' => 'string',
        'username' => 'string',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'group_ids' => null,
        'has_blocked_users' => null,
        'is_profile_dm_disabled' => null,
        'is_profile_comments_private' => null,
        'is_profile_activity_private' => null,
        'is_comment_moderator_admin' => null,
        'is_admin_admin' => null,
        'is_account_owner' => null,
        'display_name' => null,
        'display_label' => null,
        'opted_in_subscription_notifications' => null,
        'opted_in_notifications' => null,
        'avatar_src' => null,
        'login_count' => 'int32',
        'created_from_url_id' => null,
        'sign_up_date' => 'int64',
        'email' => null,
        'website_url' => null,
        'username' => null,
        'id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'group_ids' => false,
        'has_blocked_users' => false,
        'is_profile_dm_disabled' => false,
        'is_profile_comments_private' => false,
        'is_profile_activity_private' => false,
        'is_comment_moderator_admin' => false,
        'is_admin_admin' => false,
        'is_account_owner' => false,
        'display_name' => false,
        'display_label' => false,
        'opted_in_subscription_notifications' => false,
        'opted_in_notifications' => false,
        'avatar_src' => false,
        'login_count' => false,
        'created_from_url_id' => false,
        'sign_up_date' => false,
        'email' => false,
        'website_url' => false,
        'username' => false,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'group_ids' => 'groupIds',
        'has_blocked_users' => 'hasBlockedUsers',
        'is_profile_dm_disabled' => 'isProfileDMDisabled',
        'is_profile_comments_private' => 'isProfileCommentsPrivate',
        'is_profile_activity_private' => 'isProfileActivityPrivate',
        'is_comment_moderator_admin' => 'isCommentModeratorAdmin',
        'is_admin_admin' => 'isAdminAdmin',
        'is_account_owner' => 'isAccountOwner',
        'display_name' => 'displayName',
        'display_label' => 'displayLabel',
        'opted_in_subscription_notifications' => 'optedInSubscriptionNotifications',
        'opted_in_notifications' => 'optedInNotifications',
        'avatar_src' => 'avatarSrc',
        'login_count' => 'loginCount',
        'created_from_url_id' => 'createdFromUrlId',
        'sign_up_date' => 'signUpDate',
        'email' => 'email',
        'website_url' => 'websiteUrl',
        'username' => 'username',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'group_ids' => 'setGroupIds',
        'has_blocked_users' => 'setHasBlockedUsers',
        'is_profile_dm_disabled' => 'setIsProfileDmDisabled',
        'is_profile_comments_private' => 'setIsProfileCommentsPrivate',
        'is_profile_activity_private' => 'setIsProfileActivityPrivate',
        'is_comment_moderator_admin' => 'setIsCommentModeratorAdmin',
        'is_admin_admin' => 'setIsAdminAdmin',
        'is_account_owner' => 'setIsAccountOwner',
        'display_name' => 'setDisplayName',
        'display_label' => 'setDisplayLabel',
        'opted_in_subscription_notifications' => 'setOptedInSubscriptionNotifications',
        'opted_in_notifications' => 'setOptedInNotifications',
        'avatar_src' => 'setAvatarSrc',
        'login_count' => 'setLoginCount',
        'created_from_url_id' => 'setCreatedFromUrlId',
        'sign_up_date' => 'setSignUpDate',
        'email' => 'setEmail',
        'website_url' => 'setWebsiteUrl',
        'username' => 'setUsername',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'group_ids' => 'getGroupIds',
        'has_blocked_users' => 'getHasBlockedUsers',
        'is_profile_dm_disabled' => 'getIsProfileDmDisabled',
        'is_profile_comments_private' => 'getIsProfileCommentsPrivate',
        'is_profile_activity_private' => 'getIsProfileActivityPrivate',
        'is_comment_moderator_admin' => 'getIsCommentModeratorAdmin',
        'is_admin_admin' => 'getIsAdminAdmin',
        'is_account_owner' => 'getIsAccountOwner',
        'display_name' => 'getDisplayName',
        'display_label' => 'getDisplayLabel',
        'opted_in_subscription_notifications' => 'getOptedInSubscriptionNotifications',
        'opted_in_notifications' => 'getOptedInNotifications',
        'avatar_src' => 'getAvatarSrc',
        'login_count' => 'getLoginCount',
        'created_from_url_id' => 'getCreatedFromUrlId',
        'sign_up_date' => 'getSignUpDate',
        'email' => 'getEmail',
        'website_url' => 'getWebsiteUrl',
        'username' => 'getUsername',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('group_ids', $data ?? [], null);
        $this->setIfExists('has_blocked_users', $data ?? [], null);
        $this->setIfExists('is_profile_dm_disabled', $data ?? [], null);
        $this->setIfExists('is_profile_comments_private', $data ?? [], null);
        $this->setIfExists('is_profile_activity_private', $data ?? [], null);
        $this->setIfExists('is_comment_moderator_admin', $data ?? [], null);
        $this->setIfExists('is_admin_admin', $data ?? [], null);
        $this->setIfExists('is_account_owner', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('display_label', $data ?? [], null);
        $this->setIfExists('opted_in_subscription_notifications', $data ?? [], null);
        $this->setIfExists('opted_in_notifications', $data ?? [], null);
        $this->setIfExists('avatar_src', $data ?? [], null);
        $this->setIfExists('login_count', $data ?? [], null);
        $this->setIfExists('created_from_url_id', $data ?? [], null);
        $this->setIfExists('sign_up_date', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('website_url', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets group_ids
     *
     * @return string[]|null
     */
    public function getGroupIds()
    {
        return $this->container['group_ids'];
    }

    /**
     * Sets group_ids
     *
     * @param string[]|null $group_ids group_ids
     *
     * @return self
     */
    public function setGroupIds($group_ids)
    {
        if (is_null($group_ids)) {
            throw new \InvalidArgumentException('non-nullable group_ids cannot be null');
        }
        $this->container['group_ids'] = $group_ids;

        return $this;
    }

    /**
     * Gets has_blocked_users
     *
     * @return bool|null
     */
    public function getHasBlockedUsers()
    {
        return $this->container['has_blocked_users'];
    }

    /**
     * Sets has_blocked_users
     *
     * @param bool|null $has_blocked_users has_blocked_users
     *
     * @return self
     */
    public function setHasBlockedUsers($has_blocked_users)
    {
        if (is_null($has_blocked_users)) {
            throw new \InvalidArgumentException('non-nullable has_blocked_users cannot be null');
        }
        $this->container['has_blocked_users'] = $has_blocked_users;

        return $this;
    }

    /**
     * Gets is_profile_dm_disabled
     *
     * @return bool|null
     */
    public function getIsProfileDmDisabled()
    {
        return $this->container['is_profile_dm_disabled'];
    }

    /**
     * Sets is_profile_dm_disabled
     *
     * @param bool|null $is_profile_dm_disabled is_profile_dm_disabled
     *
     * @return self
     */
    public function setIsProfileDmDisabled($is_profile_dm_disabled)
    {
        if (is_null($is_profile_dm_disabled)) {
            throw new \InvalidArgumentException('non-nullable is_profile_dm_disabled cannot be null');
        }
        $this->container['is_profile_dm_disabled'] = $is_profile_dm_disabled;

        return $this;
    }

    /**
     * Gets is_profile_comments_private
     *
     * @return bool|null
     */
    public function getIsProfileCommentsPrivate()
    {
        return $this->container['is_profile_comments_private'];
    }

    /**
     * Sets is_profile_comments_private
     *
     * @param bool|null $is_profile_comments_private is_profile_comments_private
     *
     * @return self
     */
    public function setIsProfileCommentsPrivate($is_profile_comments_private)
    {
        if (is_null($is_profile_comments_private)) {
            throw new \InvalidArgumentException('non-nullable is_profile_comments_private cannot be null');
        }
        $this->container['is_profile_comments_private'] = $is_profile_comments_private;

        return $this;
    }

    /**
     * Gets is_profile_activity_private
     *
     * @return bool|null
     */
    public function getIsProfileActivityPrivate()
    {
        return $this->container['is_profile_activity_private'];
    }

    /**
     * Sets is_profile_activity_private
     *
     * @param bool|null $is_profile_activity_private is_profile_activity_private
     *
     * @return self
     */
    public function setIsProfileActivityPrivate($is_profile_activity_private)
    {
        if (is_null($is_profile_activity_private)) {
            throw new \InvalidArgumentException('non-nullable is_profile_activity_private cannot be null');
        }
        $this->container['is_profile_activity_private'] = $is_profile_activity_private;

        return $this;
    }

    /**
     * Gets is_comment_moderator_admin
     *
     * @return bool|null
     */
    public function getIsCommentModeratorAdmin()
    {
        return $this->container['is_comment_moderator_admin'];
    }

    /**
     * Sets is_comment_moderator_admin
     *
     * @param bool|null $is_comment_moderator_admin is_comment_moderator_admin
     *
     * @return self
     */
    public function setIsCommentModeratorAdmin($is_comment_moderator_admin)
    {
        if (is_null($is_comment_moderator_admin)) {
            throw new \InvalidArgumentException('non-nullable is_comment_moderator_admin cannot be null');
        }
        $this->container['is_comment_moderator_admin'] = $is_comment_moderator_admin;

        return $this;
    }

    /**
     * Gets is_admin_admin
     *
     * @return bool|null
     */
    public function getIsAdminAdmin()
    {
        return $this->container['is_admin_admin'];
    }

    /**
     * Sets is_admin_admin
     *
     * @param bool|null $is_admin_admin is_admin_admin
     *
     * @return self
     */
    public function setIsAdminAdmin($is_admin_admin)
    {
        if (is_null($is_admin_admin)) {
            throw new \InvalidArgumentException('non-nullable is_admin_admin cannot be null');
        }
        $this->container['is_admin_admin'] = $is_admin_admin;

        return $this;
    }

    /**
     * Gets is_account_owner
     *
     * @return bool|null
     */
    public function getIsAccountOwner()
    {
        return $this->container['is_account_owner'];
    }

    /**
     * Sets is_account_owner
     *
     * @param bool|null $is_account_owner is_account_owner
     *
     * @return self
     */
    public function setIsAccountOwner($is_account_owner)
    {
        if (is_null($is_account_owner)) {
            throw new \InvalidArgumentException('non-nullable is_account_owner cannot be null');
        }
        $this->container['is_account_owner'] = $is_account_owner;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets display_label
     *
     * @return string|null
     */
    public function getDisplayLabel()
    {
        return $this->container['display_label'];
    }

    /**
     * Sets display_label
     *
     * @param string|null $display_label display_label
     *
     * @return self
     */
    public function setDisplayLabel($display_label)
    {
        if (is_null($display_label)) {
            throw new \InvalidArgumentException('non-nullable display_label cannot be null');
        }
        $this->container['display_label'] = $display_label;

        return $this;
    }

    /**
     * Gets opted_in_subscription_notifications
     *
     * @return bool|null
     */
    public function getOptedInSubscriptionNotifications()
    {
        return $this->container['opted_in_subscription_notifications'];
    }

    /**
     * Sets opted_in_subscription_notifications
     *
     * @param bool|null $opted_in_subscription_notifications opted_in_subscription_notifications
     *
     * @return self
     */
    public function setOptedInSubscriptionNotifications($opted_in_subscription_notifications)
    {
        if (is_null($opted_in_subscription_notifications)) {
            throw new \InvalidArgumentException('non-nullable opted_in_subscription_notifications cannot be null');
        }
        $this->container['opted_in_subscription_notifications'] = $opted_in_subscription_notifications;

        return $this;
    }

    /**
     * Gets opted_in_notifications
     *
     * @return bool|null
     */
    public function getOptedInNotifications()
    {
        return $this->container['opted_in_notifications'];
    }

    /**
     * Sets opted_in_notifications
     *
     * @param bool|null $opted_in_notifications opted_in_notifications
     *
     * @return self
     */
    public function setOptedInNotifications($opted_in_notifications)
    {
        if (is_null($opted_in_notifications)) {
            throw new \InvalidArgumentException('non-nullable opted_in_notifications cannot be null');
        }
        $this->container['opted_in_notifications'] = $opted_in_notifications;

        return $this;
    }

    /**
     * Gets avatar_src
     *
     * @return string|null
     */
    public function getAvatarSrc()
    {
        return $this->container['avatar_src'];
    }

    /**
     * Sets avatar_src
     *
     * @param string|null $avatar_src avatar_src
     *
     * @return self
     */
    public function setAvatarSrc($avatar_src)
    {
        if (is_null($avatar_src)) {
            throw new \InvalidArgumentException('non-nullable avatar_src cannot be null');
        }
        $this->container['avatar_src'] = $avatar_src;

        return $this;
    }

    /**
     * Gets login_count
     *
     * @return int|null
     */
    public function getLoginCount()
    {
        return $this->container['login_count'];
    }

    /**
     * Sets login_count
     *
     * @param int|null $login_count login_count
     *
     * @return self
     */
    public function setLoginCount($login_count)
    {
        if (is_null($login_count)) {
            throw new \InvalidArgumentException('non-nullable login_count cannot be null');
        }
        $this->container['login_count'] = $login_count;

        return $this;
    }

    /**
     * Gets created_from_url_id
     *
     * @return string|null
     */
    public function getCreatedFromUrlId()
    {
        return $this->container['created_from_url_id'];
    }

    /**
     * Sets created_from_url_id
     *
     * @param string|null $created_from_url_id created_from_url_id
     *
     * @return self
     */
    public function setCreatedFromUrlId($created_from_url_id)
    {
        if (is_null($created_from_url_id)) {
            throw new \InvalidArgumentException('non-nullable created_from_url_id cannot be null');
        }
        $this->container['created_from_url_id'] = $created_from_url_id;

        return $this;
    }

    /**
     * Gets sign_up_date
     *
     * @return int|null
     */
    public function getSignUpDate()
    {
        return $this->container['sign_up_date'];
    }

    /**
     * Sets sign_up_date
     *
     * @param int|null $sign_up_date sign_up_date
     *
     * @return self
     */
    public function setSignUpDate($sign_up_date)
    {
        if (is_null($sign_up_date)) {
            throw new \InvalidArgumentException('non-nullable sign_up_date cannot be null');
        }
        $this->container['sign_up_date'] = $sign_up_date;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return string|null
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param string|null $website_url website_url
     *
     * @return self
     */
    public function setWebsiteUrl($website_url)
    {
        if (is_null($website_url)) {
            throw new \InvalidArgumentException('non-nullable website_url cannot be null');
        }
        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


