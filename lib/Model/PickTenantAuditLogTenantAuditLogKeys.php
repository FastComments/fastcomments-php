<?php
/**
 * PickTenantAuditLogTenantAuditLogKeys
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * fastcomments
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PickTenantAuditLogTenantAuditLogKeys Class Doc Comment
 *
 * @category Class
 * @description From T, pick a set of properties whose keys are in the union K
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PickTenantAuditLogTenantAuditLogKeys implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Pick_TenantAuditLog.TenantAuditLogKeys_';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_id' => 'string',
        'url' => 'string',
        'user_id' => 'string',
        'username' => 'string',
        'resource_name' => 'string',
        'crud_type' => 'string',
        'from' => 'string',
        'ip' => 'string',
        'when' => '\DateTime',
        'description' => 'string',
        'server_start_date' => '\DateTime',
        'object_details' => 'array<string,mixed>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_id' => null,
        'url' => null,
        'user_id' => null,
        'username' => null,
        'resource_name' => null,
        'crud_type' => null,
        'from' => null,
        'ip' => null,
        'when' => 'date-time',
        'description' => null,
        'server_start_date' => 'date-time',
        'object_details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_id' => false,
        'url' => false,
        'user_id' => false,
        'username' => false,
        'resource_name' => false,
        'crud_type' => false,
        'from' => false,
        'ip' => false,
        'when' => false,
        'description' => false,
        'server_start_date' => false,
        'object_details' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'url' => 'url',
        'user_id' => 'userId',
        'username' => 'username',
        'resource_name' => 'resourceName',
        'crud_type' => 'crudType',
        'from' => 'from',
        'ip' => 'ip',
        'when' => 'when',
        'description' => 'description',
        'server_start_date' => 'serverStartDate',
        'object_details' => 'objectDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'url' => 'setUrl',
        'user_id' => 'setUserId',
        'username' => 'setUsername',
        'resource_name' => 'setResourceName',
        'crud_type' => 'setCrudType',
        'from' => 'setFrom',
        'ip' => 'setIp',
        'when' => 'setWhen',
        'description' => 'setDescription',
        'server_start_date' => 'setServerStartDate',
        'object_details' => 'setObjectDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'url' => 'getUrl',
        'user_id' => 'getUserId',
        'username' => 'getUsername',
        'resource_name' => 'getResourceName',
        'crud_type' => 'getCrudType',
        'from' => 'getFrom',
        'ip' => 'getIp',
        'when' => 'getWhen',
        'description' => 'getDescription',
        'server_start_date' => 'getServerStartDate',
        'object_details' => 'getObjectDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CRUD_TYPE_C = 'c';
    public const CRUD_TYPE_R = 'r';
    public const CRUD_TYPE_U = 'u';
    public const CRUD_TYPE_D = 'd';
    public const CRUD_TYPE_LOGIN = 'login';
    public const FROM_UI = 'ui';
    public const FROM_API = 'api';
    public const FROM_CRON = 'cron';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCrudTypeAllowableValues()
    {
        return [
            self::CRUD_TYPE_C,
            self::CRUD_TYPE_R,
            self::CRUD_TYPE_U,
            self::CRUD_TYPE_D,
            self::CRUD_TYPE_LOGIN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFromAllowableValues()
    {
        return [
            self::FROM_UI,
            self::FROM_API,
            self::FROM_CRON,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('_id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('resource_name', $data ?? [], null);
        $this->setIfExists('crud_type', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('ip', $data ?? [], null);
        $this->setIfExists('when', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('server_start_date', $data ?? [], null);
        $this->setIfExists('object_details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['_id'] === null) {
            $invalidProperties[] = "'_id' can't be null";
        }
        if ($this->container['resource_name'] === null) {
            $invalidProperties[] = "'resource_name' can't be null";
        }
        if ($this->container['crud_type'] === null) {
            $invalidProperties[] = "'crud_type' can't be null";
        }
        $allowedValues = $this->getCrudTypeAllowableValues();
        if (!is_null($this->container['crud_type']) && !in_array($this->container['crud_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'crud_type', must be one of '%s'",
                $this->container['crud_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFromAllowableValues();
        if (!is_null($this->container['from']) && !in_array($this->container['from'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'from', must be one of '%s'",
                $this->container['from'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string $_id _id
     *
     * @return self
     */
    public function setId($_id)
    {
        if (is_null($_id)) {
            throw new \InvalidArgumentException('non-nullable _id cannot be null');
        }
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets resource_name
     *
     * @return string
     */
    public function getResourceName()
    {
        return $this->container['resource_name'];
    }

    /**
     * Sets resource_name
     *
     * @param string $resource_name resource_name
     *
     * @return self
     */
    public function setResourceName($resource_name)
    {
        if (is_null($resource_name)) {
            throw new \InvalidArgumentException('non-nullable resource_name cannot be null');
        }
        $this->container['resource_name'] = $resource_name;

        return $this;
    }

    /**
     * Gets crud_type
     *
     * @return string
     */
    public function getCrudType()
    {
        return $this->container['crud_type'];
    }

    /**
     * Sets crud_type
     *
     * @param string $crud_type crud_type
     *
     * @return self
     */
    public function setCrudType($crud_type)
    {
        if (is_null($crud_type)) {
            throw new \InvalidArgumentException('non-nullable crud_type cannot be null');
        }
        $allowedValues = $this->getCrudTypeAllowableValues();
        if (!in_array($crud_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'crud_type', must be one of '%s'",
                    $crud_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['crud_type'] = $crud_type;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from from
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $allowedValues = $this->getFromAllowableValues();
        if (!in_array($from, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'from', must be one of '%s'",
                    $from,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip ip
     *
     * @return self
     */
    public function setIp($ip)
    {
        if (is_null($ip)) {
            throw new \InvalidArgumentException('non-nullable ip cannot be null');
        }
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets when
     *
     * @return \DateTime|null
     */
    public function getWhen()
    {
        return $this->container['when'];
    }

    /**
     * Sets when
     *
     * @param \DateTime|null $when when
     *
     * @return self
     */
    public function setWhen($when)
    {
        if (is_null($when)) {
            throw new \InvalidArgumentException('non-nullable when cannot be null');
        }
        $this->container['when'] = $when;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets server_start_date
     *
     * @return \DateTime|null
     */
    public function getServerStartDate()
    {
        return $this->container['server_start_date'];
    }

    /**
     * Sets server_start_date
     *
     * @param \DateTime|null $server_start_date server_start_date
     *
     * @return self
     */
    public function setServerStartDate($server_start_date)
    {
        if (is_null($server_start_date)) {
            throw new \InvalidArgumentException('non-nullable server_start_date cannot be null');
        }
        $this->container['server_start_date'] = $server_start_date;

        return $this;
    }

    /**
     * Gets object_details
     *
     * @return array<string,mixed>|null
     */
    public function getObjectDetails()
    {
        return $this->container['object_details'];
    }

    /**
     * Sets object_details
     *
     * @param array<string,mixed>|null $object_details Construct a type with a set of properties K of type T
     *
     * @return self
     */
    public function setObjectDetails($object_details)
    {
        if (is_null($object_details)) {
            throw new \InvalidArgumentException('non-nullable object_details cannot be null');
        }
        $this->container['object_details'] = $object_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


