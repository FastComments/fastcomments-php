<?php
/**
 * DefaultApi
 * PHP version 7.4
 *
 * @category Class
 * @package  FastComments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * fastcomments
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: support@fastcomments.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FastComments\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FastComments\Client\ApiException;
use FastComments\Client\Configuration;
use FastComments\Client\HeaderSelector;
use FastComments\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  FastComments\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addDomainConfig' => [
            'application/json',
        ],
        'aggregate' => [
            'application/json',
        ],
        'blockUserFromComment' => [
            'application/json',
        ],
        'createFeedPost' => [
            'application/json',
        ],
        'deleteComment' => [
            'application/json',
        ],
        'deleteDomainConfig' => [
            'application/json',
        ],
        'flagComment' => [
            'application/json',
        ],
        'getAuditLogs' => [
            'application/json',
        ],
        'getComment' => [
            'application/json',
        ],
        'getComments' => [
            'application/json',
        ],
        'getDomainConfig' => [
            'application/json',
        ],
        'getDomainConfigs' => [
            'application/json',
        ],
        'getFeedPosts' => [
            'application/json',
        ],
        'patchDomainConfig' => [
            'application/json',
        ],
        'putDomainConfig' => [
            'application/json',
        ],
        'saveComment' => [
            'application/json',
        ],
        'unBlockUserFromComment' => [
            'application/json',
        ],
        'unFlagComment' => [
            'application/json',
        ],
        'updateComment' => [
            'application/json',
        ],
        'updateFeedPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addDomainConfig
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  \FastComments\Client\Model\AddDomainConfigParams $add_domain_config_params add_domain_config_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDomainConfig'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\AddDomainConfig200Response
     */
    public function addDomainConfig($tenant_id, $add_domain_config_params, string $contentType = self::contentTypes['addDomainConfig'][0])
    {
        list($response) = $this->addDomainConfigWithHttpInfo($tenant_id, $add_domain_config_params, $contentType);
        return $response;
    }

    /**
     * Operation addDomainConfigWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  \FastComments\Client\Model\AddDomainConfigParams $add_domain_config_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDomainConfig'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\AddDomainConfig200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function addDomainConfigWithHttpInfo($tenant_id, $add_domain_config_params, string $contentType = self::contentTypes['addDomainConfig'][0])
    {
        $request = $this->addDomainConfigRequest($tenant_id, $add_domain_config_params, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\AddDomainConfig200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\AddDomainConfig200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\AddDomainConfig200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\AddDomainConfig200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\AddDomainConfig200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addDomainConfigAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  \FastComments\Client\Model\AddDomainConfigParams $add_domain_config_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDomainConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addDomainConfigAsync($tenant_id, $add_domain_config_params, string $contentType = self::contentTypes['addDomainConfig'][0])
    {
        return $this->addDomainConfigAsyncWithHttpInfo($tenant_id, $add_domain_config_params, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addDomainConfigAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  \FastComments\Client\Model\AddDomainConfigParams $add_domain_config_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDomainConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addDomainConfigAsyncWithHttpInfo($tenant_id, $add_domain_config_params, string $contentType = self::contentTypes['addDomainConfig'][0])
    {
        $returnType = '\FastComments\Client\Model\AddDomainConfig200Response';
        $request = $this->addDomainConfigRequest($tenant_id, $add_domain_config_params, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addDomainConfig'
     *
     * @param  string $tenant_id (required)
     * @param  \FastComments\Client\Model\AddDomainConfigParams $add_domain_config_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDomainConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addDomainConfigRequest($tenant_id, $add_domain_config_params, string $contentType = self::contentTypes['addDomainConfig'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling addDomainConfig'
            );
        }

        // verify the required parameter 'add_domain_config_params' is set
        if ($add_domain_config_params === null || (is_array($add_domain_config_params) && count($add_domain_config_params) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_domain_config_params when calling addDomainConfig'
            );
        }


        $resourcePath = '/api/v1/domain-configs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_domain_config_params)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_domain_config_params));
            } else {
                $httpBody = $add_domain_config_params;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aggregate
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  \FastComments\Client\Model\AggregationRequest $aggregation_request aggregation_request (required)
     * @param  string|null $parent_tenant_id parent_tenant_id (optional)
     * @param  bool|null $include_stats include_stats (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aggregate'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\AggregationResponse
     */
    public function aggregate($tenant_id, $aggregation_request, $parent_tenant_id = null, $include_stats = null, string $contentType = self::contentTypes['aggregate'][0])
    {
        list($response) = $this->aggregateWithHttpInfo($tenant_id, $aggregation_request, $parent_tenant_id, $include_stats, $contentType);
        return $response;
    }

    /**
     * Operation aggregateWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  \FastComments\Client\Model\AggregationRequest $aggregation_request (required)
     * @param  string|null $parent_tenant_id (optional)
     * @param  bool|null $include_stats (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aggregate'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\AggregationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function aggregateWithHttpInfo($tenant_id, $aggregation_request, $parent_tenant_id = null, $include_stats = null, string $contentType = self::contentTypes['aggregate'][0])
    {
        $request = $this->aggregateRequest($tenant_id, $aggregation_request, $parent_tenant_id, $include_stats, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\AggregationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\AggregationResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\AggregationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\AggregationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\AggregationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation aggregateAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  \FastComments\Client\Model\AggregationRequest $aggregation_request (required)
     * @param  string|null $parent_tenant_id (optional)
     * @param  bool|null $include_stats (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aggregate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aggregateAsync($tenant_id, $aggregation_request, $parent_tenant_id = null, $include_stats = null, string $contentType = self::contentTypes['aggregate'][0])
    {
        return $this->aggregateAsyncWithHttpInfo($tenant_id, $aggregation_request, $parent_tenant_id, $include_stats, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aggregateAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  \FastComments\Client\Model\AggregationRequest $aggregation_request (required)
     * @param  string|null $parent_tenant_id (optional)
     * @param  bool|null $include_stats (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aggregate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aggregateAsyncWithHttpInfo($tenant_id, $aggregation_request, $parent_tenant_id = null, $include_stats = null, string $contentType = self::contentTypes['aggregate'][0])
    {
        $returnType = '\FastComments\Client\Model\AggregationResponse';
        $request = $this->aggregateRequest($tenant_id, $aggregation_request, $parent_tenant_id, $include_stats, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aggregate'
     *
     * @param  string $tenant_id (required)
     * @param  \FastComments\Client\Model\AggregationRequest $aggregation_request (required)
     * @param  string|null $parent_tenant_id (optional)
     * @param  bool|null $include_stats (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aggregate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aggregateRequest($tenant_id, $aggregation_request, $parent_tenant_id = null, $include_stats = null, string $contentType = self::contentTypes['aggregate'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling aggregate'
            );
        }

        // verify the required parameter 'aggregation_request' is set
        if ($aggregation_request === null || (is_array($aggregation_request) && count($aggregation_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_request when calling aggregate'
            );
        }




        $resourcePath = '/api/v1/aggregate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_tenant_id,
            'parentTenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_stats,
            'includeStats', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($aggregation_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($aggregation_request));
            } else {
                $httpBody = $aggregation_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockUserFromComment
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $id id (required)
     * @param  \FastComments\Client\Model\BlockFromCommentParams $block_from_comment_params block_from_comment_params (required)
     * @param  string|null $user_id user_id (optional)
     * @param  string|null $anon_user_id anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockUserFromComment'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\BlockFromCommentPublic200Response
     */
    public function blockUserFromComment($tenant_id, $id, $block_from_comment_params, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['blockUserFromComment'][0])
    {
        list($response) = $this->blockUserFromCommentWithHttpInfo($tenant_id, $id, $block_from_comment_params, $user_id, $anon_user_id, $contentType);
        return $response;
    }

    /**
     * Operation blockUserFromCommentWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  \FastComments\Client\Model\BlockFromCommentParams $block_from_comment_params (required)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockUserFromComment'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\BlockFromCommentPublic200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockUserFromCommentWithHttpInfo($tenant_id, $id, $block_from_comment_params, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['blockUserFromComment'][0])
    {
        $request = $this->blockUserFromCommentRequest($tenant_id, $id, $block_from_comment_params, $user_id, $anon_user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\BlockFromCommentPublic200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\BlockFromCommentPublic200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\BlockFromCommentPublic200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\BlockFromCommentPublic200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\BlockFromCommentPublic200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockUserFromCommentAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  \FastComments\Client\Model\BlockFromCommentParams $block_from_comment_params (required)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockUserFromComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockUserFromCommentAsync($tenant_id, $id, $block_from_comment_params, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['blockUserFromComment'][0])
    {
        return $this->blockUserFromCommentAsyncWithHttpInfo($tenant_id, $id, $block_from_comment_params, $user_id, $anon_user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockUserFromCommentAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  \FastComments\Client\Model\BlockFromCommentParams $block_from_comment_params (required)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockUserFromComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockUserFromCommentAsyncWithHttpInfo($tenant_id, $id, $block_from_comment_params, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['blockUserFromComment'][0])
    {
        $returnType = '\FastComments\Client\Model\BlockFromCommentPublic200Response';
        $request = $this->blockUserFromCommentRequest($tenant_id, $id, $block_from_comment_params, $user_id, $anon_user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockUserFromComment'
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  \FastComments\Client\Model\BlockFromCommentParams $block_from_comment_params (required)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockUserFromComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockUserFromCommentRequest($tenant_id, $id, $block_from_comment_params, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['blockUserFromComment'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling blockUserFromComment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling blockUserFromComment'
            );
        }

        // verify the required parameter 'block_from_comment_params' is set
        if ($block_from_comment_params === null || (is_array($block_from_comment_params) && count($block_from_comment_params) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $block_from_comment_params when calling blockUserFromComment'
            );
        }




        $resourcePath = '/api/v1/comments/{id}/block';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $anon_user_id,
            'anonUserId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($block_from_comment_params)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($block_from_comment_params));
            } else {
                $httpBody = $block_from_comment_params;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createFeedPost
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  \FastComments\Client\Model\FeedPost $feed_post feed_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFeedPost'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\CreateFeedPost200Response
     */
    public function createFeedPost($tenant_id, $feed_post, string $contentType = self::contentTypes['createFeedPost'][0])
    {
        list($response) = $this->createFeedPostWithHttpInfo($tenant_id, $feed_post, $contentType);
        return $response;
    }

    /**
     * Operation createFeedPostWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  \FastComments\Client\Model\FeedPost $feed_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFeedPost'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\CreateFeedPost200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFeedPostWithHttpInfo($tenant_id, $feed_post, string $contentType = self::contentTypes['createFeedPost'][0])
    {
        $request = $this->createFeedPostRequest($tenant_id, $feed_post, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\CreateFeedPost200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\CreateFeedPost200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\CreateFeedPost200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\CreateFeedPost200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\CreateFeedPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createFeedPostAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  \FastComments\Client\Model\FeedPost $feed_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFeedPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFeedPostAsync($tenant_id, $feed_post, string $contentType = self::contentTypes['createFeedPost'][0])
    {
        return $this->createFeedPostAsyncWithHttpInfo($tenant_id, $feed_post, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createFeedPostAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  \FastComments\Client\Model\FeedPost $feed_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFeedPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFeedPostAsyncWithHttpInfo($tenant_id, $feed_post, string $contentType = self::contentTypes['createFeedPost'][0])
    {
        $returnType = '\FastComments\Client\Model\CreateFeedPost200Response';
        $request = $this->createFeedPostRequest($tenant_id, $feed_post, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createFeedPost'
     *
     * @param  string $tenant_id (required)
     * @param  \FastComments\Client\Model\FeedPost $feed_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFeedPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createFeedPostRequest($tenant_id, $feed_post, string $contentType = self::contentTypes['createFeedPost'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling createFeedPost'
            );
        }

        // verify the required parameter 'feed_post' is set
        if ($feed_post === null || (is_array($feed_post) && count($feed_post) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feed_post when calling createFeedPost'
            );
        }


        $resourcePath = '/api/v1/feed-posts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($feed_post)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($feed_post));
            } else {
                $httpBody = $feed_post;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteComment
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $id id (required)
     * @param  string|null $context_user_id context_user_id (optional)
     * @param  bool|null $is_live is_live (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteComment'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\DeleteComment200Response
     */
    public function deleteComment($tenant_id, $id, $context_user_id = null, $is_live = null, string $contentType = self::contentTypes['deleteComment'][0])
    {
        list($response) = $this->deleteCommentWithHttpInfo($tenant_id, $id, $context_user_id, $is_live, $contentType);
        return $response;
    }

    /**
     * Operation deleteCommentWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  string|null $context_user_id (optional)
     * @param  bool|null $is_live (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteComment'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\DeleteComment200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCommentWithHttpInfo($tenant_id, $id, $context_user_id = null, $is_live = null, string $contentType = self::contentTypes['deleteComment'][0])
    {
        $request = $this->deleteCommentRequest($tenant_id, $id, $context_user_id, $is_live, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\DeleteComment200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\DeleteComment200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\DeleteComment200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\DeleteComment200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\DeleteComment200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCommentAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  string|null $context_user_id (optional)
     * @param  bool|null $is_live (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCommentAsync($tenant_id, $id, $context_user_id = null, $is_live = null, string $contentType = self::contentTypes['deleteComment'][0])
    {
        return $this->deleteCommentAsyncWithHttpInfo($tenant_id, $id, $context_user_id, $is_live, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCommentAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  string|null $context_user_id (optional)
     * @param  bool|null $is_live (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCommentAsyncWithHttpInfo($tenant_id, $id, $context_user_id = null, $is_live = null, string $contentType = self::contentTypes['deleteComment'][0])
    {
        $returnType = '\FastComments\Client\Model\DeleteComment200Response';
        $request = $this->deleteCommentRequest($tenant_id, $id, $context_user_id, $is_live, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteComment'
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  string|null $context_user_id (optional)
     * @param  bool|null $is_live (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCommentRequest($tenant_id, $id, $context_user_id = null, $is_live = null, string $contentType = self::contentTypes['deleteComment'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling deleteComment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteComment'
            );
        }




        $resourcePath = '/api/v1/comments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context_user_id,
            'contextUserId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_live,
            'isLive', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDomainConfig
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $domain domain (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomainConfig'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\DeleteDomainConfig200Response
     */
    public function deleteDomainConfig($tenant_id, $domain, string $contentType = self::contentTypes['deleteDomainConfig'][0])
    {
        list($response) = $this->deleteDomainConfigWithHttpInfo($tenant_id, $domain, $contentType);
        return $response;
    }

    /**
     * Operation deleteDomainConfigWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $domain (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomainConfig'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\DeleteDomainConfig200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDomainConfigWithHttpInfo($tenant_id, $domain, string $contentType = self::contentTypes['deleteDomainConfig'][0])
    {
        $request = $this->deleteDomainConfigRequest($tenant_id, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\DeleteDomainConfig200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\DeleteDomainConfig200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\DeleteDomainConfig200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\DeleteDomainConfig200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\DeleteDomainConfig200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDomainConfigAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $domain (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomainConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDomainConfigAsync($tenant_id, $domain, string $contentType = self::contentTypes['deleteDomainConfig'][0])
    {
        return $this->deleteDomainConfigAsyncWithHttpInfo($tenant_id, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDomainConfigAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $domain (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomainConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDomainConfigAsyncWithHttpInfo($tenant_id, $domain, string $contentType = self::contentTypes['deleteDomainConfig'][0])
    {
        $returnType = '\FastComments\Client\Model\DeleteDomainConfig200Response';
        $request = $this->deleteDomainConfigRequest($tenant_id, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDomainConfig'
     *
     * @param  string $tenant_id (required)
     * @param  string $domain (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomainConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDomainConfigRequest($tenant_id, $domain, string $contentType = self::contentTypes['deleteDomainConfig'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling deleteDomainConfig'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling deleteDomainConfig'
            );
        }


        $resourcePath = '/api/v1/domain-configs/{domain}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation flagComment
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $id id (required)
     * @param  string|null $user_id user_id (optional)
     * @param  string|null $anon_user_id anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flagComment'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\FlagComment200Response
     */
    public function flagComment($tenant_id, $id, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['flagComment'][0])
    {
        list($response) = $this->flagCommentWithHttpInfo($tenant_id, $id, $user_id, $anon_user_id, $contentType);
        return $response;
    }

    /**
     * Operation flagCommentWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flagComment'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\FlagComment200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function flagCommentWithHttpInfo($tenant_id, $id, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['flagComment'][0])
    {
        $request = $this->flagCommentRequest($tenant_id, $id, $user_id, $anon_user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\FlagComment200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\FlagComment200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\FlagComment200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\FlagComment200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\FlagComment200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation flagCommentAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flagComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flagCommentAsync($tenant_id, $id, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['flagComment'][0])
    {
        return $this->flagCommentAsyncWithHttpInfo($tenant_id, $id, $user_id, $anon_user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation flagCommentAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flagComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flagCommentAsyncWithHttpInfo($tenant_id, $id, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['flagComment'][0])
    {
        $returnType = '\FastComments\Client\Model\FlagComment200Response';
        $request = $this->flagCommentRequest($tenant_id, $id, $user_id, $anon_user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'flagComment'
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flagComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function flagCommentRequest($tenant_id, $id, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['flagComment'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling flagComment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling flagComment'
            );
        }




        $resourcePath = '/api/v1/comments/{id}/flag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $anon_user_id,
            'anonUserId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAuditLogs
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  float|null $limit limit (optional)
     * @param  float|null $skip skip (optional)
     * @param  \FastComments\Client\Model\SORTDIR|null $order order (optional)
     * @param  float|null $after after (optional)
     * @param  float|null $before before (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuditLogs'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\GetAuditLogs200Response
     */
    public function getAuditLogs($tenant_id, $limit = null, $skip = null, $order = null, $after = null, $before = null, string $contentType = self::contentTypes['getAuditLogs'][0])
    {
        list($response) = $this->getAuditLogsWithHttpInfo($tenant_id, $limit, $skip, $order, $after, $before, $contentType);
        return $response;
    }

    /**
     * Operation getAuditLogsWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  float|null $limit (optional)
     * @param  float|null $skip (optional)
     * @param  \FastComments\Client\Model\SORTDIR|null $order (optional)
     * @param  float|null $after (optional)
     * @param  float|null $before (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuditLogs'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\GetAuditLogs200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAuditLogsWithHttpInfo($tenant_id, $limit = null, $skip = null, $order = null, $after = null, $before = null, string $contentType = self::contentTypes['getAuditLogs'][0])
    {
        $request = $this->getAuditLogsRequest($tenant_id, $limit, $skip, $order, $after, $before, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\GetAuditLogs200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\GetAuditLogs200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\GetAuditLogs200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\GetAuditLogs200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\GetAuditLogs200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAuditLogsAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  float|null $limit (optional)
     * @param  float|null $skip (optional)
     * @param  \FastComments\Client\Model\SORTDIR|null $order (optional)
     * @param  float|null $after (optional)
     * @param  float|null $before (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuditLogs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAuditLogsAsync($tenant_id, $limit = null, $skip = null, $order = null, $after = null, $before = null, string $contentType = self::contentTypes['getAuditLogs'][0])
    {
        return $this->getAuditLogsAsyncWithHttpInfo($tenant_id, $limit, $skip, $order, $after, $before, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAuditLogsAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  float|null $limit (optional)
     * @param  float|null $skip (optional)
     * @param  \FastComments\Client\Model\SORTDIR|null $order (optional)
     * @param  float|null $after (optional)
     * @param  float|null $before (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuditLogs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAuditLogsAsyncWithHttpInfo($tenant_id, $limit = null, $skip = null, $order = null, $after = null, $before = null, string $contentType = self::contentTypes['getAuditLogs'][0])
    {
        $returnType = '\FastComments\Client\Model\GetAuditLogs200Response';
        $request = $this->getAuditLogsRequest($tenant_id, $limit, $skip, $order, $after, $before, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAuditLogs'
     *
     * @param  string $tenant_id (required)
     * @param  float|null $limit (optional)
     * @param  float|null $skip (optional)
     * @param  \FastComments\Client\Model\SORTDIR|null $order (optional)
     * @param  float|null $after (optional)
     * @param  float|null $before (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAuditLogs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAuditLogsRequest($tenant_id, $limit = null, $skip = null, $order = null, $after = null, $before = null, string $contentType = self::contentTypes['getAuditLogs'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling getAuditLogs'
            );
        }







        $resourcePath = '/api/v1/audit-logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'SORTDIR', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getComment
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getComment'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\GetComment200Response
     */
    public function getComment($tenant_id, $id, string $contentType = self::contentTypes['getComment'][0])
    {
        list($response) = $this->getCommentWithHttpInfo($tenant_id, $id, $contentType);
        return $response;
    }

    /**
     * Operation getCommentWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getComment'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\GetComment200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCommentWithHttpInfo($tenant_id, $id, string $contentType = self::contentTypes['getComment'][0])
    {
        $request = $this->getCommentRequest($tenant_id, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\GetComment200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\GetComment200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\GetComment200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\GetComment200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\GetComment200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCommentAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommentAsync($tenant_id, $id, string $contentType = self::contentTypes['getComment'][0])
    {
        return $this->getCommentAsyncWithHttpInfo($tenant_id, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCommentAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommentAsyncWithHttpInfo($tenant_id, $id, string $contentType = self::contentTypes['getComment'][0])
    {
        $returnType = '\FastComments\Client\Model\GetComment200Response';
        $request = $this->getCommentRequest($tenant_id, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getComment'
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCommentRequest($tenant_id, $id, string $contentType = self::contentTypes['getComment'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling getComment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getComment'
            );
        }


        $resourcePath = '/api/v1/comments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getComments
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  float|null $page page (optional)
     * @param  float|null $limit limit (optional)
     * @param  float|null $skip skip (optional)
     * @param  bool|null $as_tree as_tree (optional)
     * @param  float|null $skip_children skip_children (optional)
     * @param  float|null $limit_children limit_children (optional)
     * @param  float|null $max_tree_depth max_tree_depth (optional)
     * @param  string|null $url_id url_id (optional)
     * @param  string|null $user_id user_id (optional)
     * @param  string|null $anon_user_id anon_user_id (optional)
     * @param  string|null $context_user_id context_user_id (optional)
     * @param  string|null $hash_tag hash_tag (optional)
     * @param  string|null $parent_id parent_id (optional)
     * @param  \FastComments\Client\Model\SortDirections|null $direction direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getComments'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\GetComments200Response
     */
    public function getComments($tenant_id, $page = null, $limit = null, $skip = null, $as_tree = null, $skip_children = null, $limit_children = null, $max_tree_depth = null, $url_id = null, $user_id = null, $anon_user_id = null, $context_user_id = null, $hash_tag = null, $parent_id = null, $direction = null, string $contentType = self::contentTypes['getComments'][0])
    {
        list($response) = $this->getCommentsWithHttpInfo($tenant_id, $page, $limit, $skip, $as_tree, $skip_children, $limit_children, $max_tree_depth, $url_id, $user_id, $anon_user_id, $context_user_id, $hash_tag, $parent_id, $direction, $contentType);
        return $response;
    }

    /**
     * Operation getCommentsWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  float|null $page (optional)
     * @param  float|null $limit (optional)
     * @param  float|null $skip (optional)
     * @param  bool|null $as_tree (optional)
     * @param  float|null $skip_children (optional)
     * @param  float|null $limit_children (optional)
     * @param  float|null $max_tree_depth (optional)
     * @param  string|null $url_id (optional)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string|null $context_user_id (optional)
     * @param  string|null $hash_tag (optional)
     * @param  string|null $parent_id (optional)
     * @param  \FastComments\Client\Model\SortDirections|null $direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getComments'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\GetComments200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCommentsWithHttpInfo($tenant_id, $page = null, $limit = null, $skip = null, $as_tree = null, $skip_children = null, $limit_children = null, $max_tree_depth = null, $url_id = null, $user_id = null, $anon_user_id = null, $context_user_id = null, $hash_tag = null, $parent_id = null, $direction = null, string $contentType = self::contentTypes['getComments'][0])
    {
        $request = $this->getCommentsRequest($tenant_id, $page, $limit, $skip, $as_tree, $skip_children, $limit_children, $max_tree_depth, $url_id, $user_id, $anon_user_id, $context_user_id, $hash_tag, $parent_id, $direction, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\GetComments200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\GetComments200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\GetComments200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\GetComments200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\GetComments200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCommentsAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  float|null $page (optional)
     * @param  float|null $limit (optional)
     * @param  float|null $skip (optional)
     * @param  bool|null $as_tree (optional)
     * @param  float|null $skip_children (optional)
     * @param  float|null $limit_children (optional)
     * @param  float|null $max_tree_depth (optional)
     * @param  string|null $url_id (optional)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string|null $context_user_id (optional)
     * @param  string|null $hash_tag (optional)
     * @param  string|null $parent_id (optional)
     * @param  \FastComments\Client\Model\SortDirections|null $direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommentsAsync($tenant_id, $page = null, $limit = null, $skip = null, $as_tree = null, $skip_children = null, $limit_children = null, $max_tree_depth = null, $url_id = null, $user_id = null, $anon_user_id = null, $context_user_id = null, $hash_tag = null, $parent_id = null, $direction = null, string $contentType = self::contentTypes['getComments'][0])
    {
        return $this->getCommentsAsyncWithHttpInfo($tenant_id, $page, $limit, $skip, $as_tree, $skip_children, $limit_children, $max_tree_depth, $url_id, $user_id, $anon_user_id, $context_user_id, $hash_tag, $parent_id, $direction, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCommentsAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  float|null $page (optional)
     * @param  float|null $limit (optional)
     * @param  float|null $skip (optional)
     * @param  bool|null $as_tree (optional)
     * @param  float|null $skip_children (optional)
     * @param  float|null $limit_children (optional)
     * @param  float|null $max_tree_depth (optional)
     * @param  string|null $url_id (optional)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string|null $context_user_id (optional)
     * @param  string|null $hash_tag (optional)
     * @param  string|null $parent_id (optional)
     * @param  \FastComments\Client\Model\SortDirections|null $direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommentsAsyncWithHttpInfo($tenant_id, $page = null, $limit = null, $skip = null, $as_tree = null, $skip_children = null, $limit_children = null, $max_tree_depth = null, $url_id = null, $user_id = null, $anon_user_id = null, $context_user_id = null, $hash_tag = null, $parent_id = null, $direction = null, string $contentType = self::contentTypes['getComments'][0])
    {
        $returnType = '\FastComments\Client\Model\GetComments200Response';
        $request = $this->getCommentsRequest($tenant_id, $page, $limit, $skip, $as_tree, $skip_children, $limit_children, $max_tree_depth, $url_id, $user_id, $anon_user_id, $context_user_id, $hash_tag, $parent_id, $direction, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getComments'
     *
     * @param  string $tenant_id (required)
     * @param  float|null $page (optional)
     * @param  float|null $limit (optional)
     * @param  float|null $skip (optional)
     * @param  bool|null $as_tree (optional)
     * @param  float|null $skip_children (optional)
     * @param  float|null $limit_children (optional)
     * @param  float|null $max_tree_depth (optional)
     * @param  string|null $url_id (optional)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string|null $context_user_id (optional)
     * @param  string|null $hash_tag (optional)
     * @param  string|null $parent_id (optional)
     * @param  \FastComments\Client\Model\SortDirections|null $direction (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCommentsRequest($tenant_id, $page = null, $limit = null, $skip = null, $as_tree = null, $skip_children = null, $limit_children = null, $max_tree_depth = null, $url_id = null, $user_id = null, $anon_user_id = null, $context_user_id = null, $hash_tag = null, $parent_id = null, $direction = null, string $contentType = self::contentTypes['getComments'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling getComments'
            );
        }
















        $resourcePath = '/api/v1/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $as_tree,
            'asTree', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip_children,
            'skipChildren', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit_children,
            'limitChildren', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_tree_depth,
            'maxTreeDepth', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $url_id,
            'urlId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $anon_user_id,
            'anonUserId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context_user_id,
            'contextUserId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hash_tag,
            'hashTag', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_id,
            'parentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'SortDirections', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDomainConfig
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $domain domain (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomainConfig'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\GetDomainConfig200Response
     */
    public function getDomainConfig($tenant_id, $domain, string $contentType = self::contentTypes['getDomainConfig'][0])
    {
        list($response) = $this->getDomainConfigWithHttpInfo($tenant_id, $domain, $contentType);
        return $response;
    }

    /**
     * Operation getDomainConfigWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $domain (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomainConfig'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\GetDomainConfig200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDomainConfigWithHttpInfo($tenant_id, $domain, string $contentType = self::contentTypes['getDomainConfig'][0])
    {
        $request = $this->getDomainConfigRequest($tenant_id, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\GetDomainConfig200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\GetDomainConfig200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\GetDomainConfig200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\GetDomainConfig200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\GetDomainConfig200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDomainConfigAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $domain (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomainConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDomainConfigAsync($tenant_id, $domain, string $contentType = self::contentTypes['getDomainConfig'][0])
    {
        return $this->getDomainConfigAsyncWithHttpInfo($tenant_id, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDomainConfigAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $domain (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomainConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDomainConfigAsyncWithHttpInfo($tenant_id, $domain, string $contentType = self::contentTypes['getDomainConfig'][0])
    {
        $returnType = '\FastComments\Client\Model\GetDomainConfig200Response';
        $request = $this->getDomainConfigRequest($tenant_id, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDomainConfig'
     *
     * @param  string $tenant_id (required)
     * @param  string $domain (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomainConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDomainConfigRequest($tenant_id, $domain, string $contentType = self::contentTypes['getDomainConfig'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling getDomainConfig'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling getDomainConfig'
            );
        }


        $resourcePath = '/api/v1/domain-configs/{domain}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDomainConfigs
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomainConfigs'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\GetDomainConfigs200Response
     */
    public function getDomainConfigs($tenant_id, string $contentType = self::contentTypes['getDomainConfigs'][0])
    {
        list($response) = $this->getDomainConfigsWithHttpInfo($tenant_id, $contentType);
        return $response;
    }

    /**
     * Operation getDomainConfigsWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomainConfigs'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\GetDomainConfigs200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDomainConfigsWithHttpInfo($tenant_id, string $contentType = self::contentTypes['getDomainConfigs'][0])
    {
        $request = $this->getDomainConfigsRequest($tenant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\GetDomainConfigs200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\GetDomainConfigs200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\GetDomainConfigs200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\GetDomainConfigs200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\GetDomainConfigs200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDomainConfigsAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomainConfigs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDomainConfigsAsync($tenant_id, string $contentType = self::contentTypes['getDomainConfigs'][0])
    {
        return $this->getDomainConfigsAsyncWithHttpInfo($tenant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDomainConfigsAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomainConfigs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDomainConfigsAsyncWithHttpInfo($tenant_id, string $contentType = self::contentTypes['getDomainConfigs'][0])
    {
        $returnType = '\FastComments\Client\Model\GetDomainConfigs200Response';
        $request = $this->getDomainConfigsRequest($tenant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDomainConfigs'
     *
     * @param  string $tenant_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomainConfigs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDomainConfigsRequest($tenant_id, string $contentType = self::contentTypes['getDomainConfigs'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling getDomainConfigs'
            );
        }


        $resourcePath = '/api/v1/domain-configs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFeedPosts
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  float|null $after_id after_id (optional)
     * @param  float|null $limit limit (optional)
     * @param  string[]|null $tags tags (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFeedPosts'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\GetFeedPosts200Response
     */
    public function getFeedPosts($tenant_id, $after_id = null, $limit = null, $tags = null, string $contentType = self::contentTypes['getFeedPosts'][0])
    {
        list($response) = $this->getFeedPostsWithHttpInfo($tenant_id, $after_id, $limit, $tags, $contentType);
        return $response;
    }

    /**
     * Operation getFeedPostsWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  float|null $after_id (optional)
     * @param  float|null $limit (optional)
     * @param  string[]|null $tags (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFeedPosts'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\GetFeedPosts200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFeedPostsWithHttpInfo($tenant_id, $after_id = null, $limit = null, $tags = null, string $contentType = self::contentTypes['getFeedPosts'][0])
    {
        $request = $this->getFeedPostsRequest($tenant_id, $after_id, $limit, $tags, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\GetFeedPosts200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\GetFeedPosts200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\GetFeedPosts200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\GetFeedPosts200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\GetFeedPosts200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFeedPostsAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  float|null $after_id (optional)
     * @param  float|null $limit (optional)
     * @param  string[]|null $tags (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFeedPosts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFeedPostsAsync($tenant_id, $after_id = null, $limit = null, $tags = null, string $contentType = self::contentTypes['getFeedPosts'][0])
    {
        return $this->getFeedPostsAsyncWithHttpInfo($tenant_id, $after_id, $limit, $tags, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFeedPostsAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  float|null $after_id (optional)
     * @param  float|null $limit (optional)
     * @param  string[]|null $tags (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFeedPosts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFeedPostsAsyncWithHttpInfo($tenant_id, $after_id = null, $limit = null, $tags = null, string $contentType = self::contentTypes['getFeedPosts'][0])
    {
        $returnType = '\FastComments\Client\Model\GetFeedPosts200Response';
        $request = $this->getFeedPostsRequest($tenant_id, $after_id, $limit, $tags, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFeedPosts'
     *
     * @param  string $tenant_id (required)
     * @param  float|null $after_id (optional)
     * @param  float|null $limit (optional)
     * @param  string[]|null $tags (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFeedPosts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFeedPostsRequest($tenant_id, $after_id = null, $limit = null, $tags = null, string $contentType = self::contentTypes['getFeedPosts'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling getFeedPosts'
            );
        }





        $resourcePath = '/api/v1/feed-posts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after_id,
            'afterId', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tags,
            'tags', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchDomainConfig
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $domain_to_update domain_to_update (required)
     * @param  \FastComments\Client\Model\PatchDomainConfigParams $patch_domain_config_params patch_domain_config_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDomainConfig'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\GetDomainConfig200Response
     */
    public function patchDomainConfig($tenant_id, $domain_to_update, $patch_domain_config_params, string $contentType = self::contentTypes['patchDomainConfig'][0])
    {
        list($response) = $this->patchDomainConfigWithHttpInfo($tenant_id, $domain_to_update, $patch_domain_config_params, $contentType);
        return $response;
    }

    /**
     * Operation patchDomainConfigWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $domain_to_update (required)
     * @param  \FastComments\Client\Model\PatchDomainConfigParams $patch_domain_config_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDomainConfig'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\GetDomainConfig200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchDomainConfigWithHttpInfo($tenant_id, $domain_to_update, $patch_domain_config_params, string $contentType = self::contentTypes['patchDomainConfig'][0])
    {
        $request = $this->patchDomainConfigRequest($tenant_id, $domain_to_update, $patch_domain_config_params, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\GetDomainConfig200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\GetDomainConfig200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\GetDomainConfig200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\GetDomainConfig200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\GetDomainConfig200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchDomainConfigAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $domain_to_update (required)
     * @param  \FastComments\Client\Model\PatchDomainConfigParams $patch_domain_config_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDomainConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDomainConfigAsync($tenant_id, $domain_to_update, $patch_domain_config_params, string $contentType = self::contentTypes['patchDomainConfig'][0])
    {
        return $this->patchDomainConfigAsyncWithHttpInfo($tenant_id, $domain_to_update, $patch_domain_config_params, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchDomainConfigAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $domain_to_update (required)
     * @param  \FastComments\Client\Model\PatchDomainConfigParams $patch_domain_config_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDomainConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDomainConfigAsyncWithHttpInfo($tenant_id, $domain_to_update, $patch_domain_config_params, string $contentType = self::contentTypes['patchDomainConfig'][0])
    {
        $returnType = '\FastComments\Client\Model\GetDomainConfig200Response';
        $request = $this->patchDomainConfigRequest($tenant_id, $domain_to_update, $patch_domain_config_params, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchDomainConfig'
     *
     * @param  string $tenant_id (required)
     * @param  string $domain_to_update (required)
     * @param  \FastComments\Client\Model\PatchDomainConfigParams $patch_domain_config_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDomainConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchDomainConfigRequest($tenant_id, $domain_to_update, $patch_domain_config_params, string $contentType = self::contentTypes['patchDomainConfig'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling patchDomainConfig'
            );
        }

        // verify the required parameter 'domain_to_update' is set
        if ($domain_to_update === null || (is_array($domain_to_update) && count($domain_to_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_to_update when calling patchDomainConfig'
            );
        }

        // verify the required parameter 'patch_domain_config_params' is set
        if ($patch_domain_config_params === null || (is_array($patch_domain_config_params) && count($patch_domain_config_params) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $patch_domain_config_params when calling patchDomainConfig'
            );
        }


        $resourcePath = '/api/v1/domain-configs/{domainToUpdate}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($domain_to_update !== null) {
            $resourcePath = str_replace(
                '{' . 'domainToUpdate' . '}',
                ObjectSerializer::toPathValue($domain_to_update),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch_domain_config_params)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_domain_config_params));
            } else {
                $httpBody = $patch_domain_config_params;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putDomainConfig
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $domain_to_update domain_to_update (required)
     * @param  \FastComments\Client\Model\UpdateDomainConfigParams $update_domain_config_params update_domain_config_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putDomainConfig'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\GetDomainConfig200Response
     */
    public function putDomainConfig($tenant_id, $domain_to_update, $update_domain_config_params, string $contentType = self::contentTypes['putDomainConfig'][0])
    {
        list($response) = $this->putDomainConfigWithHttpInfo($tenant_id, $domain_to_update, $update_domain_config_params, $contentType);
        return $response;
    }

    /**
     * Operation putDomainConfigWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $domain_to_update (required)
     * @param  \FastComments\Client\Model\UpdateDomainConfigParams $update_domain_config_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putDomainConfig'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\GetDomainConfig200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function putDomainConfigWithHttpInfo($tenant_id, $domain_to_update, $update_domain_config_params, string $contentType = self::contentTypes['putDomainConfig'][0])
    {
        $request = $this->putDomainConfigRequest($tenant_id, $domain_to_update, $update_domain_config_params, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\GetDomainConfig200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\GetDomainConfig200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\GetDomainConfig200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\GetDomainConfig200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\GetDomainConfig200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putDomainConfigAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $domain_to_update (required)
     * @param  \FastComments\Client\Model\UpdateDomainConfigParams $update_domain_config_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putDomainConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putDomainConfigAsync($tenant_id, $domain_to_update, $update_domain_config_params, string $contentType = self::contentTypes['putDomainConfig'][0])
    {
        return $this->putDomainConfigAsyncWithHttpInfo($tenant_id, $domain_to_update, $update_domain_config_params, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putDomainConfigAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $domain_to_update (required)
     * @param  \FastComments\Client\Model\UpdateDomainConfigParams $update_domain_config_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putDomainConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putDomainConfigAsyncWithHttpInfo($tenant_id, $domain_to_update, $update_domain_config_params, string $contentType = self::contentTypes['putDomainConfig'][0])
    {
        $returnType = '\FastComments\Client\Model\GetDomainConfig200Response';
        $request = $this->putDomainConfigRequest($tenant_id, $domain_to_update, $update_domain_config_params, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putDomainConfig'
     *
     * @param  string $tenant_id (required)
     * @param  string $domain_to_update (required)
     * @param  \FastComments\Client\Model\UpdateDomainConfigParams $update_domain_config_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putDomainConfig'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putDomainConfigRequest($tenant_id, $domain_to_update, $update_domain_config_params, string $contentType = self::contentTypes['putDomainConfig'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling putDomainConfig'
            );
        }

        // verify the required parameter 'domain_to_update' is set
        if ($domain_to_update === null || (is_array($domain_to_update) && count($domain_to_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_to_update when calling putDomainConfig'
            );
        }

        // verify the required parameter 'update_domain_config_params' is set
        if ($update_domain_config_params === null || (is_array($update_domain_config_params) && count($update_domain_config_params) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_domain_config_params when calling putDomainConfig'
            );
        }


        $resourcePath = '/api/v1/domain-configs/{domainToUpdate}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($domain_to_update !== null) {
            $resourcePath = str_replace(
                '{' . 'domainToUpdate' . '}',
                ObjectSerializer::toPathValue($domain_to_update),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_domain_config_params)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_domain_config_params));
            } else {
                $httpBody = $update_domain_config_params;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saveComment
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  \FastComments\Client\Model\CreateCommentParams $create_comment_params create_comment_params (required)
     * @param  bool|null $is_live is_live (optional)
     * @param  bool|null $do_spam_check do_spam_check (optional)
     * @param  bool|null $send_emails send_emails (optional)
     * @param  bool|null $populate_notifications populate_notifications (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveComment'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\SaveComment200Response
     */
    public function saveComment($tenant_id, $create_comment_params, $is_live = null, $do_spam_check = null, $send_emails = null, $populate_notifications = null, string $contentType = self::contentTypes['saveComment'][0])
    {
        list($response) = $this->saveCommentWithHttpInfo($tenant_id, $create_comment_params, $is_live, $do_spam_check, $send_emails, $populate_notifications, $contentType);
        return $response;
    }

    /**
     * Operation saveCommentWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  \FastComments\Client\Model\CreateCommentParams $create_comment_params (required)
     * @param  bool|null $is_live (optional)
     * @param  bool|null $do_spam_check (optional)
     * @param  bool|null $send_emails (optional)
     * @param  bool|null $populate_notifications (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveComment'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\SaveComment200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function saveCommentWithHttpInfo($tenant_id, $create_comment_params, $is_live = null, $do_spam_check = null, $send_emails = null, $populate_notifications = null, string $contentType = self::contentTypes['saveComment'][0])
    {
        $request = $this->saveCommentRequest($tenant_id, $create_comment_params, $is_live, $do_spam_check, $send_emails, $populate_notifications, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\SaveComment200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\SaveComment200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\SaveComment200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\SaveComment200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\SaveComment200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saveCommentAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  \FastComments\Client\Model\CreateCommentParams $create_comment_params (required)
     * @param  bool|null $is_live (optional)
     * @param  bool|null $do_spam_check (optional)
     * @param  bool|null $send_emails (optional)
     * @param  bool|null $populate_notifications (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveCommentAsync($tenant_id, $create_comment_params, $is_live = null, $do_spam_check = null, $send_emails = null, $populate_notifications = null, string $contentType = self::contentTypes['saveComment'][0])
    {
        return $this->saveCommentAsyncWithHttpInfo($tenant_id, $create_comment_params, $is_live, $do_spam_check, $send_emails, $populate_notifications, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saveCommentAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  \FastComments\Client\Model\CreateCommentParams $create_comment_params (required)
     * @param  bool|null $is_live (optional)
     * @param  bool|null $do_spam_check (optional)
     * @param  bool|null $send_emails (optional)
     * @param  bool|null $populate_notifications (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveCommentAsyncWithHttpInfo($tenant_id, $create_comment_params, $is_live = null, $do_spam_check = null, $send_emails = null, $populate_notifications = null, string $contentType = self::contentTypes['saveComment'][0])
    {
        $returnType = '\FastComments\Client\Model\SaveComment200Response';
        $request = $this->saveCommentRequest($tenant_id, $create_comment_params, $is_live, $do_spam_check, $send_emails, $populate_notifications, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saveComment'
     *
     * @param  string $tenant_id (required)
     * @param  \FastComments\Client\Model\CreateCommentParams $create_comment_params (required)
     * @param  bool|null $is_live (optional)
     * @param  bool|null $do_spam_check (optional)
     * @param  bool|null $send_emails (optional)
     * @param  bool|null $populate_notifications (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function saveCommentRequest($tenant_id, $create_comment_params, $is_live = null, $do_spam_check = null, $send_emails = null, $populate_notifications = null, string $contentType = self::contentTypes['saveComment'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling saveComment'
            );
        }

        // verify the required parameter 'create_comment_params' is set
        if ($create_comment_params === null || (is_array($create_comment_params) && count($create_comment_params) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_comment_params when calling saveComment'
            );
        }






        $resourcePath = '/api/v1/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_live,
            'isLive', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $do_spam_check,
            'doSpamCheck', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $send_emails,
            'sendEmails', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $populate_notifications,
            'populateNotifications', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_comment_params)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_comment_params));
            } else {
                $httpBody = $create_comment_params;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unBlockUserFromComment
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $id id (required)
     * @param  \FastComments\Client\Model\UnBlockFromCommentParams $un_block_from_comment_params un_block_from_comment_params (required)
     * @param  string|null $user_id user_id (optional)
     * @param  string|null $anon_user_id anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unBlockUserFromComment'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\UnBlockCommentPublic200Response
     */
    public function unBlockUserFromComment($tenant_id, $id, $un_block_from_comment_params, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['unBlockUserFromComment'][0])
    {
        list($response) = $this->unBlockUserFromCommentWithHttpInfo($tenant_id, $id, $un_block_from_comment_params, $user_id, $anon_user_id, $contentType);
        return $response;
    }

    /**
     * Operation unBlockUserFromCommentWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  \FastComments\Client\Model\UnBlockFromCommentParams $un_block_from_comment_params (required)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unBlockUserFromComment'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\UnBlockCommentPublic200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function unBlockUserFromCommentWithHttpInfo($tenant_id, $id, $un_block_from_comment_params, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['unBlockUserFromComment'][0])
    {
        $request = $this->unBlockUserFromCommentRequest($tenant_id, $id, $un_block_from_comment_params, $user_id, $anon_user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\UnBlockCommentPublic200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\UnBlockCommentPublic200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\UnBlockCommentPublic200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\UnBlockCommentPublic200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\UnBlockCommentPublic200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unBlockUserFromCommentAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  \FastComments\Client\Model\UnBlockFromCommentParams $un_block_from_comment_params (required)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unBlockUserFromComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unBlockUserFromCommentAsync($tenant_id, $id, $un_block_from_comment_params, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['unBlockUserFromComment'][0])
    {
        return $this->unBlockUserFromCommentAsyncWithHttpInfo($tenant_id, $id, $un_block_from_comment_params, $user_id, $anon_user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unBlockUserFromCommentAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  \FastComments\Client\Model\UnBlockFromCommentParams $un_block_from_comment_params (required)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unBlockUserFromComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unBlockUserFromCommentAsyncWithHttpInfo($tenant_id, $id, $un_block_from_comment_params, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['unBlockUserFromComment'][0])
    {
        $returnType = '\FastComments\Client\Model\UnBlockCommentPublic200Response';
        $request = $this->unBlockUserFromCommentRequest($tenant_id, $id, $un_block_from_comment_params, $user_id, $anon_user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unBlockUserFromComment'
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  \FastComments\Client\Model\UnBlockFromCommentParams $un_block_from_comment_params (required)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unBlockUserFromComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unBlockUserFromCommentRequest($tenant_id, $id, $un_block_from_comment_params, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['unBlockUserFromComment'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling unBlockUserFromComment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling unBlockUserFromComment'
            );
        }

        // verify the required parameter 'un_block_from_comment_params' is set
        if ($un_block_from_comment_params === null || (is_array($un_block_from_comment_params) && count($un_block_from_comment_params) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $un_block_from_comment_params when calling unBlockUserFromComment'
            );
        }




        $resourcePath = '/api/v1/comments/{id}/un-block';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $anon_user_id,
            'anonUserId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($un_block_from_comment_params)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($un_block_from_comment_params));
            } else {
                $httpBody = $un_block_from_comment_params;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unFlagComment
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $id id (required)
     * @param  string|null $user_id user_id (optional)
     * @param  string|null $anon_user_id anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unFlagComment'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\FlagComment200Response
     */
    public function unFlagComment($tenant_id, $id, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['unFlagComment'][0])
    {
        list($response) = $this->unFlagCommentWithHttpInfo($tenant_id, $id, $user_id, $anon_user_id, $contentType);
        return $response;
    }

    /**
     * Operation unFlagCommentWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unFlagComment'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\FlagComment200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function unFlagCommentWithHttpInfo($tenant_id, $id, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['unFlagComment'][0])
    {
        $request = $this->unFlagCommentRequest($tenant_id, $id, $user_id, $anon_user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\FlagComment200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\FlagComment200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\FlagComment200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\FlagComment200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\FlagComment200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unFlagCommentAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unFlagComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unFlagCommentAsync($tenant_id, $id, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['unFlagComment'][0])
    {
        return $this->unFlagCommentAsyncWithHttpInfo($tenant_id, $id, $user_id, $anon_user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unFlagCommentAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unFlagComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unFlagCommentAsyncWithHttpInfo($tenant_id, $id, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['unFlagComment'][0])
    {
        $returnType = '\FastComments\Client\Model\FlagComment200Response';
        $request = $this->unFlagCommentRequest($tenant_id, $id, $user_id, $anon_user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unFlagComment'
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  string|null $user_id (optional)
     * @param  string|null $anon_user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unFlagComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unFlagCommentRequest($tenant_id, $id, $user_id = null, $anon_user_id = null, string $contentType = self::contentTypes['unFlagComment'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling unFlagComment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling unFlagComment'
            );
        }




        $resourcePath = '/api/v1/comments/{id}/un-flag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $anon_user_id,
            'anonUserId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateComment
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $id id (required)
     * @param  \FastComments\Client\Model\PickAPICommentUpdatableCommentFields $body body (required)
     * @param  string|null $context_user_id context_user_id (optional)
     * @param  bool|null $do_spam_check do_spam_check (optional)
     * @param  bool|null $is_live is_live (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateComment'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\FlagCommentPublic200Response
     */
    public function updateComment($tenant_id, $id, $body, $context_user_id = null, $do_spam_check = null, $is_live = null, string $contentType = self::contentTypes['updateComment'][0])
    {
        list($response) = $this->updateCommentWithHttpInfo($tenant_id, $id, $body, $context_user_id, $do_spam_check, $is_live, $contentType);
        return $response;
    }

    /**
     * Operation updateCommentWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  \FastComments\Client\Model\PickAPICommentUpdatableCommentFields $body (required)
     * @param  string|null $context_user_id (optional)
     * @param  bool|null $do_spam_check (optional)
     * @param  bool|null $is_live (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateComment'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\FlagCommentPublic200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCommentWithHttpInfo($tenant_id, $id, $body, $context_user_id = null, $do_spam_check = null, $is_live = null, string $contentType = self::contentTypes['updateComment'][0])
    {
        $request = $this->updateCommentRequest($tenant_id, $id, $body, $context_user_id, $do_spam_check, $is_live, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\FlagCommentPublic200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\FlagCommentPublic200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\FlagCommentPublic200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\FlagCommentPublic200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\FlagCommentPublic200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCommentAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  \FastComments\Client\Model\PickAPICommentUpdatableCommentFields $body (required)
     * @param  string|null $context_user_id (optional)
     * @param  bool|null $do_spam_check (optional)
     * @param  bool|null $is_live (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCommentAsync($tenant_id, $id, $body, $context_user_id = null, $do_spam_check = null, $is_live = null, string $contentType = self::contentTypes['updateComment'][0])
    {
        return $this->updateCommentAsyncWithHttpInfo($tenant_id, $id, $body, $context_user_id, $do_spam_check, $is_live, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCommentAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  \FastComments\Client\Model\PickAPICommentUpdatableCommentFields $body (required)
     * @param  string|null $context_user_id (optional)
     * @param  bool|null $do_spam_check (optional)
     * @param  bool|null $is_live (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCommentAsyncWithHttpInfo($tenant_id, $id, $body, $context_user_id = null, $do_spam_check = null, $is_live = null, string $contentType = self::contentTypes['updateComment'][0])
    {
        $returnType = '\FastComments\Client\Model\FlagCommentPublic200Response';
        $request = $this->updateCommentRequest($tenant_id, $id, $body, $context_user_id, $do_spam_check, $is_live, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateComment'
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  \FastComments\Client\Model\PickAPICommentUpdatableCommentFields $body (required)
     * @param  string|null $context_user_id (optional)
     * @param  bool|null $do_spam_check (optional)
     * @param  bool|null $is_live (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCommentRequest($tenant_id, $id, $body, $context_user_id = null, $do_spam_check = null, $is_live = null, string $contentType = self::contentTypes['updateComment'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling updateComment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateComment'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateComment'
            );
        }





        $resourcePath = '/api/v1/comments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $context_user_id,
            'contextUserId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $do_spam_check,
            'doSpamCheck', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_live,
            'isLive', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateFeedPost
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $id id (required)
     * @param  \FastComments\Client\Model\FeedPost $feed_post feed_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFeedPost'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FastComments\Client\Model\FlagCommentPublic200Response
     */
    public function updateFeedPost($tenant_id, $id, $feed_post, string $contentType = self::contentTypes['updateFeedPost'][0])
    {
        list($response) = $this->updateFeedPostWithHttpInfo($tenant_id, $id, $feed_post, $contentType);
        return $response;
    }

    /**
     * Operation updateFeedPostWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  \FastComments\Client\Model\FeedPost $feed_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFeedPost'] to see the possible values for this operation
     *
     * @throws \FastComments\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FastComments\Client\Model\FlagCommentPublic200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFeedPostWithHttpInfo($tenant_id, $id, $feed_post, string $contentType = self::contentTypes['updateFeedPost'][0])
    {
        $request = $this->updateFeedPostRequest($tenant_id, $id, $feed_post, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\FastComments\Client\Model\FlagCommentPublic200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FastComments\Client\Model\FlagCommentPublic200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FastComments\Client\Model\FlagCommentPublic200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\FastComments\Client\Model\FlagCommentPublic200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FastComments\Client\Model\FlagCommentPublic200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateFeedPostAsync
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  \FastComments\Client\Model\FeedPost $feed_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFeedPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFeedPostAsync($tenant_id, $id, $feed_post, string $contentType = self::contentTypes['updateFeedPost'][0])
    {
        return $this->updateFeedPostAsyncWithHttpInfo($tenant_id, $id, $feed_post, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateFeedPostAsyncWithHttpInfo
     *
     * FastComments PHP API Client - A SDK for interacting with the FastComments API
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  \FastComments\Client\Model\FeedPost $feed_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFeedPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFeedPostAsyncWithHttpInfo($tenant_id, $id, $feed_post, string $contentType = self::contentTypes['updateFeedPost'][0])
    {
        $returnType = '\FastComments\Client\Model\FlagCommentPublic200Response';
        $request = $this->updateFeedPostRequest($tenant_id, $id, $feed_post, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateFeedPost'
     *
     * @param  string $tenant_id (required)
     * @param  string $id (required)
     * @param  \FastComments\Client\Model\FeedPost $feed_post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFeedPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFeedPostRequest($tenant_id, $id, $feed_post, string $contentType = self::contentTypes['updateFeedPost'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling updateFeedPost'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateFeedPost'
            );
        }

        // verify the required parameter 'feed_post' is set
        if ($feed_post === null || (is_array($feed_post) && count($feed_post) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feed_post when calling updateFeedPost'
            );
        }


        $resourcePath = '/api/v1/feed-posts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_id,
            'tenantId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($feed_post)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($feed_post));
            } else {
                $httpBody = $feed_post;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
